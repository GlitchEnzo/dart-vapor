// Generated by dart2js, the Dart to JavaScript compiler version: 1.1.3.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
function dart() {}var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = (function() {
  var result = array[0];
  if (result != null && typeof result != "function") {
    throw new Error(
        name + ": expected value of type 'function' at index " + (0) +
        " but got " + (typeof result));
  }
  return result;
})()];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = (function() {
  var result = array[index + 2];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (index + 2) +
        " but got " + (typeof result));
  }
  return result;
})();
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = (function() {
  var result = array[index + 1];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (index + 1) +
        " but got " + (typeof result));
  }
  return result;
})();
    }
    var getterStubName = (function() {
  var result = array[++index];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (++index) +
        " but got " + (typeof result));
  }
  return result;
})();
    array = array.slice(++index);
    var requiredParameterInfo = (function() {
  var result = array[0];
  if (result != null && (typeof result != "number" || (result|0) !== result)) {
    throw new Error(
        name + ": expected value of type 'int' at index " + (0) +
        " but got " + (typeof result));
  }
  return result;
})();
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = (function() {
  var result = array[1];
  if (result != null && (typeof result != "number" || (result|0) !== result)) {
    throw new Error(
        name + ": expected value of type 'int' at index " + (1) +
        " but got " + (typeof result));
  }
  return result;
})();
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = (function() {
  var result = array[2];
  if (result != null && (typeof result != "number" || (result|0) !== result) && typeof result != "function") {
    throw new Error(
        name + ": expected value of type 'function or int' at index " + (2) +
        " but got " + (typeof result));
  }
  return result;
})();
    var isReflectable = array.length > requiredParameterCount + optionalParameterCount + 3;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
    }
    if (isReflectable) {
      var unmangledNameIndex = optionalParameterCount * 2 + requiredParameterCount + 3;
      var unmangledName = (function() {
  var result = array[unmangledNameIndex];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (unmangledNameIndex) +
        " but got " + (typeof result));
  }
  return result;
})();
      var reflectionName = unmangledName + ":" + requiredParameterCount + ":" + optionalParameterCount;
      if (isGetter) {
        reflectionName = unmangledName;
      } else if (isSetter) {
        reflectionName = unmangledName + "=";
      }
      if (isStatic) {
        init.mangledGlobalNames[name] = reflectionName;
      } else {
        init.mangledNames[name] = reflectionName;
      }
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["OrbitalGolf", "golf.dart", , V, {
  "": "",
  main: [function() {
    var t1, t2, t3, e;
    t1 = document.querySelector("#prev");
    t1.toString;
    t2 = C.EventStreamProvider_click._eventType;
    t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, t2, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(V.onPrevClicked$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = document.querySelector("#prev");
    t1.toString;
    t3 = C.EventStreamProvider_touchstart._eventType;
    t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, t3, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(V.onPrevTouched$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = document.querySelector("#next");
    t1.toString;
    t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, t2, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(V.onNextClicked$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = document.querySelector("#next");
    t1.toString;
    t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, t3, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(V.onNextTouched$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = document.querySelector("#fullscreen");
    t1.toString;
    t2 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, t2, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(V.onFullscreenClicked$closure()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    t2 = document.querySelector("#fullscreen");
    t2.toString;
    t3 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t2, t3, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(V.onFullscreenTouched$closure()), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
    t3 = new Float32Array(2);
    t3[0] = 0;
    t3[1] = 0;
    t3 = V.World$(new T.Vector2(t3), true, V.DefaultWorldPool$());
    t3 = new Q.Scene("New Scene", [], [], false, null, t3);
    t3.Scene$FromCanvas$1(Q.Canvas$());
    $.scene = t3;
    e = document.createElement("img", null);
    t1 = new Q.Texture2D("Texture2D", e, null, null);
    t1.Texture2D$1("../textures/checkerboard.png");
    $.checkerboard = t1;
    t1.LoadedCallback = V.LoadedCallback$closure();
    $.whiteMaterial = Q.Material$(Q.Shader_FromFile("../shaders/white.glsl"));
    t1 = Q.Material$(Q.Shader_FromFile("../shaders/colored.glsl"));
    $.blueMaterial = t1;
    t1.SetVector$2("uMainColor", $.get$Color_Blue());
    t1 = Q.Material$(Q.Shader_FromFile("../shaders/colored.glsl"));
    $.greenMaterial = t1;
    t1.SetVector$2("uMainColor", $.get$Color_Green());
    $.checkerboardMaterial = Q.Material$(Q.Shader_FromFile("../shaders/textured.glsl"));
    V.LoadLevel1();
  }, "call$0", "main$closure", 0, 0, 0],
  LoadedCallback: [function(texture) {
    $.checkerboardMaterial.SetTexture$2("uMainTexture", texture);
  }, "call$1", "LoadedCallback$closure", 2, 0, 1],
  onPrevClicked: [function($event) {
    var t1 = $.currentLevel - 1;
    $.currentLevel = t1;
    if (t1 <= 0) {
      t1 = $.maxLevel;
      $.currentLevel = t1;
    }
    V.LoadLevel(t1);
  }, "call$1", "onPrevClicked$closure", 2, 0, 2],
  onPrevTouched: [function($event) {
    var t1 = $.currentLevel - 1;
    $.currentLevel = t1;
    if (t1 <= 0) {
      t1 = $.maxLevel;
      $.currentLevel = t1;
    }
    V.LoadLevel(t1);
  }, "call$1", "onPrevTouched$closure", 2, 0, 3],
  onNextClicked: [function($event) {
    var t1 = $.currentLevel + 1;
    $.currentLevel = t1;
    if (t1 > $.maxLevel) {
      $.currentLevel = 1;
      t1 = 1;
    }
    V.LoadLevel(t1);
  }, "call$1", "onNextClicked$closure", 2, 0, 2],
  onNextTouched: [function($event) {
    var t1 = $.currentLevel + 1;
    $.currentLevel = t1;
    if (t1 > $.maxLevel) {
      $.currentLevel = 1;
      t1 = 1;
    }
    V.LoadLevel(t1);
  }, "call$1", "onNextTouched$closure", 2, 0, 3],
  onFullscreenClicked: [function($event) {
    if (document.webkitFullscreenEnabled === true)
      if (document.webkitFullscreenElement == null)
        document.body.webkitRequestFullscreen();
      else
        document.webkitExitFullscreen();
    else {
      window;
      $.get$Console__safeConsole().toString;
      if (typeof console != "undefined")
        console.log("Fullscreen not supported!");
    }
  }, "call$1", "onFullscreenClicked$closure", 2, 0, 2],
  onFullscreenTouched: [function($event) {
    if (document.webkitFullscreenEnabled === true)
      if (document.webkitFullscreenElement == null)
        document.body.webkitRequestFullscreen();
      else
        document.webkitExitFullscreen();
    else {
      window;
      $.get$Console__safeConsole().toString;
      if (typeof console != "undefined")
        console.log("Fullscreen not supported!");
    }
  }, "call$1", "onFullscreenTouched$closure", 2, 0, 3],
  LoadLevel: function(index) {
    var camera, t1, t2, boxObject, ballObject, circle, ball, goalObject, circleCollider;
    switch (index) {
      case 1:
        V.LoadLevel1();
        break;
      case 2:
        document.querySelector("#hits").textContent = "0 hits";
        document.querySelector("#win").textContent = "";
        J.set$length$asx($.get$planets(), 0);
        $.scene.Clear$0();
        camera = Q.GameObject_CreateCamera();
        t1 = camera.transform;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(0, 0, -15);
        t1.set$position(t1, t2);
        camera.camera.backgroundColor = $.get$Color_SolidBlack();
        $.scene.AddGameObject$1(camera);
        boxObject = Q.GameObject_CreateQuad();
        t2 = new Float32Array(2);
        t2[0] = 0;
        t2[1] = 0;
        t1 = new Float32Array(2);
        t1[0] = 1;
        t1[1] = 1;
        boxObject.AddComponent$1(new Q.BoxCollider("BoxCollider", new T.Vector2(t2), new T.Vector2(t1), "Collider", null, 2, false, null, null, "Component", true, null, null));
        boxObject.renderer.material = $.blueMaterial;
        t1 = boxObject.transform;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(-3.5, 0, 0);
        t1.set$position(t1, t2);
        boxObject.AddComponent$1(new V.ApplyGravity("Component", true, null, null));
        $.scene.AddGameObject$1(boxObject);
        ballObject = Q.GameObject_CreateCircle(0.5, 35, 0, 6.283185307179586);
        ballObject.renderer.material = $.greenMaterial;
        t2 = ballObject.transform;
        t1 = new T.Vector3(new Float32Array(3));
        t1.setValues$3(-3, 2, 0);
        t2.set$position(t2, t1);
        circle = new Q.CircleCollider("CircleCollider", 1, "Collider", null, 2, false, null, null, "Component", true, null, null);
        circle.radius = 0.5;
        ballObject.AddComponent$1(circle);
        ball = new V.Ball(0, 50, false, false, null, null, null, null, [], "Component", true, null, null);
        ball.lineMaterial = $.whiteMaterial;
        ballObject.AddComponent$1(ball);
        ballObject.AddComponent$1(new V.ApplyGravity("Component", true, null, null));
        $.scene.AddGameObject$1(ballObject);
        t1 = $.blueMaterial;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(4, 3, 0);
        V.CreatePlanet(1, t1, t2);
        t2 = $.blueMaterial;
        t1 = new T.Vector3(new Float32Array(3));
        t1.setValues$3(4, -3, 0);
        V.CreatePlanet(1, t2, t1);
        goalObject = Q.GameObject_CreateCircle(0.5, 35, 0, 6.283185307179586);
        goalObject.renderer.material = $.checkerboardMaterial;
        t1 = goalObject.transform;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(6.5, 3, 0);
        t1.set$position(t1, t2);
        circleCollider = new Q.CircleCollider("CircleCollider", 1, "Collider", null, 2, false, null, null, "Component", true, null, null);
        circleCollider.radius = 0.5;
        circleCollider.bodyType = 0;
        circleCollider.isSensor = true;
        goalObject.AddComponent$1(circleCollider);
        $.scene.AddGameObject$1(goalObject);
        break;
      case 3:
        document.querySelector("#hits").textContent = "0 hits";
        document.querySelector("#win").textContent = "";
        J.set$length$asx($.get$planets(), 0);
        $.scene.Clear$0();
        camera = Q.GameObject_CreateCamera();
        t1 = camera.transform;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(0, 0, -15);
        t1.set$position(t1, t2);
        camera.camera.backgroundColor = $.get$Color_SolidBlack();
        $.scene.AddGameObject$1(camera);
        boxObject = Q.GameObject_CreateQuad();
        t2 = new Float32Array(2);
        t2[0] = 0;
        t2[1] = 0;
        t1 = new Float32Array(2);
        t1[0] = 1;
        t1[1] = 1;
        boxObject.AddComponent$1(new Q.BoxCollider("BoxCollider", new T.Vector2(t2), new T.Vector2(t1), "Collider", null, 2, false, null, null, "Component", true, null, null));
        boxObject.renderer.material = $.blueMaterial;
        t1 = boxObject.transform;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(-3.5, 0, 0);
        t1.set$position(t1, t2);
        boxObject.AddComponent$1(new V.ApplyGravity("Component", true, null, null));
        $.scene.AddGameObject$1(boxObject);
        ballObject = Q.GameObject_CreateCircle(0.5, 35, 0, 6.283185307179586);
        ballObject.renderer.material = $.greenMaterial;
        t2 = ballObject.transform;
        t1 = new T.Vector3(new Float32Array(3));
        t1.setValues$3(-3, 2, 0);
        t2.set$position(t2, t1);
        circle = new Q.CircleCollider("CircleCollider", 1, "Collider", null, 2, false, null, null, "Component", true, null, null);
        circle.radius = 0.5;
        ballObject.AddComponent$1(circle);
        ball = new V.Ball(0, 50, false, false, null, null, null, null, [], "Component", true, null, null);
        ball.lineMaterial = $.whiteMaterial;
        ballObject.AddComponent$1(ball);
        ballObject.AddComponent$1(new V.ApplyGravity("Component", true, null, null));
        $.scene.AddGameObject$1(ballObject);
        t1 = $.blueMaterial;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(4, 3, 0);
        V.CreatePlanet(1, t1, t2);
        t2 = $.blueMaterial;
        t1 = new T.Vector3(new Float32Array(3));
        t1.setValues$3(-4, -3, 0);
        V.CreatePlanet(1, t2, t1);
        t1 = $.blueMaterial;
        t2 = new T.Vector3(new Float32Array(3));
        t2.setValues$3(0, 0, 0);
        V.CreatePlanet(2, t1, t2);
        goalObject = Q.GameObject_CreateCircle(0.5, 35, 0, 6.283185307179586);
        goalObject.renderer.material = $.checkerboardMaterial;
        t2 = goalObject.transform;
        t1 = new T.Vector3(new Float32Array(3));
        t1.setValues$3(6.5, 3, 0);
        t2.set$position(t2, t1);
        circleCollider = new Q.CircleCollider("CircleCollider", 1, "Collider", null, 2, false, null, null, "Component", true, null, null);
        circleCollider.radius = 0.5;
        circleCollider.bodyType = 0;
        circleCollider.isSensor = true;
        goalObject.AddComponent$1(circleCollider);
        $.scene.AddGameObject$1(goalObject);
        break;
      default:
    }
  },
  CreatePlanet: function(radius, material, position) {
    var planetObject, t1, circleCollider, planet;
    planetObject = Q.GameObject_CreateCircle(radius, 40, 0, 6.283185307179586);
    planetObject.renderer.material = material;
    t1 = planetObject.transform;
    t1.set$position(t1, position);
    circleCollider = new Q.CircleCollider("CircleCollider", 1, "Collider", null, 2, false, null, null, "Component", true, null, null);
    circleCollider.radius = radius;
    circleCollider.bodyType = 0;
    planetObject.AddComponent$1(circleCollider);
    planet = new V.Planet(9.8, "Component", true, null, null);
    planet.surfaceGravity = 9.8 * radius;
    planetObject.AddComponent$1(planet);
    $.get$planets().push(planet);
    $.scene.AddGameObject$1(planetObject);
    return planetObject;
  },
  LoadLevel1: function() {
    var camera, t1, t2, boxObject, ballObject, circle, ball, goalObject, circleCollider;
    document.querySelector("#hits").textContent = "0 hits";
    document.querySelector("#win").textContent = "";
    J.set$length$asx($.get$planets(), 0);
    $.scene.Clear$0();
    camera = Q.GameObject_CreateCamera();
    t1 = camera.transform;
    t2 = new T.Vector3(new Float32Array(3));
    t2.setValues$3(0, 0, -15);
    t1.set$position(t1, t2);
    camera.camera.backgroundColor = $.get$Color_SolidBlack();
    $.scene.AddGameObject$1(camera);
    boxObject = Q.GameObject_CreateQuad();
    t2 = new Float32Array(2);
    t2[0] = 0;
    t2[1] = 0;
    t1 = new Float32Array(2);
    t1[0] = 1;
    t1[1] = 1;
    boxObject.AddComponent$1(new Q.BoxCollider("BoxCollider", new T.Vector2(t2), new T.Vector2(t1), "Collider", null, 2, false, null, null, "Component", true, null, null));
    boxObject.renderer.material = $.blueMaterial;
    t1 = boxObject.transform;
    t2 = new T.Vector3(new Float32Array(3));
    t2.setValues$3(-3.5, 0, 0);
    t1.set$position(t1, t2);
    boxObject.AddComponent$1(new V.ApplyGravity("Component", true, null, null));
    $.scene.AddGameObject$1(boxObject);
    ballObject = Q.GameObject_CreateCircle(0.5, 35, 0, 6.283185307179586);
    ballObject.renderer.material = $.greenMaterial;
    t2 = ballObject.transform;
    t1 = new T.Vector3(new Float32Array(3));
    t1.setValues$3(-3, 2, 0);
    t2.set$position(t2, t1);
    circle = new Q.CircleCollider("CircleCollider", 1, "Collider", null, 2, false, null, null, "Component", true, null, null);
    circle.radius = 0.5;
    ballObject.AddComponent$1(circle);
    ball = new V.Ball(0, 50, false, false, null, null, null, null, [], "Component", true, null, null);
    ball.lineMaterial = $.whiteMaterial;
    ballObject.AddComponent$1(ball);
    ballObject.AddComponent$1(new V.ApplyGravity("Component", true, null, null));
    $.scene.AddGameObject$1(ballObject);
    t1 = $.blueMaterial;
    t2 = new T.Vector3(new Float32Array(3));
    t2.setValues$3(0, 0, 0);
    V.CreatePlanet(2, t1, t2);
    goalObject = Q.GameObject_CreateCircle(0.5, 35, 0, 6.283185307179586);
    goalObject.renderer.material = $.checkerboardMaterial;
    t2 = goalObject.transform;
    t1 = new T.Vector3(new Float32Array(3));
    t1.setValues$3(6.5, 3, 0);
    t2.set$position(t2, t1);
    circleCollider = new Q.CircleCollider("CircleCollider", 1, "Collider", null, 2, false, null, null, "Component", true, null, null);
    circleCollider.radius = 0.5;
    circleCollider.bodyType = 0;
    circleCollider.isSensor = true;
    goalObject.AddComponent$1(circleCollider);
    $.scene.AddGameObject$1(goalObject);
  },
  ApplyGravity: {
    "": "Component;name,enabled,gameObject,transform",
    Update$0: function() {
      var t1, planet, t2, t3, t4, t5, gravity, o, t6, t7;
      for (t1 = $.get$planets(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        planet = t1._current;
        t2 = this.transform.modelMatrix.storage;
        t3 = t2[12];
        t4 = t2[13];
        t2 = t2[14];
        t5 = new Float32Array(3);
        t5[0] = t3;
        t5[1] = t4;
        t5[2] = t2;
        gravity = planet.GetGravity$1(new T.Vector3(t5));
        o = this.gameObject.collider.body.mass;
        t5 = gravity.storage;
        t2 = t5[0];
        t5 = t5[1];
        t4 = new Float32Array(2);
        t4[0] = t2 * o;
        t4[1] = t5 * o;
        t5 = this.gameObject.collider.body;
        t2 = this.transform.modelMatrix.storage;
        t3 = t2[12];
        t6 = t2[13];
        t2 = t2[14];
        t7 = new Float32Array(3);
        t7[0] = t3;
        t7[1] = t6;
        t7[2] = t2;
        t2 = t7[0];
        t7 = t7[1];
        t6 = new Float32Array(2);
        t6[0] = t2;
        t6[1] = t7;
        t5.applyForce$2(new T.Vector2(t4), new T.Vector2(t6));
      }
    }
  },
  Ball: {
    "": "Component;hits,pixelSize,mouseDown,touched,_firstPoint,_lastPoint,forceLineRenderer,lineMaterial,_points,name,enabled,gameObject,transform",
    Awake$0: function() {
      var lineObject, meshRenderer, t1;
      lineObject = new Q.GameObject("GameObject", [], [], null, Q.Transform$(), null, null, null, null);
      lineObject.name = "Line";
      meshRenderer = new Q.MeshRenderer("MeshRenderer", null, "Renderer", null, "Component", true, null, null);
      meshRenderer.mesh = Q.Mesh_CreateLine(this._points, 0.1);
      lineObject.AddComponent$1(meshRenderer);
      this.forceLineRenderer = lineObject;
      t1 = lineObject.renderer;
      t1.material = this.lineMaterial;
      t1.enabled = false;
      $.scene.AddGameObject$1(lineObject);
    },
    Update$0: function() {
      var t1, t2, screenPosition, t3, t4, t5, renderer, force, touch;
      t1 = this.gameObject.scene.cameras;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0];
      t2 = this.transform;
      this._firstPoint = t1.ScreenToWorld$2(t1.WorldToScreen$1(t2.get$position(t2)), 0.99);
      if ($.get$Mouse__currentFrame().containsKey$1(0)) {
        t1 = $.get$Mouse__currentFrame();
        if (t1.$index(t1, 0) === true)
          if ($.get$Mouse__previousFrame().containsKey$1(0)) {
            t1 = $.get$Mouse__previousFrame();
            t1 = t1.$index(t1, 0) !== true;
          } else
            t1 = true;
        else
          t1 = false;
      } else
        t1 = false;
      if (t1) {
        t1 = this.gameObject.scene.cameras;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = t1[0];
        t2 = this.transform;
        screenPosition = t1.WorldToScreen$1(t2.get$position(t2));
        t1 = $.get$Mouse_mousePosition().storage;
        t2 = t1[0];
        t3 = screenPosition.storage;
        t4 = t3[0];
        t5 = this.pixelSize;
        if (t2 >= t4 - t5)
          if (t2 <= t4 + t5) {
            t1 = t1[1];
            t3 = t3[1];
            t1 = t1 >= t3 - t5 && t1 <= t3 + t5;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1) {
          this.mouseDown = true;
          this.forceLineRenderer.renderer.enabled = true;
        }
      }
      if (this.mouseDown) {
        renderer = H.interceptedTypeCast(this.forceLineRenderer.renderer, "$isMeshRenderer");
        t1 = this._points;
        C.JSArray_methods.set$length(t1, 0);
        t1.push(this._firstPoint);
        t2 = this.gameObject.scene.cameras;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t1.push(t2[0].ScreenToWorld$2($.get$Mouse_mousePosition(), 0.99));
        renderer.mesh = Q.Mesh_CreateLine(t1, 0.1);
        if ($.get$Mouse__currentFrame().containsKey$1(0)) {
          t1 = $.get$Mouse__currentFrame();
          if (t1.$index(t1, 0) !== true) {
            t1 = $.get$Mouse__previousFrame();
            t1 = t1.$index(t1, 0) === true;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1) {
          this.mouseDown = false;
          t1 = this.gameObject.scene.cameras;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0].ScreenToWorld$2($.get$Mouse_mousePosition(), 0.99);
          t1 = t1.$sub(t1, this._firstPoint).storage;
          t2 = t1[0];
          t1 = t1[1];
          t3 = new Float32Array(2);
          t4 = new T.Vector2(t3);
          t3[0] = t2;
          t3[1] = t1;
          force = t4.$mul(t4, 15);
          t4 = this.gameObject.collider.body;
          t1 = this.transform;
          t1 = t1.get$position(t1).storage;
          t3 = t1[0];
          t1 = t1[1];
          t2 = new Float32Array(2);
          t2[0] = t3;
          t2[1] = t1;
          t4.applyForce$2(force, new T.Vector2(t2));
          this.hits = this.hits + 1;
          document.querySelector("#hits").textContent = C.JSInt_methods.toString$0(this.hits) + " hits";
          this.forceLineRenderer.renderer.enabled = false;
        }
      }
      if (!this.touched && $.get$Touch__currentFrame().length > 0) {
        t1 = $.get$Touch__currentFrame();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        touch = t1[0];
        t1 = this.gameObject.scene.cameras;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = t1[0];
        t2 = this.transform;
        screenPosition = t1.WorldToScreen$1(t2.get$position(t2));
        t1 = J.getInterceptor$x(touch);
        t2 = screenPosition.storage;
        t3 = this.pixelSize;
        if (J.get$x$x(t1.get$position(touch)) >= t2[0] - t3 && J.get$x$x(t1.get$position(touch)) <= t2[0] + t3 && J.get$y$x(t1.get$position(touch)) >= t2[1] - t3 && J.get$y$x(t1.get$position(touch)) <= t2[1] + t3) {
          this.touched = true;
          this.forceLineRenderer.renderer.enabled = true;
        }
      }
      if (this.touched) {
        t1 = $.get$Touch__currentFrame();
        if (t1.length > 0) {
          touch = t1[0];
          t1 = this.gameObject.scene.cameras;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          this._lastPoint = t1[0].ScreenToWorld$2(J.get$position$x(touch), 0.99);
          renderer = H.interceptedTypeCast(this.forceLineRenderer.renderer, "$isMeshRenderer");
          t1 = this._points;
          C.JSArray_methods.set$length(t1, 0);
          t1.push(this._firstPoint);
          t1.push(this._lastPoint);
          renderer.mesh = Q.Mesh_CreateLine(t1, 0.1);
        } else {
          this.touched = false;
          t1 = this._lastPoint;
          t1 = t1.$sub(t1, this._firstPoint).storage;
          t2 = t1[0];
          t1 = t1[1];
          t3 = new Float32Array(2);
          t4 = new T.Vector2(t3);
          t3[0] = t2;
          t3[1] = t1;
          force = t4.$mul(t4, 15);
          t4 = this.gameObject.collider.body;
          t1 = this.transform;
          t1 = t1.get$position(t1).storage;
          t3 = t1[0];
          t1 = t1[1];
          t2 = new Float32Array(2);
          t2[0] = t3;
          t2[1] = t1;
          t4.applyForce$2(force, new T.Vector2(t2));
          this.hits = this.hits + 1;
          document.querySelector("#hits").textContent = C.JSInt_methods.toString$0(this.hits) + " hits";
          this.forceLineRenderer.renderer.enabled = false;
        }
      }
    },
    OnCollision$1: function(contact) {
      if (contact.fixtureA.get$isSensor() === true || contact.fixtureB.get$isSensor() === true)
        document.querySelector("#win").textContent = "You win!";
    }
  },
  Planet: {
    "": "Component;surfaceGravity,name,enabled,gameObject,transform",
    GetGravity$1: function(worldPosition) {
      var t1, direction, distance, t2, t3;
      t1 = this.transform;
      t1 = t1.get$position(t1);
      direction = t1.$sub(t1, worldPosition);
      distance = direction.get$length(direction);
      t1 = this.surfaceGravity;
      direction.normalize$0();
      t1 = direction.$mul(direction, t1 / distance).storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(2);
      t3[0] = t2;
      t3[1] = t1;
      return new T.Vector2(t3);
    }
  }
},
1],
["_foreign_helper", "dart:_foreign_helper", , H, {
  "": "",
  JS_CONST: {
    "": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null)
      return C.UnknownJavaScriptObject_methods;
    return interceptor;
  },
  Interceptor: {
    "": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    "%": "ArrayBuffer|Blob|DOMError|File|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedTransformList|SVGPointList|Screen|WebGLBuffer|WebGLProgram|WebGLShader|WebGLTexture"
  },
  JSBool: {
    "": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  JSArray: {
    "": "List/Interceptor;",
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $asList: null,
    $isList: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(new P.ArgumentError("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(new P.ArgumentError(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver * other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver > other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "": "int/JSNumber;",
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "": "double/JSNumber;",
    $isdouble: true,
    $isnum: true
  },
  JSString: {
    "": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      start = receiver.length;
      t1 = pattern.length;
      if (typeof start !== "number")
        return start.$add();
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  startRootIsolate: function(entry) {
    var t1, t2, rootContext;
    t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t1._Manager$1(entry);
    init.globalState = t1;
    if (init.globalState.isWorker === true)
      return;
    t1 = init.globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    rootContext = new H._IsolateContext(t2, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl), P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt), new Isolate());
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t1 = H.getDynamicRuntimeType();
    t2 = H.buildFunctionType(t1, [t1])._isTest$1(entry);
    if (t2)
      rootContext.eval$1(new H.startRootIsolate_closure(entry));
    else {
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(entry);
      if (t1)
        rootContext.eval$1(new H.startRootIsolate_closure0(entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptD8();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    return;
  },
  IsolateNatives_computeThisScriptD8: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, t2, context, uri, t3, t4, t5, worker, t6, workerId;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState;
        t2 = t1.nextIsolateId;
        t1.nextIsolateId = t2 + 1;
        context = new H._IsolateContext(t2, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl), P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt), new Isolate());
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage(worker, e); };
        t6 = init.globalState;
        workerId = t6.nextManagerId;
        t6.nextManagerId = workerId + 1;
        t6 = $.get$IsolateNatives_workerIds();
        t6.$indexSet(t6, worker, workerId);
        t6 = init.globalState.managers;
        t6.$indexSet(t6, workerId, worker);
        worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "functionName", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        t1 = init.globalState.managers;
        t2 = $.get$IsolateNatives_workerIds();
        t1.remove$1(t1, t2.$index(t2, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
      default:
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "": "Closure:13;entry_0",
    call$0: function() {
      this.entry_0.call$1([]);
    }
  },
  startRootIsolate_closure0: {
    "": "Closure:13;entry_1",
    call$0: function() {
      this.entry_1.call$2([], null);
    }
  },
  _Manager: {
    "": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }
  },
  _IsolateContext: {
    "": "Object;id,ports,weakPorts,isolateStatics<",
    eval$1: function(code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    },
    lookup$1: function(portId) {
      var t1 = this.ports;
      return t1.$index(t1, portId);
    },
    register$2: function(_, portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(t1, portId, port);
      this._updateGlobalState$0();
    },
    _updateGlobalState$0: function() {
      var t1, t2;
      t1 = this.id;
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0) {
        t2 = init.globalState.isolates;
        t2.$indexSet(t2, t1, this);
      } else {
        t2 = init.globalState.isolates;
        t2.remove$1(t2, t1);
      }
    }
  },
  _EventLoop: {
    "": "Object;events,activeTimerCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "": "Closure:0;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "": "Object;isolate,fn,message",
    process$0: function() {
      this.isolate.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "": "Closure:13;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.entryPoint_0;
      t2 = this.args_1;
      t3 = this.message_2;
      t4 = init.globalState.currentContext.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t4);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t4);
      t4 = $.RawReceivePortImpl__nextFreeId;
      $.RawReceivePortImpl__nextFreeId = t4 + 1;
      t5 = new H.RawReceivePortImpl(t4, null, false);
      t6 = init.globalState.currentContext;
      t7 = t6.weakPorts;
      t7.add$1(t7, t4);
      t6.register$2(t6, t4, t5);
      t4 = new H.ReceivePortImpl(t5, null);
      t4.ReceivePortImpl$fromRawReceivePort$1(t5);
      $.controlPort = t4;
      J.send$1$x(this.replyTo_4, ["spawned", new H._NativeJsSendPort(t5, init.globalState.currentContext.id)]);
      if (this.isSpawnUri_3 !== true)
        t1.call$1(t3);
      else {
        t4 = H.getDynamicRuntimeType();
        t5 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t1);
        if (t5)
          t1.call$2(t2, t3);
        else {
          t3 = H.buildFunctionType(t4, [t4])._isTest$1(t1);
          if (t3)
            t1.call$1(t2);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "": "Object;",
    $isSendPort: true
  },
  _NativeJsSendPort: {
    "": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, t3, isolate, shouldSerialize;
      t1 = {};
      t2 = init.globalState.isolates;
      t3 = this._isolateId;
      isolate = t2.$index(t2, t3);
      if (isolate == null)
        return;
      if (this._receivePort.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t3;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true
  },
  _NativeJsSendPort_send_closure: {
    "": "Closure:13;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }
  },
  _WorkerSendPort: {
    "": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, t1, manager;
      workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", this, "msg", message], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        t1 = init.globalState.managers;
        manager = t1.$index(t1, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true
  },
  RawReceivePortImpl: {
    "": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = t1.ports;
      t2.remove$1(t2, this._id);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    close$0: [function(_) {
      var t1 = this._rawPort;
      t1.close$0(t1);
      t1 = this._controller;
      t1.close$0(t1);
    }, "call$0", "get$close", 0, 0, 0],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    }
  },
  _JsSerializer: {
    "": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsCopier: {
    "": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsDeserializer: {
    "": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        t1 = init.globalState.isolates;
        isolate = t1.$index(t1, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    }
  },
  _JsVisitedMap: {
    "": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
      return;
    }
  },
  _MessageTraverser: {
    "": "Object;",
    traverse$1: function(x) {
      var result, t1;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      t1 = this._visited;
      t1.reset$0(t1);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
        return this.visitList$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isMap)
        return this.visitMap$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isSendPort)
        return this.visitSendPort$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var t1, copy, len, i;
      t1 = this._visited;
      copy = t1.$index(t1, list);
      if (copy != null)
        return copy;
      len = J.get$length$asx(list);
      copy = Array(len);
      copy.fixed$length = init;
      t1 = this._visited;
      t1.$indexSet(t1, list, copy);
      for (i = 0; i < len; ++i) {
        if (i >= list.length)
          return H.ioore(list, i);
        copy[i] = this._dispatch$1(list[i]);
      }
      return copy;
    },
    visitMap$1: function(map) {
      var t1, t2, copy;
      t1 = {};
      t2 = this._visited;
      copy = t2.$index(t2, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      t2 = this._visited;
      t2.$indexSet(t2, map, copy);
      map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "": "Closure:14;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var t1, copyId, id;
      t1 = this._visited;
      copyId = t1.$index(t1, list);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      t1 = this._visited;
      t1.$indexSet(t1, list, id);
      return ["list", id, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var t1, copyId, id, keys;
      t1 = this._visited;
      copyId = t1.$index(t1, map);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      t1 = this._visited;
      t1.$indexSet(t1, map, id);
      t1 = map.get$keys();
      keys = this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
      t1 = map.get$values(map);
      return ["map", id, keys, this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)))];
    },
    _serializeList$1: function(list) {
      var len, result, i, t1;
      len = J.get$length$asx(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        if (i >= list.length)
          return H.ioore(list, i);
        t1 = this._dispatch$1(list[i]);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          t1 = this._deserialized;
          return t1.$index(t1, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      t1 = this._deserialized;
      t1.$indexSet(t1, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, t2, keys, values, len, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      t2 = this._deserialized;
      t2.$indexSet(t2, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          t2 = init.globalState.topEventLoop;
          t2.activeTimerCount = t2.activeTimerCount + 1;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "": "Closure:0;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "": "Closure:0;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      var t1 = init.globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      this.callback_3.call$0();
    }
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "": "",
  isJsIndexable: function(object, record) {
    var result, t1;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    t1 = J.getInterceptor(object);
    return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(new P.ArgumentError(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(new P.ArgumentError(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(new P.ArgumentError(i));
      if (i < 0)
        throw H.wrapException(new P.ArgumentError(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    throw wrapper;
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
          default:
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo($function, isIntercepted);
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = $function;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (arity) {
      case 0:
        return function(F,S){return function(){return F.call(S(this))}}($function,getSelf);
      case 1:
        return function(F,S){return function(a){return F.call(S(this),a)}}($function,getSelf);
      case 2:
        return function(F,S){return function(a,b){return F.call(S(this),a,b)}}($function,getSelf);
      case 3:
        return function(F,S){return function(a,b,c){return F.call(S(this),a,b,c)}}($function,getSelf);
      case 4:
        return function(F,S){return function(a,b,c,d){return F.call(S(this),a,b,c,d)}}($function,getSelf);
      case 5:
        return function(F,S){return function(a,b,c,d,e){return F.call(S(this),a,b,c,d,e)}}($function,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  },
  Closure_forwardCallTo: function($function, isIntercepted) {
    var arity, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo($function);
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardCall(arity, $function);
    else if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return F.call(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function("F", t1 + H.S(t2) + "}")($function);
    } else if (1 <= arity && arity < 27) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return F.call(this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "," + $arguments + ");";
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      return new Function("F", t2 + H.S(t1) + "}")($function);
    } else
      return H.Closure_cspForwardCall(arity, $function);
  },
  Closure_cspForwardInterceptedCall: function(arity, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n,s,r){return function(){return s(this)[n](r(this))}}($name,getSelf,getReceiver);
      case 2:
        return function(n,s,r){return function(a){return s(this)[n](r(this),a)}}($name,getSelf,getReceiver);
      case 3:
        return function(n,s,r){return function(a,b){return s(this)[n](r(this),a,b)}}($name,getSelf,getReceiver);
      case 4:
        return function(n,s,r){return function(a,b,c){return s(this)[n](r(this),a,b,c)}}($name,getSelf,getReceiver);
      case 5:
        return function(n,s,r){return function(a,b,c,d){return s(this)[n](r(this),a,b,c,d)}}($name,getSelf,getReceiver);
      case 6:
        return function(n,s,r){return function(a,b,c,d,e){return s(this)[n](r(this),a,b,c,d,e)}}($name,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function($function) {
    var stubName, arity, t1, t2, $arguments;
    stubName = $function.$stubName;
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
    else if (arity === 1) {
      t1 = "return this." + H.S(H.BoundClosure_selfFieldName()) + "." + stubName + "(this." + H.S(H.BoundClosure_receiverFieldName()) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2));
    } else if (1 < arity && arity < 28) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + stubName + "(this." + H.S(H.BoundClosure_receiverFieldName()) + "," + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    } else
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var result, $length, i, t1, nativeRegexp;
    if (typeof from === "string")
      if (from === "")
        if (receiver === "")
          return to;
        else {
          result = P.StringBuffer$("");
          $length = receiver.length;
          result.write$1(to);
          for (i = 0; i < $length; ++i) {
            t1 = receiver[i];
            t1 = result._contents + t1;
            result._contents = t1;
            result._contents = t1 + to;
          }
          return result._contents;
        }
      else
        return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
    else {
      t1 = J.getInterceptor(from);
      if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp) {
        nativeRegexp = from.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, to.replace("$", "$$$$"));
      } else {
        if (from == null)
          H.throwExpression(new P.ArgumentError(null));
        throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
      }
    }
  },
  ReflectionInfo: {
    "": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType",
    static: {"": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
      }}
  },
  TypeErrorDecoder: {
    "": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver<",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }}
  },
  NullError: {
    "": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "": "Error;_message,_method,_receiver<",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "": "Closure:15;ex_0",
    call$1: function(error) {
      var t1 = J.getInterceptor(error);
      if (typeof error === "object" && error !== null && !!t1.$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "": "Closure:13;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "": "Closure:13;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "": "Closure:13;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "": "Closure:13;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "": "Closure:13;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "": "Closure;"
  },
  BoundClosure: {
    "": "TearOffClosure;_self<,__js_helper$_target,_receiver<,__js_helper$_name",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    $isBoundClosure: true,
    static: {"": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure.get$_self();
      }, BoundClosure_receiverOf: function(closure) {
        return closure.get$_receiver();
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_receiverFieldName: function() {
        var t1 = $.BoundClosure_receiverFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("receiver");
          $.BoundClosure_receiverFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "": "Object;"
  },
  RuntimeFunctionType: {
    "": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = { "func": "dynafunc" };
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isVoidRuntimeType)
        result.void = true;
      else if (typeof t1 !== "object" || t1 === null || !t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "": "Closure:15;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "": "Closure:16;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "": "Closure:17;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  },
  JSSyntaxRegExp: {
    "": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    $isJSSyntaxRegExp: true,
    static: {JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
      }}
  },
  _MatchImplementation: {
    "": "Object;pattern,_match",
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterator: {
    "": "Object;_regExp,_string,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, index;
      if (this._string == null)
        return false;
      t1 = this.__js_helper$_current;
      if (t1 != null) {
        t1 = t1._match;
        t2 = t1.index;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = J.get$length$asx(t1[0]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        index = t2 + t1;
        if (this.__js_helper$_current._match.index === index)
          ++index;
      } else
        index = 0;
      t1 = this._regExp._execGlobal$2(this._string, index);
      this.__js_helper$_current = t1;
      if (t1 == null) {
        this._string = null;
        return false;
      }
      return true;
    }
  }
}],
["box2d", "package:box2d/box2d.dart", , V, {
  "": "",
  MathBox_distanceSquared: function(v1, v2) {
    var t1, t2, dx, dy;
    t1 = v1.storage;
    t2 = v2.storage;
    dx = t1[0] - t2[0];
    dy = t1[1] - t2[1];
    return dx * dx + dy * dy;
  },
  Vector2_crossVectorAndNumToOut: function(a, s, out) {
    var t1, t2, t3;
    t1 = a.storage;
    t2 = t1[0];
    t3 = out.storage;
    t3[0] = s * t1[1];
    t3[1] = -s * t2;
  },
  ContactFilter: {
    "": "Object;",
    shouldCollide$2: function(fixtureA, fixtureB) {
      var filterA, filterB, t1;
      filterA = fixtureA.get$filter();
      filterB = fixtureB.get$filter();
      t1 = filterA.groupIndex;
      if (t1 !== 0 && t1 === filterB.groupIndex)
        return t1 > 0;
      return (filterA.maskBits & filterB.categoryBits) !== 0 && (filterA.categoryBits & filterB.maskBits) !== 0;
    }
  },
  ContactImpulse: {
    "": "Object;normalImpulses,tangentImpulses"
  },
  AxisAlignedBox: {
    "": "Object;lowerBound,upperBound",
    setFromCombination$2: function(boxOne, boxTwo) {
      var t1, t2;
      t1 = this.lowerBound;
      t2 = P.min(boxOne.lowerBound.storage[0], boxTwo.lowerBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.lowerBound;
      t1 = P.min(boxOne.lowerBound.storage[1], boxTwo.lowerBound.storage[1]);
      t2.storage[1] = t1;
      t1 = this.upperBound;
      t2 = P.max(boxOne.upperBound.storage[0], boxTwo.upperBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.upperBound;
      t1 = P.max(boxOne.upperBound.storage[1], boxTwo.upperBound.storage[1]);
      t2.storage[1] = t1;
    },
    contains$1: function(_, aabb) {
      var t1, t2, t3;
      t1 = this.lowerBound.storage;
      t2 = t1[0];
      t3 = aabb.lowerBound.storage;
      if (t2 > t3[0])
        if (t1[1] > t3[1]) {
          t1 = this.upperBound.storage;
          t2 = t1[1];
          t3 = aabb.upperBound.storage;
          t1 = t2 < t3[1] && t1[0] < t3[0];
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    toString$0: function(_) {
      return H.S(this.lowerBound) + ", " + H.S(this.upperBound);
    },
    AxisAlignedBox$2: function(lowerBound, upperBound) {
      if (this.lowerBound == null)
        this.lowerBound = new T.Vector2(new Float32Array(2));
      if (this.upperBound == null)
        this.upperBound = new T.Vector2(new Float32Array(2));
    },
    static: {AxisAlignedBox$: function(lowerBound, upperBound) {
        var t1 = new V.AxisAlignedBox(lowerBound, upperBound);
        t1.AxisAlignedBox$2(lowerBound, upperBound);
        return t1;
      }, AxisAlignedBox_testOverlap: function(a, b) {
        var t1, t2, t3;
        t1 = b.lowerBound.storage;
        t2 = t1[0];
        t3 = a.upperBound.storage;
        if (!(t2 > t3[0] || t1[1] > t3[1])) {
          t1 = a.lowerBound.storage;
          t2 = t1[0];
          t3 = b.upperBound.storage;
          t1 = t2 > t3[0] || t1[1] > t3[1];
        } else
          t1 = true;
        return !t1;
      }}
  },
  BroadPhase: {
    "": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
    updatePairs$1: function(callback) {
      var t1, i, t2, t3, pairBuffer, primaryPair, pair, t4, t5;
      this._pairCount = 0;
      for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
        t2 = t2[i];
        this.queryProxy = t2;
        if (t2 == null)
          continue;
        t1._query$4(this, t2.box, t1._root, 1);
      }
      this.moveBuffer = H.setRuntimeTypeInfo([], [V.DynamicTreeNode]);
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      t2.toString;
      H.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
      pairBuffer = P.List_List$from(H.SubListIterable$(t2, 0, t3, null), true, null);
      H.Sort__doSort(pairBuffer, 0, pairBuffer.length - 1, new V.BroadPhase_updatePairs_closure());
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      t2.toString;
      if (typeof t2 !== "object" || t2 === null || !!t2.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
      for (i = 0; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i < 0 || i >= t2.length)
          return H.ioore(t2, i);
        primaryPair = t2[i];
        callback.call$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
        ++i;
        for (t2 = this._pairCount, t3 = this._pairBuffer; i < t2;) {
          if (i >= t3.length)
            return H.ioore(t3, i);
          pair = t3[i];
          t4 = pair.get$proxyA();
          t5 = primaryPair.get$proxyA();
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = pair.get$proxyB();
            t5 = primaryPair.get$proxyB();
            t5 = t4 == null ? t5 != null : t4 !== t5;
            t4 = t5;
          } else
            t4 = true;
          if (t4)
            break;
          ++i;
        }
      }
      t1.rebalance$1(4);
    },
    treeCallback$1: function(proxy) {
      var t1, t2, oldBuffer, i, i0, t3, t4, t5;
      if (proxy === this.queryProxy)
        return true;
      t1 = this._pairCount;
      t2 = this._pairCapacity;
      if (t1 === t2) {
        oldBuffer = this._pairBuffer;
        if (typeof t2 !== "number")
          return t2.$mul();
        t1 = t2 * 2;
        this._pairCapacity = t1;
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Pair]);
        this._pairBuffer = t1;
        for (i = oldBuffer.length, i0 = 0; i0 < i; ++i0) {
          t2 = oldBuffer[i0];
          if (i0 >= t1.length)
            return H.ioore(t1, i0);
          t1[i0] = t2;
        }
        t2 = this._pairCapacity;
        if (typeof t2 !== "number")
          return H.iae(t2);
        for (; i < t2; ++i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = new V.Pair(null, null);
        }
      }
      t1 = proxy.key;
      t2 = this.queryProxy;
      t3 = t2.key;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this._pairBuffer;
      t5 = this._pairCount;
      if (t1 < t3) {
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t4[t5].set$proxyA(proxy);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(this.queryProxy);
      } else {
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t4[t5].set$proxyA(t2);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(proxy);
      }
      this._pairCount = this._pairCount + 1;
      return true;
    },
    BroadPhase$0: function() {
      var t1, t2, i;
      this.moveBuffer = H.setRuntimeTypeInfo([], [V.DynamicTreeNode]);
      t1 = this._pairCapacity;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = Array(t1);
      t1.fixed$length = init;
      t1 = H.setRuntimeTypeInfo(t1, [V.Pair]);
      this._pairBuffer = t1;
      t2 = this._pairCapacity;
      if (typeof t2 !== "number")
        return H.iae(t2);
      i = 0;
      for (; i < t2; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new V.Pair(null, null);
      }
    },
    static: {"": "BroadPhase_NULL_PROXY,BroadPhase_PAIR_CAPACITY", BroadPhase$: function() {
        var t1 = new V.BroadPhase(V.DynamicTree$(), 0, null, null, 16, 0, null);
        t1.BroadPhase$0();
        return t1;
      }}
  },
  BroadPhase_updatePairs_closure: {
    "": "Closure:14;",
    call$2: function(a, b) {
      return J.compareTo$1$ns(a, b);
    }
  },
  DynamicTree: {
    "": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center,deltaOne,deltaTwo",
    createProxy$2: function(box, userData) {
      var proxy, t1, t2, t3, t4, iterationCount, height, tryCount;
      proxy = this._allocateNode$0();
      t1 = proxy.box;
      t2 = t1.lowerBound;
      t3 = box.lowerBound.storage;
      t4 = t3[0];
      t2 = t2.storage;
      t2[0] = t4 - 0.1;
      t2[1] = t3[1] - 0.1;
      t1 = t1.upperBound;
      t3 = box.upperBound.storage;
      t2 = t3[0];
      t1 = t1.storage;
      t1[0] = t2 + 0.1;
      t1[1] = t3[1] + 0.1;
      proxy.userData = userData;
      this._insertLeaf$1(proxy);
      iterationCount = C.JSInt_methods._shrOtherPositive$1(this._nodeCount, 4);
      height = this._computeHeight$1(this._root);
      tryCount = 0;
      while (true) {
        if (!(height > 64 && tryCount < 10))
          break;
        this.rebalance$1(iterationCount);
        height = this._computeHeight$1(this._root);
        ++tryCount;
      }
      return proxy;
    },
    moveProxy$3: function(argProxy, argBox, displacement) {
      var t1, t2, t3, t4;
      t1 = argProxy.box;
      if (t1.contains$1(t1, argBox))
        return false;
      this._removeLeaf$1(argProxy);
      t2 = argBox.lowerBound.storage;
      t2[0] = t2[0] - 0.1;
      t2[1] = t2[1] - 0.1;
      t2 = argBox.upperBound.storage;
      t2[0] = t2[0] + 0.1;
      t2[1] = t2[1] + 0.1;
      t2 = this._tempVector;
      t2.setFrom$1(displacement);
      t2.scale$1(t2, 2);
      t2 = t2.storage;
      t3 = t2[0];
      if (t3 < 0) {
        t4 = argBox.lowerBound.storage;
        t4[0] = t4[0] + t3;
      } else {
        t4 = argBox.upperBound.storage;
        t4[0] = t4[0] + t3;
      }
      t2 = t2[1];
      if (t2 < 0) {
        t3 = argBox.lowerBound.storage;
        t3[1] = t3[1] + t2;
      } else {
        t3 = argBox.upperBound.storage;
        t3[1] = t3[1] + t2;
      }
      t1.lowerBound.setFrom$1(argBox.lowerBound);
      t1.upperBound.setFrom$1(argBox.upperBound);
      this._insertLeaf$1(argProxy);
      return true;
    },
    _allocateNode$0: function() {
      var t1, i, t2, node;
      t1 = this._nodeStack;
      if (t1._head === t1._tail)
        for (i = 0; i < 6; ++i) {
          t2 = new V.AxisAlignedBox(null, null);
          t2.lowerBound = new T.Vector2(new Float32Array(2));
          t2.upperBound = new T.Vector2(new Float32Array(2));
          t1.addFirst$1(new V.DynamicTreeNode(t2, null, null, null, null, null, null));
        }
      node = t1.removeFirst$0();
      J.set$parent$x(node, null);
      node.childOne = null;
      node.childTwo = null;
      node.userData = null;
      t1 = this._nodeCounter;
      node.key = t1;
      this._nodeCounter = t1 + 1;
      this._nodeCount = this._nodeCount + 1;
      return node;
    },
    _query$4: function(callback, argBox, node, count) {
      var t1;
      if (node == null)
        return true;
      if (V.AxisAlignedBox_testOverlap(argBox, node.box)) {
        t1 = node.childOne;
        if (t1 == null) {
          if (!callback.treeCallback$1(node))
            return false;
        } else {
          if (count < 64) {
            ++count;
            if (!this._query$4(callback, argBox, t1, count))
              return false;
          }
          if (count < 64)
            if (!this._query$4(callback, argBox, node.childTwo, count + 1))
              return false;
        }
      }
      return true;
    },
    _insertLeaf$1: function(node) {
      var t1, t2, t3, t4, c, sibling, t5, t6, childOne, childTwo, t7, t8, t9, node1, node2, node10;
      this._insertionCount = this._insertionCount + 1;
      if (this._root == null) {
        this._root = node;
        node.parent = null;
        return;
      }
      t1 = this.center;
      t2 = node.box;
      t3 = t2.lowerBound;
      t4 = new Float32Array(2);
      c = new T.Vector2(t4);
      t3 = t3.storage;
      t4[1] = t3[1];
      t4[0] = t3[0];
      c.add$1(c, t2.upperBound);
      t4[1] = t4[1] * 0.5;
      t4[0] = t4[0] * 0.5;
      t3 = t1.storage;
      t3[1] = t4[1];
      t3[0] = t4[0];
      sibling = this._root;
      if (sibling.childOne != null) {
        t3 = this.deltaOne;
        t4 = t3.storage;
        t5 = this.deltaTwo;
        t6 = t5.storage;
        do {
          childOne = sibling.childOne;
          childTwo = sibling.childTwo;
          t7 = childOne.box;
          t8 = t7.lowerBound;
          t9 = new Float32Array(2);
          c = new T.Vector2(t9);
          t8 = t8.storage;
          t9[1] = t8[1];
          t9[0] = t8[0];
          c.add$1(c, t7.upperBound);
          t9[1] = t9[1] * 0.5;
          t9[0] = t9[0] * 0.5;
          t4[1] = t9[1];
          t4[0] = t9[0];
          t9 = childTwo.box;
          t7 = t9.lowerBound;
          t8 = new Float32Array(2);
          c = new T.Vector2(t8);
          t7 = t7.storage;
          t8[1] = t7[1];
          t8[0] = t7[0];
          c.add$1(c, t9.upperBound);
          t8[1] = t8[1] * 0.5;
          t8[0] = t8[0] * 0.5;
          t6[1] = t8[1];
          t6[0] = t8[0];
          t8 = t3.sub$1(t1).storage;
          t8[1] = Math.abs(t8[1]);
          t8[0] = Math.abs(t8[0]);
          t8 = t5.sub$1(t1).storage;
          t8[1] = Math.abs(t8[1]);
          t8[0] = Math.abs(t8[0]);
          sibling = t4[0] + t4[1] < t6[0] + t6[1] ? childOne : childTwo;
        } while (sibling.childOne != null);
      }
      node1 = sibling.parent;
      node2 = this._allocateNode$0();
      node2.parent = node1;
      node2.userData = null;
      node2.box.setFromCombination$2(t2, sibling.box);
      if (node1 != null) {
        t1 = sibling.parent.childOne;
        if (t1 == null ? sibling == null : t1 === sibling)
          node1.childOne = node2;
        else
          node1.childTwo = node2;
        node2.childOne = sibling;
        node2.childTwo = node;
        sibling.parent = node2;
        node.parent = node2;
        do {
          t1 = node1.box;
          if (t1.contains$1(t1, node2.box))
            break;
          t1.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
          node10 = node1.parent;
          if (node10 != null) {
            node2 = node1;
            node1 = node10;
            continue;
          } else
            break;
        } while (true);
      } else {
        node2.childOne = sibling;
        node2.childTwo = node;
        sibling.parent = node2;
        node.parent = node2;
        this._root = node2;
      }
    },
    _removeLeaf$1: function(argNode) {
      var t1, node2, node1, sibling, t2, t3, t4;
      t1 = this._root;
      if (argNode == null ? t1 == null : argNode === t1) {
        this._root = null;
        t1 = this._lastLeaf;
        if (t1 == null ? argNode == null : t1 === argNode)
          this._lastLeaf = null;
        return;
      }
      node2 = argNode.parent;
      node1 = node2.parent;
      sibling = node2.childOne;
      if (sibling == null ? argNode == null : sibling === argNode)
        sibling = node2.childTwo;
      if (node1 != null) {
        t1 = node1.childOne;
        if (t1 == null ? node2 == null : t1 === node2)
          node1.childOne = sibling;
        else
          node1.childTwo = sibling;
        sibling.parent = node1;
        this._nodeStack.addFirst$1(node2);
        this._nodeCount = this._nodeCount - 1;
        for (t1 = this._tempBox; node1 != null;) {
          t2 = node1.box;
          t3 = t1.lowerBound;
          t4 = t2.lowerBound;
          t3 = t3.storage;
          t4 = t4.storage;
          t3[1] = t4[1];
          t3[0] = t4[0];
          t4 = t1.upperBound;
          t3 = t2.upperBound;
          t4 = t4.storage;
          t3 = t3.storage;
          t4[1] = t3[1];
          t4[0] = t3[0];
          t2.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
          if (t1.contains$1(t1, t2))
            break;
          node1 = node1.parent;
        }
      } else {
        this._root = sibling;
        sibling.parent = null;
        this._nodeStack.addFirst$1(node2);
        this._nodeCount = this._nodeCount - 1;
      }
      t1 = this._lastLeaf;
      if (t1 == null ? argNode == null : t1 === argNode)
        this._lastLeaf = this._root;
    },
    _computeHeight$1: function(node) {
      if (node == null)
        return 0;
      return 1 + P.max(this._computeHeight$1(node.childOne), this._computeHeight$1(node.childTwo));
    },
    rebalance$1: function(iterations) {
      var i, current, t1, bit, current0;
      if (this._root == null)
        return;
      for (i = 0; i < iterations; ++i) {
        current = this._root;
        for (t1 = this._path, bit = 0; current0 = current.childOne, current0 != null;) {
          current = (C.JSInt_methods._shrBothPositive$1(t1, bit) & 1) === 0 ? current0 : current.childTwo;
          bit = bit + 1 & 31;
        }
        this._path = t1 + 1;
        this._removeLeaf$1(current);
        this._insertLeaf$1(current);
      }
    },
    DynamicTree$0: function() {
      var t1, i;
      for (t1 = this._drawVectors, i = 0; i < 4; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {"": "DynamicTree_MAX_STACK_SIZE,DynamicTree__DEFAULT_NODE_ADDITION", DynamicTree$: function() {
        var t1, t2, t3, t4, t5;
        t1 = H.setRuntimeTypeInfo(Array(4), [T.Vector2]);
        t2 = new Float32Array(2);
        t3 = V.AxisAlignedBox$(null, null);
        t4 = V.DynamicTreeNode;
        t5 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t4]);
        t5.ListQueue$1(null, t4);
        t3 = new V.DynamicTree(null, 0, null, 0, 0, t5, t1, 0, new T.Vector2(t2), t3, new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)));
        t3.DynamicTree$0();
        return t3;
      }}
  },
  DynamicTreeNode: {
    "": "Object;box,parent',next,childOne,childTwo,userData<,key>",
    toString$0: function(_) {
      var t1 = this.box;
      return H.S(t1.lowerBound) + ", " + H.S(t1.upperBound);
    }
  },
  Pair: {
    "": "Object;proxyA@,proxyB@",
    compareTo$1: function(_, pair2) {
      var t1, t2;
      t1 = this.proxyA.key;
      t2 = pair2.get$proxyA();
      t2 = t2.get$key(t2);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2)
        return -1;
      if (t1 === t2) {
        t1 = this.proxyB.key;
        t2 = pair2.get$proxyB();
        t2 = t2.get$key(t2);
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2)
          t1 = -1;
        else
          t1 = t1 === t2 ? 0 : 1;
        return t1;
      }
      return 1;
    }
  },
  Collision: {
    "": "Object;_pool,cache,input,output,results1,results2,incidentEdge,localTangent,localNormal,planePoint,tangent,normal,normal1,v11,v12,clipPoints1,clipPoints2",
    collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
      var v, t1, t2, t3, t4, t5, t6, t7, t8, v1, t9, t10, t11, t12, t13, t14, t15, dx, dy, radius;
      manifold.pointCount = 0;
      v = circle1.get$position(circle1);
      t1 = xfA.position.storage;
      t2 = t1[1];
      t3 = xfA.rotation.storage;
      t4 = t3[1];
      t5 = v.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t1 = t1[0];
      t8 = t3[0];
      t3 = t3[2];
      v1 = circle2.get$position(circle2);
      t9 = xfB.position.storage;
      t10 = t9[1];
      t11 = xfB.rotation.storage;
      t12 = t11[1];
      t13 = v1.storage;
      t14 = t13[0];
      t15 = t11[3];
      t13 = t13[1];
      dx = t9[0] + t11[0] * t14 + t11[2] * t13 - (t1 + t8 * t6 + t3 * t5);
      dy = t10 + t12 * t14 + t15 * t13 - (t2 + t4 * t6 + t7 * t5);
      radius = circle1.radius + circle2.radius;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.type = 0;
      manifold.localPoint.setFrom$1(circle1.position);
      manifold.localNormal.setZero$0();
      manifold.pointCount = 1;
      t1 = manifold.points;
      t1[0].localPoint.setFrom$1(circle2.position);
      t1[0].id.features.zero$0();
    },
    collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
      var v, t1, t2, t3, t4, t5, t6, t7, t8, v1x, v1y, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, s, vertIndex2, v1, v2, mpoint, temp2X, temp4X, t9, t10, dx, dy, fcx, fcy, norm;
      manifold.pointCount = 0;
      v = circle.get$position(circle);
      t1 = xfB.position.storage;
      t2 = t1[1];
      t3 = xfB.rotation.storage;
      t4 = t3[1];
      t5 = v.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t8 = xfA.position.storage;
      v1x = t1[0] + t3[0] * t6 + t3[2] * t5 - t8[0];
      v1y = t2 + t4 * t6 + t7 * t5 - t8[1];
      t8 = xfA.rotation.storage;
      cLocaly = v1x * t8[2] + v1y * t8[3];
      cLocalx = v1x * t8[0] + v1y * t8[1];
      radius = polygon.radius + circle.radius;
      vertexCount = polygon.get$vertexCount();
      vertices = polygon.vertices;
      normals = polygon.normals;
      for (normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(vertices, i);
        vertex = vertices[i];
        t1 = J.getInterceptor$x(vertex);
        t2 = t1.get$x(vertex);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = t1.get$y(vertex);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = normals[i].storage;
        s = t3[0] * (cLocalx - t2) + t3[1] * (cLocaly - t1);
        if (s > radius)
          return;
        if (s > separation) {
          separation = s;
          normalIndex = i;
        }
      }
      vertIndex2 = normalIndex + 1;
      vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
      if (normalIndex < 0 || normalIndex >= 8)
        return H.ioore(vertices, normalIndex);
      v1 = vertices[normalIndex];
      if (vertIndex2 < 0 || vertIndex2 >= 8)
        return H.ioore(vertices, vertIndex2);
      v2 = vertices[vertIndex2];
      if (separation < 1.192e-7) {
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = normals[normalIndex].storage;
        t2 = manifold.localNormal.storage;
        t2[0] = t1[0];
        t2[1] = t1[1];
        t1 = J.getInterceptor$x(v1);
        t2 = J.getInterceptor$x(v2);
        t3 = manifold.localPoint.storage;
        t3[0] = J.$mul$n(J.$add$ns(t1.get$x(v1), t2.get$x(v2)), 0.5);
        t1 = t1.get$y(v1);
        t2 = t2.get$y(v2);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3[1] = (t1 + t2) * 0.5;
        mpoint = manifold.points[0];
        t2 = mpoint.localPoint;
        t1 = circle.position.storage;
        t2 = t2.storage;
        t2[0] = t1[0];
        t2[1] = t1[1];
        mpoint.id.features.zero$0();
        return;
      }
      t1 = J.getInterceptor$x(v1);
      t2 = t1.get$x(v1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = t1.get$y(v1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.getInterceptor$x(v2);
      temp2X = J.$sub$n(t4.get$x(v2), t1.get$x(v1));
      t5 = t4.get$y(v2);
      t6 = t1.get$y(v1);
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (typeof temp2X !== "number")
        return H.iae(temp2X);
      t7 = t4.get$x(v2);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t8 = t4.get$y(v2);
      if (typeof t8 !== "number")
        return H.iae(t8);
      temp4X = J.$sub$n(t1.get$x(v1), t4.get$x(v2));
      t9 = t1.get$y(v1);
      t10 = t4.get$y(v2);
      if (typeof t9 !== "number")
        return t9.$sub();
      if (typeof t10 !== "number")
        return H.iae(t10);
      if (typeof temp4X !== "number")
        return H.iae(temp4X);
      if ((cLocalx - t2) * temp2X + (cLocaly - t3) * (t5 - t6) <= 0) {
        t2 = t1.get$x(v1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        dx = cLocalx - t2;
        t2 = t1.get$y(v1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        dy = cLocaly - t2;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t2 = manifold.localNormal;
        t3 = t1.get$x(v1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = t2.storage;
        t4[0] = cLocalx - t3;
        t1 = t1.get$y(v1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4[1] = cLocaly - t1;
        t2.normalize$0();
        manifold.localPoint.setFrom$1(v1);
        t2 = manifold.points;
        t2[0].localPoint.setFrom$1(circle.position);
        t2[0].id.features.zero$0();
      } else if ((cLocalx - t7) * temp4X + (cLocaly - t8) * (t9 - t10) <= 0) {
        t1 = t4.get$x(v2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dx = cLocalx - t1;
        t1 = t4.get$y(v2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dy = cLocaly - t1;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = manifold.localNormal;
        t2 = t4.get$x(v2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = t1.storage;
        t3[0] = cLocalx - t2;
        t4 = t4.get$y(v2);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t3[1] = cLocaly - t4;
        t1.normalize$0();
        manifold.localPoint.setFrom$1(v2);
        t1 = manifold.points;
        t1[0].localPoint.setFrom$1(circle.position);
        t1[0].id.features.zero$0();
      } else {
        fcx = J.$mul$n(J.$add$ns(t1.get$x(v1), t4.get$x(v2)), 0.5);
        t1 = t1.get$y(v1);
        t4 = t4.get$y(v2);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        fcy = (t1 + t4) * 0.5;
        if (typeof fcx !== "number")
          return H.iae(fcx);
        norm = normals[normalIndex];
        t4 = norm.storage;
        if ((cLocalx - fcx) * t4[0] + (cLocaly - fcy) * t4[1] > radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        manifold.localNormal.setFrom$1(norm);
        t1 = manifold.localPoint.storage;
        t1[0] = fcx;
        t1[1] = fcy;
        t1 = manifold.points;
        t1[0].localPoint.setFrom$1(circle.position);
        t1[0].id.features.zero$0();
      }
    },
    edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
      var normals1, count2, vertices2, v, t1, t2, t3, t4, t5, normal1Worldy, normal1Worldx, normal1x, normal1y, index, minDot, i, a, dot, v3, t6, t7, t8, t9, t10, t11, v4, t12, t13, t14, t15, t16, t17, t18, t19, t20;
      normals1 = poly1.normals;
      count2 = poly2.vertexCount;
      vertices2 = poly2.vertices;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(normals1, edge1);
      v = normals1[edge1];
      t1 = xf1.rotation.storage;
      t2 = t1[1];
      t3 = v.storage;
      t4 = t3[0];
      t5 = t1[3];
      t3 = t3[1];
      normal1Worldy = t2 * t4 + t5 * t3;
      normal1Worldx = t1[0] * t4 + t1[2] * t3;
      t3 = xf2.rotation.storage;
      normal1x = normal1Worldx * t3[0] + normal1Worldy * t3[1];
      normal1y = normal1Worldx * t3[2] + normal1Worldy * t3[3];
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 8)
          return H.ioore(vertices2, i);
        a = vertices2[i];
        t2 = J.getInterceptor$x(a);
        t4 = J.$mul$n(t2.get$x(a), normal1x);
        t2 = t2.get$y(a);
        if (typeof t2 !== "number")
          return t2.$mul();
        dot = J.$add$ns(t4, t2 * normal1y);
        if (J.$lt$n(dot, minDot)) {
          minDot = dot;
          index = i;
        }
      }
      v3 = poly1.vertices[edge1];
      t2 = xf1.position.storage;
      t4 = t2[1];
      t5 = t1[1];
      t6 = J.getInterceptor$x(v3);
      t7 = t6.get$x(v3);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t8 = t1[3];
      t9 = t6.get$y(v3);
      if (typeof t9 !== "number")
        return H.iae(t9);
      t2 = t2[0];
      t10 = t1[0];
      t11 = t6.get$x(v3);
      if (typeof t11 !== "number")
        return H.iae(t11);
      t1 = t1[2];
      t6 = t6.get$y(v3);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (index < 0 || index >= 8)
        return H.ioore(vertices2, index);
      v4 = vertices2[index];
      t12 = xf2.position.storage;
      t13 = t12[1];
      t14 = t3[1];
      t15 = J.getInterceptor$x(v4);
      t16 = t15.get$x(v4);
      if (typeof t16 !== "number")
        return H.iae(t16);
      t17 = t3[3];
      t18 = t15.get$y(v4);
      if (typeof t18 !== "number")
        return H.iae(t18);
      t12 = t12[0];
      t19 = t3[0];
      t20 = t15.get$x(v4);
      if (typeof t20 !== "number")
        return H.iae(t20);
      t3 = t3[2];
      t15 = t15.get$y(v4);
      if (typeof t15 !== "number")
        return H.iae(t15);
      return (t12 + t19 * t20 + t3 * t15 - (t2 + t10 * t11 + t1 * t6)) * normal1Worldx + (t13 + t14 * t16 + t17 * t18 - (t4 + t5 * t7 + t8 * t9)) * normal1Worldy;
    },
    findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
      var count1, normals1, v, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
      count1 = poly1.get$vertexCount();
      normals1 = poly1.normals;
      v = poly2.get$centroid();
      t1 = xf2.position.storage;
      t2 = t1[1];
      t3 = xf2.rotation.storage;
      t4 = t3[1];
      t5 = v.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t1 = t1[0];
      t8 = t3[0];
      t3 = t3[2];
      t9 = xf1.position.storage;
      t10 = t9[1];
      t11 = xf1.rotation.storage;
      t12 = t11[1];
      t13 = poly1.centroid.storage;
      t14 = t13[0];
      t15 = t11[3];
      t13 = t13[1];
      t9 = t9[0];
      t16 = t11[0];
      t11 = t11[2];
      dx = t1 + t8 * t6 + t3 * t5 - (t9 + t16 * t14 + t11 * t13);
      dy = t2 + t4 * t6 + t7 * t5 - (t10 + t12 * t14 + t15 * t13);
      dLocal1x = dx * t16 + dy * t12;
      dLocal1y = dx * t11 + dy * t15;
      for (edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
        if (i >= 8)
          return H.ioore(normals1, i);
        t1 = normals1[i].storage;
        dot = t1[0] * dLocal1x + t1[1] * dLocal1y;
        if (dot > maxDot) {
          maxDot = dot;
          edge = i;
        }
      }
      s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
      prevEdge = edge - 1;
      prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
      sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
      nextEdge = edge + 1;
      nextEdge = nextEdge < count1 ? nextEdge : 0;
      sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
      if (sPrev > s && sPrev > sNext) {
        bestSeparation = sPrev;
        bestEdge = prevEdge;
        increment = -1;
      } else {
        if (sNext > s)
          ;
        else {
          results.edgeIndex = edge;
          results.separation = s;
          return;
        }
        bestSeparation = sNext;
        bestEdge = nextEdge;
        increment = 1;
      }
      for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
        if (t1) {
          edge0 = bestEdge - 1;
          edge0 = edge0 >= 0 ? edge0 : edge;
        } else {
          edge0 = bestEdge + 1;
          edge0 = edge0 < count1 ? edge0 : 0;
        }
        s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
        if (s > bestSeparation)
          ;
        else
          break;
      }
      results.edgeIndex = bestEdge;
      results.separation = bestSeparation;
    },
    findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
      var normals1, count2, vertices2, normals2, t1, index, minDot, i, dot, i2;
      poly1.get$vertexCount();
      normals1 = poly1.normals;
      count2 = poly2.get$vertexCount();
      vertices2 = poly2.vertices;
      normals2 = poly2.normals;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(normals1, edge1);
      t1 = this.normal1;
      xf1.rotation.transformed$2(normals1[edge1], t1);
      xf2.rotation.transposed$0().transformed$2(t1, t1);
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 8)
          return H.ioore(normals2, i);
        dot = t1.dot$1(normals2[i]);
        if (dot < minDot) {
          minDot = dot;
          index = i;
        }
      }
      i2 = index + 1;
      i2 = i2 < count2 ? i2 : 0;
      if (index < 0 || index >= 8)
        return H.ioore(vertices2, index);
      V.Transform_mulToOut(xf2, vertices2[index], c[0].v);
      t1 = c[0].id.features;
      t1.referenceEdge = edge1;
      t1.incidentEdge = index;
      t1.incidentVertex = 0;
      if (i2 < 0 || i2 >= 8)
        return H.ioore(vertices2, i2);
      V.Transform_mulToOut(xf2, vertices2[i2], c[1].v);
      t1 = c[1].id.features;
      t1.referenceEdge = edge1;
      t1.incidentEdge = i2;
      t1.incidentVertex = 1;
    },
    collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
      var totalRadius, t1, t2, t3, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t4, t5, t6, t7, frontOffset, t8, np, pointCount, i, cp, v1x, v1y, bx, by, b1x, b1y;
      manifold.pointCount = 0;
      totalRadius = polyA.radius + polyB.radius;
      t1 = this.results1;
      this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
      if (t1.separation > totalRadius)
        return;
      t2 = this.results2;
      this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
      t3 = t2.separation;
      if (t3 > totalRadius)
        return;
      if (t3 > 0.98 * t1.separation + 0.001) {
        edge1 = t2.edgeIndex;
        manifold.type = 2;
        xf2 = xfA;
        xf1 = xfB;
        poly2 = polyA;
        poly1 = polyB;
        flip = 1;
      } else {
        edge1 = t1.edgeIndex;
        manifold.type = 1;
        xf2 = xfB;
        xf1 = xfA;
        poly2 = polyB;
        poly1 = polyA;
        flip = 0;
      }
      t1 = this.incidentEdge;
      this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
      count1 = poly1.get$vertexCount();
      vertices1 = poly1.vertices;
      t2 = this.v11;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(vertices1, edge1);
      t2.setFrom$1(vertices1[edge1]);
      t3 = this.v12;
      t4 = edge1 + 1;
      if (t4 < count1) {
        if (t4 >= 8)
          return H.ioore(vertices1, t4);
        t4 = vertices1[t4];
      } else
        t4 = vertices1[0];
      t3.setFrom$1(t4);
      t4 = this.localTangent;
      t4.setFrom$1(t3).sub$1(t2);
      t4.normalize$0();
      t5 = this.localNormal;
      V.Vector2_crossVectorAndNumToOut(t4, 1, t5);
      t6 = this.planePoint;
      t7 = t6.setFrom$1(t2);
      t7 = t7.add$1(t7, t3);
      t7.scale$1(t7, 0.5);
      t7 = this.tangent;
      xf1.rotation.transformed$2(t4, t7);
      t4 = this.normal;
      V.Vector2_crossVectorAndNumToOut(t7, 1, t4);
      V.Transform_mulToOut(xf1, t2, t2);
      V.Transform_mulToOut(xf1, t3, t3);
      frontOffset = t4.dot$1(t2);
      t2 = t7.dot$1(t2);
      t3 = t7.dot$1(t3);
      t7.negate$0();
      t8 = this.clipPoints1;
      np = V.Collision_clipSegmentToLine(t8, t1, t7, -t2 + totalRadius);
      t7.negate$0();
      if (np < 2)
        return;
      t1 = this.clipPoints2;
      if (V.Collision_clipSegmentToLine(t1, t8, t7, t3 + totalRadius) < 2)
        return;
      manifold.localNormal.setFrom$1(t5);
      manifold.localPoint.setFrom$1(t6);
      for (t2 = manifold.points, t3 = xf2.position.storage, t5 = xf2.rotation.storage, pointCount = 0, i = 0; i < 2; ++i)
        if (t4.dot$1(t1[i].v) - frontOffset <= totalRadius) {
          if (pointCount >= 2)
            return H.ioore(t2, pointCount);
          cp = t2[pointCount];
          t6 = t1[i];
          t7 = t6.v;
          t8 = cp.localPoint;
          t7 = t7.storage;
          v1x = t7[0] - t3[0];
          v1y = t7[1] - t3[1];
          bx = t5[0];
          by = t5[1];
          b1x = t5[2];
          b1y = t5[3];
          t8 = t8.storage;
          t8[0] = v1x * bx + v1y * by;
          t8[1] = v1x * b1x + v1y * b1y;
          t8 = cp.id;
          t8 = t8.features;
          t6 = t6.id.features;
          t8.referenceEdge = t6.referenceEdge;
          t8.incidentEdge = t6.incidentEdge;
          t8.incidentVertex = t6.incidentVertex;
          t8.flip = t6.flip;
          t8.flip = flip;
          ++pointCount;
        }
      manifold.pointCount = pointCount;
    },
    Collision$_construct$1: function(pool) {
      var t1 = this.incidentEdge;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints1;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints2;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
    },
    static: {"": "Collision_NULL_FEATURE", Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
        var distance0, distance1, t1, t2, numOut, numOut0, vin;
        distance0 = norm.dot$1(vIn[0].v) - offset;
        distance1 = norm.dot$1(vIn[1].v) - offset;
        if (distance0 <= 0) {
          t1 = vOut[0];
          t2 = vIn[0];
          t1.v.setFrom$1(t2.v);
          t1.id.features.setFrom$1(t2.id.features);
          numOut = 1;
        } else
          numOut = 0;
        if (distance1 <= 0) {
          numOut0 = numOut + 1;
          t1 = vOut[numOut];
          t2 = vIn[1];
          t1.v.setFrom$1(t2.v);
          t1.id.features.setFrom$1(t2.id.features);
          numOut = numOut0;
        }
        if (distance0 * distance1 < 0) {
          if (numOut >= 2)
            return H.ioore(vOut, numOut);
          t1 = vOut[numOut].v.setFrom$1(vIn[1].v).sub$1(vIn[0].v);
          t1 = t1.scale$1(t1, distance0 / (distance0 - distance1));
          t1.add$1(t1, vIn[0].v);
          vin = distance0 > 0 ? vIn[0] : vIn[1];
          vOut[numOut].id.features.setFrom$1(vin.id.features);
          ++numOut;
        }
        return numOut;
      }}
  },
  ClipVertex: {
    "": "Object;v,id",
    static: {ClipVertex$: function() {
        return new V.ClipVertex(new T.Vector2(new Float32Array(2)), new V.ContactID(V.Features$()));
      }}
  },
  EdgeResults: {
    "": "Object;separation,edgeIndex"
  },
  ContactID: {
    "": "Object;features<",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = other.get$features();
      return t1.$eq(t1, this.features);
    }
  },
  Distance: {
    "": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal",
    distance$3: function(output, cache, input) {
      var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, iter, saveCount, i, t12, vertex, t13, t14, t15, duplicate, rA, rB;
      this.calls = this.calls + 1;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      transformA = input.transformA;
      transformB = input.transformB;
      t1 = this.simplex;
      t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
      vertices = t1.vertices;
      t2 = this.closestPoint;
      t1.getClosestPoint$1(t2);
      t2.get$length2();
      for (t3 = this.saveA, t4 = this.saveB, t5 = this.temp, t6 = proxyB.vertices, t7 = proxyA.vertices, t8 = transformB.rotation, t9 = this.searchDirection, t10 = t9.storage, t11 = transformA.rotation, iter = 0; iter < this.maxIters;) {
        saveCount = t1.count;
        for (i = 0; i < saveCount; ++i) {
          if (i >= 3)
            return H.ioore(vertices, i);
          t3[i] = vertices[i].indexA;
          t4[i] = vertices[i].indexB;
        }
        switch (saveCount) {
          case 1:
            break;
          case 2:
            t1.solve2$0();
            break;
          case 3:
            t1.solve3$0();
            break;
          default:
            return;
        }
        if (t1.count === 3)
          break;
        t1.getClosestPoint$1(t2);
        t2.get$length2();
        t1.getSearchDirection$1(t9);
        if (t9.get$length2() < 1.4208639999999999e-14)
          break;
        t12 = t1.count;
        if (t12 >= 3)
          return H.ioore(vertices, t12);
        vertex = vertices[t12];
        t12 = t11.transposed$0();
        t10[1] = -t10[1];
        t10[0] = -t10[0];
        t13 = t5.storage;
        t13[1] = t10[1];
        t13[0] = t10[0];
        t12.transform$1(t12, t5);
        t12 = proxyA.getSupport$1(t5);
        vertex.indexA = t12;
        if (t12 >= 8)
          return H.ioore(t7, t12);
        t12 = t7[t12];
        t13 = vertex.wA;
        V.Transform_mulToOut(transformA, t12, t13);
        t12 = t8.transposed$0();
        t10[1] = -t10[1];
        t10[0] = -t10[0];
        t14 = t5.storage;
        t14[1] = t10[1];
        t14[0] = t10[0];
        t12.transform$1(t12, t5);
        t12 = proxyB.getSupport$1(t5);
        vertex.indexB = t12;
        if (t12 >= 8)
          return H.ioore(t6, t12);
        t12 = t6[t12];
        t14 = vertex.wB;
        V.Transform_mulToOut(transformB, t12, t14);
        t12 = vertex.w;
        t15 = t12.storage;
        t14 = t14.storage;
        t15[1] = t14[1];
        t15[0] = t14[0];
        t12.sub$1(t13);
        ++iter;
        this.iters = this.iters + 1;
        for (i = 0; duplicate = false, i < saveCount; ++i) {
          t12 = vertex.indexA;
          if (i >= 3)
            return H.ioore(t3, i);
          if (J.$eq(t12, t3[i]) && J.$eq(vertex.indexB, t4[i])) {
            duplicate = true;
            break;
          }
        }
        if (duplicate)
          break;
        t1.count = t1.count + 1;
      }
      this.maxIters = P.max(this.maxIters, iter);
      t2 = output.pointA;
      t3 = output.pointB;
      switch (t1.count) {
        case 0:
          break;
        case 1:
          t4 = t1.v1;
          t2.setFrom$1(t4.wA);
          t3.setFrom$1(t4.wB);
          break;
        case 2:
          t4 = t1.case2;
          t6 = t1.v1;
          t7 = t4.setFrom$1(t6.wA);
          t7.scale$1(t7, t6.a);
          t7 = t1.v2;
          t8 = t2.setFrom$1(t7.wA);
          t8 = t8.scale$1(t8, t7.a);
          t8.add$1(t8, t4);
          t8 = t4.setFrom$1(t6.wB);
          t8.scale$1(t8, t6.a);
          t6 = t3.setFrom$1(t7.wB);
          t7 = t6.scale$1(t6, t7.a);
          t7.add$1(t7, t4);
          break;
        case 3:
          t4 = t1.v1;
          t6 = t2.setFrom$1(t4.wA);
          t6.scale$1(t6, t4.a);
          t4 = t1.case3;
          t6 = t1.v2;
          t7 = t4.setFrom$1(t6.wA);
          t7.scale$1(t7, t6.a);
          t6 = t1.case33;
          t7 = t1.v3;
          t8 = t6.setFrom$1(t7.wA);
          t8.scale$1(t8, t7.a);
          t4 = t2.add$1(t2, t4);
          t4.add$1(t4, t6);
          t3.setFrom$1(t2);
          break;
        default:
          break;
      }
      t4 = V.MathBox_distanceSquared(t2, t3);
      output.distance = Math.sqrt(t4);
      output.iterations = iter;
      t1.writeCache$1(cache);
      if (input.useRadii) {
        rA = proxyA.get$radius();
        rB = proxyB.get$radius();
        t1 = output.distance;
        t4 = rA + rB;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > t4 && t1 > 1.192e-7) {
          output.distance = t1 - t4;
          t1 = this.normal;
          t1.setFrom$1(t3).sub$1(t2);
          t1.normalize$0();
          t4 = t5.setFrom$1(t1);
          t4.scale$1(t4, rA);
          t2.add$1(t2, t5);
          t1 = t5.setFrom$1(t1);
          t1.scale$1(t1, rB);
          t3.sub$1(t5);
        } else {
          t1 = t2.add$1(t2, t3);
          t1.scale$1(t1, 0.5);
          t3.setFrom$1(t2);
          output.distance = 0;
        }
      }
    }
  },
  DistanceInput: {
    "": "Object;proxyA@,proxyB@,transformA,transformB,useRadii",
    static: {DistanceInput$: function() {
        return new V.DistanceInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Transform$0(), V.Transform$0(), false);
      }}
  },
  DistanceOutput: {
    "": "Object;pointA,pointB,distance,iterations",
    static: {DistanceOutput$: function() {
        return new V.DistanceOutput(new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), null, null);
      }}
  },
  DistanceProxy: {
    "": "Object;vertices<,count,radius<",
    setFromShape$1: function(shape) {
      var t1, t2, t3, i, t4, t5;
      t1 = shape.type;
      if (t1 === 0) {
        this.vertices[0].setFrom$1(shape.get$position(shape));
        this.count = 1;
        this.radius = shape.radius;
      } else if (t1 === 1) {
        t1 = shape.get$vertexCount();
        this.count = t1;
        this.radius = shape.radius;
        for (t2 = this.vertices, t3 = shape.vertices, i = 0; i < t1; ++i) {
          if (i >= 8)
            return H.ioore(t2, i);
          t4 = t2[i];
          t5 = t3[i];
          t4 = t4.storage;
          t5 = t5.get$storage();
          if (1 >= t5.length)
            return H.ioore(t5, 1);
          t4[1] = t5[1];
          t4[0] = t5[0];
        }
      }
    },
    getSupport$1: function(direction) {
      var t1, bestValue, bestIndex, i, value;
      t1 = this.vertices;
      bestValue = t1[0].dot$1(direction);
      for (bestIndex = 0, i = 1; i < this.count; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        value = t1[i].dot$1(direction);
        if (value > bestValue) {
          bestValue = value;
          bestIndex = i;
        }
      }
      return bestIndex;
    },
    DistanceProxy$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {DistanceProxy$: function() {
        var t1 = new V.DistanceProxy(H.setRuntimeTypeInfo(Array(8), [T.Vector2]), 0, 0);
        t1.DistanceProxy$0();
        return t1;
      }}
  },
  Features: {
    "": "Object;referenceEdge<,incidentEdge,incidentVertex,flip",
    setFrom$1: function(f) {
      this.referenceEdge = f.referenceEdge;
      this.incidentEdge = f.incidentEdge;
      this.incidentVertex = f.incidentVertex;
      this.flip = f.flip;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.incidentEdge && this.incidentVertex === other.incidentVertex && this.flip === other.flip;
    },
    toString$0: function(_) {
      return "Features: (" + this.flip + ", " + this.incidentEdge + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
    },
    zero$0: function() {
      this.referenceEdge = 0;
      this.incidentEdge = 0;
      this.incidentVertex = 0;
      this.flip = 0;
    },
    static: {Features$: function() {
        return new V.Features(0, 0, 0, 0);
      }}
  },
  Manifold: {
    "": "Object;points,localNormal,localPoint<,type,pointCount",
    setFrom$1: function(other) {
      var t1, t2, i, t3, t4, t5, t6;
      for (t1 = this.points, t2 = other.points, i = 0; i < other.pointCount; ++i) {
        if (i >= 2)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = t2[i];
        t5 = t3.localPoint;
        t5 = t5.storage;
        t6 = t4.localPoint.storage;
        t5[1] = t6[1];
        t5[0] = t6[0];
        t3.normalImpulse = t4.normalImpulse;
        t3.tangentImpulse = t4.tangentImpulse;
        t3 = t3.id;
        t3 = t3.features;
        t4 = t4.id.features;
        t3.referenceEdge = t4.referenceEdge;
        t3.incidentEdge = t4.incidentEdge;
        t3.incidentVertex = t4.incidentVertex;
        t3.flip = t4.flip;
      }
      this.type = other.type;
      this.localNormal.setFrom$1(other.localNormal);
      this.localPoint.setFrom$1(other.localPoint);
      this.pointCount = other.pointCount;
    },
    Manifold$0: function() {
      var t1, i;
      for (t1 = this.points, i = 0; i < 2; ++i)
        t1[i] = new V.ManifoldPoint(new T.Vector2(new Float32Array(2)), 0, 0, new V.ContactID(new V.Features(0, 0, 0, 0)));
    },
    static: {Manifold$: function() {
        var t1 = new V.Manifold(H.setRuntimeTypeInfo(Array(2), [V.ManifoldPoint]), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), null, 0);
        t1.Manifold$0();
        return t1;
      }}
  },
  ManifoldPoint: {
    "": "Object;localPoint<,normalImpulse@,tangentImpulse@,id"
  },
  CircleShape: {
    "": "Shape;position>,type,radius",
    computeAxisAlignedBox$2: function(argBox, argTransform) {
      var t1, p, t2, t3, t4, t5;
      t1 = new Float32Array(2);
      p = new T.Vector2(t1);
      argTransform.rotation.transformed$2(this.position, p);
      p.add$1(p, argTransform.position);
      t2 = argBox.lowerBound;
      t3 = t1[0];
      t4 = this.radius;
      t5 = t1[1];
      t2 = t2.storage;
      t2[0] = t3 - t4;
      t2[1] = t5 - t4;
      t5 = argBox.upperBound;
      t2 = t1[0];
      t1 = t1[1];
      t5 = t5.storage;
      t5[0] = t2 + t4;
      t5[1] = t1 + t4;
    },
    clone$0: function(_) {
      var t1, t2, t3;
      t1 = this.type;
      t2 = this.radius;
      t3 = new T.Vector2(new Float32Array(2));
      t3.setFrom$1(this.position);
      return new V.CircleShape(t3, t1, t2);
    },
    computeMass$2: function(massData, density) {
      var t1, t2, t3;
      if (typeof density !== "number")
        return density.$mul();
      t1 = this.radius;
      massData.mass = density * 3.141592653589793 * t1 * t1;
      t1 = this.position;
      massData.center.setFrom$1(t1);
      t2 = massData.mass;
      t3 = this.radius;
      massData.inertia = t2 * (0.5 * t3 * t3 + t1.dot$1(t1));
    }
  },
  MassData: {
    "": "Object;mass,center,inertia"
  },
  PolygonShape: {
    "": "Shape;centroid<,vertices,normals,vertexCount<,type,radius",
    clone$0: function(_) {
      return V.PolygonShape$copy(this);
    },
    setAsBoxWithCenterAndAngle$4: function(hx, hy, center, angle) {
      var t1, t2, t3, xf, i, t4, out, t5;
      this.vertexCount = 4;
      this.vertexCount = 4;
      t1 = this.vertices;
      t2 = -hx;
      t3 = -hy;
      t1[0].setValues$2(t2, t3);
      t1[1].setValues$2(hx, t3);
      t1[2].setValues$2(hx, hy);
      t1[3].setValues$2(t2, hy);
      t2 = this.normals;
      t3 = t2[0].storage;
      t3[0] = 0;
      t3[1] = -1;
      t3 = t2[1].storage;
      t3[0] = 1;
      t3[1] = 0;
      t3 = t2[2].storage;
      t3[0] = 0;
      t3[1] = 1;
      t3 = t2[3].storage;
      t3[0] = -1;
      t3[1] = 0;
      t3 = this.centroid;
      t3.setZero$0();
      t3.setFrom$1(center);
      xf = V.Transform$0();
      xf.position.setFrom$1(center);
      t3 = xf.rotation;
      t3.setRotation$1(angle);
      for (i = 0; i < this.vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        t4 = t1[i];
        V.Transform_mulToOut(xf, t4, t4);
        out = t2[i];
        t4 = out.storage;
        if (out == null) {
          t5 = new Float32Array(2);
          out = new T.Vector2(t5);
          t5[1] = t4[1];
          t5[0] = t4[0];
        } else {
          t4[1] = t4[1];
          t4[0] = t4[0];
        }
        t3.transform$1(t3, out);
      }
    },
    computeAxisAlignedBox$2: function(argAabb, argXf) {
      var t1, lower, t2, t3, v, t4, i, t5;
      t1 = new Float32Array(2);
      lower = new T.Vector2(t1);
      t2 = new Float32Array(2);
      t3 = new Float32Array(2);
      v = new T.Vector2(t3);
      t4 = this.vertices;
      V.Transform_mulToOut(argXf, t4[0], lower);
      new T.Vector2(t2).setFrom$1(lower);
      for (i = 1; i < this.vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(t4, i);
        V.Transform_mulToOut(argXf, t4[i], v);
        t1[0] = P.min(t1[0], t3[0]);
        t1[1] = P.min(t1[1], t3[1]);
        t2[0] = P.max(t2[0], t3[0]);
        t2[1] = P.max(t2[1], t3[1]);
      }
      t3 = argAabb.lowerBound;
      t4 = t1[0];
      t5 = this.radius;
      t3 = t3.storage;
      t3[0] = t4 - t5;
      t3[1] = t1[1] - t5;
      t1 = argAabb.upperBound;
      t3 = t2[0];
      t1 = t1.storage;
      t1[0] = t3 + t5;
      t1[1] = t2[1] + t5;
    },
    computeMass$2: function(massData, density) {
      var t1, t2, center, pRef, t3, e1, t4, e2, t5, area, I, i, t6, p2, p3, $D, triangleArea, t7, t8, t9, t10, t11, t12, px, py, ex1, ey1, ex2, ey2;
      if (this.vertexCount === 2) {
        t1 = this.vertices;
        t2 = massData.center.setFrom$1(t1[0]);
        t1 = t2.add$1(t2, t1[1]);
        t1.scale$1(t1, 0.5);
        massData.mass = 0;
        massData.inertia = 0;
        return;
      }
      t1 = new Float32Array(2);
      center = new T.Vector2(t1);
      center.setZero$0();
      t2 = new Float32Array(2);
      pRef = new T.Vector2(t2);
      pRef.setZero$0();
      t3 = new Float32Array(2);
      e1 = new T.Vector2(t3);
      t4 = new Float32Array(2);
      e2 = new T.Vector2(t4);
      for (t5 = this.vertices, area = 0, I = 0, i = 0; t6 = this.vertexCount, i < t6;) {
        if (i >= 8)
          return H.ioore(t5, i);
        p2 = t5[i];
        ++i;
        if (i < t6) {
          if (i >= 8)
            return H.ioore(t5, i);
          p3 = t5[i];
        } else
          p3 = t5[0];
        t6 = p2.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t3[1] = t6[1];
        t3[0] = t6[0];
        e1.sub$1(pRef);
        t6 = p3.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t4[1] = t6[1];
        t4[0] = t6[0];
        e2.sub$1(pRef);
        $D = t3[0] * t4[1] - t3[1] * t4[0];
        triangleArea = 0.5 * $D;
        area += triangleArea;
        t6 = t1[0];
        t7 = triangleArea * 0.3333333333333333;
        t8 = t2[0];
        t9 = J.getInterceptor$x(p2);
        t10 = t9.get$x(p2);
        if (typeof t10 !== "number")
          return H.iae(t10);
        t11 = J.getInterceptor$x(p3);
        t12 = t11.get$x(p3);
        if (typeof t12 !== "number")
          return H.iae(t12);
        t1[0] = t6 + t7 * (t8 + t10 + t12);
        t12 = t1[1];
        t10 = t2[1];
        t9 = t9.get$y(p2);
        if (typeof t9 !== "number")
          return H.iae(t9);
        t11 = t11.get$y(p3);
        if (typeof t11 !== "number")
          return H.iae(t11);
        t1[1] = t12 + t7 * (t10 + t9 + t11);
        px = t2[0];
        py = t2[1];
        ex1 = t3[0];
        ey1 = t3[1];
        ex2 = t4[0];
        ey2 = t4[1];
        I += $D * (0.3333333333333333 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py));
      }
      if (typeof density !== "number")
        return density.$mul();
      massData.mass = density * area;
      center.scale$1(center, 1 / area);
      massData.center.setFrom$1(center);
      massData.inertia = I * density;
    },
    PolygonShape$copy$1: function(other) {
      var t1, t2, i, t3, t4;
      for (t1 = this.vertices, t2 = other.vertices, i = 0; i < 8; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t3 = t3.get$storage();
        if (1 >= t3.length)
          return H.ioore(t3, 1);
        t4[1] = t3[1];
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
      for (t1 = this.normals, t2 = other.normals, i = 0; i < 8; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t3 = t3.storage;
        t4[1] = t3[1];
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
    },
    PolygonShape$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
      for (t1 = this.normals, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {PolygonShape$: function() {
        var t1, t2;
        t1 = Array(8);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [T.Vector2]);
        t2 = H.setRuntimeTypeInfo(Array(8), [T.Vector2]);
        t2 = new V.PolygonShape(new T.Vector2(new Float32Array(2)), t1, t2, 0, 1, 0.01);
        t2.PolygonShape$0();
        return t2;
      }, PolygonShape$copy: function(other) {
        var t1, t2, t3, t4, t5;
        t1 = other.radius;
        t2 = other.vertexCount;
        t3 = Array(8);
        t3.fixed$length = init;
        t3 = H.setRuntimeTypeInfo(t3, [T.Vector2]);
        t4 = H.setRuntimeTypeInfo(Array(8), [T.Vector2]);
        t5 = new T.Vector2(new Float32Array(2));
        t5.setFrom$1(other.centroid);
        t1 = new V.PolygonShape(t5, t3, t4, t2, 1, t1);
        t1.PolygonShape$copy$1(other);
        return t1;
      }}
  },
  Shape: {
    "": "Object;"
  },
  Simplex: {
    "": "Object;v1,v2,v3,vertices,count,e13,e23,e12,case2,case22,case3,case33",
    readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
      var t1, t2, t3, i, t4, v, t5, t6, wALocal, wBLocal, t7, metric1, metric2;
      this.count = cache.count;
      for (t1 = this.vertices, t2 = cache.indexA, t3 = cache.indexB, i = 0; t4 = this.count, i < t4; ++i) {
        if (i >= 3)
          return H.ioore(t1, i);
        v = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        t4 = t2[i];
        v.indexA = t4;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t5 = t3[i];
        v.indexB = t5;
        t6 = proxyA.get$vertices();
        if (t4 >>> 0 !== t4 || t4 >= 8)
          return H.ioore(t6, t4);
        wALocal = t6[t4];
        t4 = proxyB.get$vertices();
        if (t5 >>> 0 !== t5 || t5 >= 8)
          return H.ioore(t4, t5);
        wBLocal = t4[t5];
        t5 = v.wA;
        V.Transform_mulToOut(transformA, wALocal, t5);
        t4 = v.wB;
        V.Transform_mulToOut(transformB, wBLocal, t4);
        t6 = v.w;
        t7 = t6.storage;
        t4 = t4.storage;
        t7[1] = t4[1];
        t7[0] = t4[0];
        t6.sub$1(t5);
        v.a = 0;
      }
      if (t4 > 1) {
        metric1 = cache.metric;
        metric2 = this.getMetric$0();
        if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
          this.count = 0;
      }
      if (this.count === 0) {
        v = t1[0];
        v.indexA = 0;
        v.indexB = 0;
        wALocal = proxyA.get$vertices()[0];
        wBLocal = proxyB.get$vertices()[0];
        t1 = v.wA;
        V.Transform_mulToOut(transformA, wALocal, t1);
        t2 = v.wB;
        V.Transform_mulToOut(transformB, wBLocal, t2);
        v.w.setFrom$1(t2).sub$1(t1);
        this.count = 1;
      }
    },
    writeCache$1: function(cache) {
      var t1, t2, t3, t4, t5, t6, i, t7;
      cache.metric = this.getMetric$0();
      t1 = this.count;
      cache.count = t1;
      for (t2 = cache.indexA, t3 = this.vertices, t4 = t2.length, t5 = cache.indexB, t6 = t5.length, i = 0; i < t1; ++i) {
        if (i >= 3)
          return H.ioore(t3, i);
        t7 = t3[i].indexA;
        if (i >= t4)
          return H.ioore(t2, i);
        t2[i] = t7;
        t7 = t3[i].indexB;
        if (i >= t6)
          return H.ioore(t5, i);
        t5[i] = t7;
      }
    },
    getSearchDirection$1: function(out) {
      var t1, t2;
      switch (this.count) {
        case 1:
          out.setFrom$1(this.v1.w).negate$0();
          return;
        case 2:
          t1 = this.e12;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          out.setFrom$1(t2).negate$0();
          if (t1.cross$1(out) > 0)
            V.Vector2_crossVectorAndNumToOut(t1, -1, out);
          else
            V.Vector2_crossVectorAndNumToOut(t1, 1, out);
          break;
        default:
          out.setZero$0();
          return;
      }
    },
    getClosestPoint$1: function(out) {
      var t1, t2, t3, t4;
      switch (this.count) {
        case 0:
          out.setZero$0();
          return;
        case 1:
          out.setFrom$1(this.v1.w);
          return;
        case 2:
          t1 = this.case22;
          t2 = this.v2;
          t3 = t1.setFrom$1(t2.w);
          t3.scale$1(t3, t2.a);
          t2 = this.case2;
          t3 = this.v1;
          t4 = t2.setFrom$1(t3.w);
          t3 = t4.scale$1(t4, t3.a);
          t3.add$1(t3, t1);
          out.setFrom$1(t2);
          return;
        case 3:
          out.setZero$0();
          return;
        default:
          out.setZero$0();
          return;
      }
    },
    getMetric$0: function() {
      var t1, t2, t3;
      switch (this.count) {
        case 0:
          return 0;
        case 1:
          return 0;
        case 2:
          t1 = V.MathBox_distanceSquared(this.v1.w, this.v2.w);
          return Math.sqrt(t1);
        case 3:
          t1 = this.case3;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          t3 = this.case33;
          t3.setFrom$1(this.v3.w).sub$1(t2);
          return t1.cross$1(t3);
        default:
          return 0;
      }
    },
    solve2$0: function() {
      var t1, w1, t2, w2, t3, d12_2, d12_1, inv_d12;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.e12;
      t3.setFrom$1(w2).sub$1(w1);
      d12_2 = -w1.dot$1(t3);
      if (d12_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      d12_1 = w2.dot$1(t3);
      if (d12_1 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      inv_d12 = 1 / (d12_1 + d12_2);
      t1.a = d12_1 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
    },
    solve3$0: function() {
      var t1, w1, t2, w2, t3, w3, t4, w1e12, w2e12, d12_2, t5, w1e13, w3e13, d13_2, t6, w2e23, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.v3;
      w3 = t3.w;
      t4 = this.e12;
      t4.setFrom$1(w2).sub$1(w1);
      w1e12 = w1.dot$1(t4);
      w2e12 = w2.dot$1(t4);
      d12_2 = -w1e12;
      t5 = this.e13;
      t5.setFrom$1(w3).sub$1(w1);
      w1e13 = w1.dot$1(t5);
      w3e13 = w3.dot$1(t5);
      d13_2 = -w1e13;
      t6 = this.e23;
      t6.setFrom$1(w3).sub$1(w2);
      w2e23 = w2.dot$1(t6);
      w3e23 = w3.dot$1(t6);
      d23_2 = -w2e23;
      n123 = t4.cross$1(t5);
      d123_1 = n123 * w2.cross$1(w3);
      d123_2 = n123 * w3.cross$1(w1);
      d123_3 = n123 * w1.cross$1(w2);
      if (d12_2 <= 0 && d13_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
        inv_d12 = 1 / (w2e12 + d12_2);
        t1.a = w2e12 * inv_d12;
        t2.a = d12_2 * inv_d12;
        this.count = 2;
        return;
      }
      if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
        inv_d13 = 1 / (w3e13 + d13_2);
        t1.a = w3e13 * inv_d13;
        t3.a = d13_2 * inv_d13;
        this.count = 2;
        t2.setFrom$1(t3);
        return;
      }
      if (w2e12 <= 0 && d23_2 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      if (w3e13 <= 0 && w3e23 <= 0) {
        t3.a = 1;
        this.count = 1;
        t1.setFrom$1(t3);
        return;
      }
      if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
        inv_d23 = 1 / (w3e23 + d23_2);
        t2.a = w3e23 * inv_d23;
        t3.a = d23_2 * inv_d23;
        this.count = 2;
        t1.setFrom$1(t3);
        return;
      }
      inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
      t1.a = d123_1 * inv_d123;
      t2.a = d123_2 * inv_d123;
      t3.a = d123_3 * inv_d123;
      this.count = 3;
    },
    Simplex$0: function() {
      var t1 = this.vertices;
      t1[0] = this.v1;
      t1[1] = this.v2;
      t1[2] = this.v3;
    }
  },
  SimplexCache: {
    "": "Object;metric,count,indexA,indexB",
    static: {SimplexCache$: function() {
        return new V.SimplexCache(0, 0, P.List_List$generate(3, new V.SimplexCache_closure(), true, J.JSInt), P.List_List$generate(3, new V.SimplexCache_closure0(), true, J.JSInt));
      }}
  },
  SimplexCache_closure: {
    "": "Closure:15;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexCache_closure0: {
    "": "Closure:15;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexVertex: {
    "": "Object;wA,wB,w,a,indexA,indexB",
    setFrom$1: function(sv) {
      this.wA.setFrom$1(sv.wA);
      this.wB.setFrom$1(sv.wB);
      this.w.setFrom$1(sv.w);
      this.a = sv.a;
      this.indexA = sv.indexA;
      this.indexB = sv.indexB;
    },
    toString$0: function(_) {
      return "wA: " + H.S(this.wA) + ", wB: " + H.S(this.wB) + ", w: " + H.S(this.w);
    },
    static: {SimplexVertex$: function() {
        return new V.SimplexVertex(new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), 0, 0, 0);
      }}
  },
  TimeOfImpact: {
    "": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA,sweepB,pool",
    timeOfImpact$2: function(output, input) {
      var t1, proxyA, proxyB, t2, tMax, target, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, iter, t14, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
      t1 = $.TimeOfImpact_toiCalls;
      if (typeof t1 !== "number")
        return t1.$add();
      $.TimeOfImpact_toiCalls = t1 + 1;
      output.state = 0;
      output.t = input.tMax;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      t1 = this.sweepA;
      t1.setFrom$1(input.sweepA);
      t2 = this.sweepB;
      t2.setFrom$1(input.sweepB);
      t1.normalize$0();
      t2.normalize$0();
      tMax = input.tMax;
      target = P.max(0.005, proxyA.radius + proxyB.radius - 0.015);
      t3 = this.cache;
      t3.count = 0;
      t4 = this.distanceInput;
      t4.proxyA = proxyA;
      t4.proxyB = proxyB;
      t4.useRadii = false;
      for (t5 = this.fcn, t6 = this.indexes, t7 = target + 0.00125, t8 = target - 0.00125, t9 = this.distanceOutput, t10 = this.xfA, t11 = this.xfB, t12 = this.pool, t13 = 0, iter = 0; true;) {
        t1.getTransform$2(t10, t13);
        t2.getTransform$2(t11, t13);
        t4.transformA = t10;
        t4.transformB = t11;
        t12.distance.distance$3(t9, t3, t4);
        t14 = t9.distance;
        if (typeof t14 !== "number")
          return t14.$le();
        if (t14 <= 0) {
          output.state = 2;
          output.t = 0;
          break;
        }
        if (t14 < t7) {
          output.state = 3;
          output.t = t13;
          break;
        }
        t5.initialize$6(t5, t3, proxyA, t1, proxyB, t2, t13);
        for (t20 = tMax, pushBackIter = 0; done = false, true;) {
          s2 = t5.findMinSeparation$2(t6, t20);
          if (s2 > t7) {
            output.state = 4;
            output.t = tMax;
            done = true;
            break;
          }
          if (s2 > t8) {
            t13 = t20;
            done = false;
            break;
          }
          s1 = t5.evaluate$3(t6[0], t6[1], t13);
          if (s1 < t8) {
            output.state = 1;
            output.t = t13;
            done = true;
            break;
          }
          if (s1 <= t7) {
            output.state = 3;
            output.t = t13;
            done = true;
            break;
          }
          for (a2 = t20, a1 = t13, rootIterCount = 0; true;) {
            t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
            s = t5.evaluate$3(t6[0], t6[1], t);
            if (Math.abs(s - target) < 0.00125) {
              t20 = t;
              break;
            }
            if (s > target) {
              a1 = t;
              s1 = s;
            } else {
              a2 = t;
              s2 = s;
            }
            ++rootIterCount;
            t14 = $.TimeOfImpact_toiRootIters;
            if (typeof t14 !== "number")
              return t14.$add();
            $.TimeOfImpact_toiRootIters = t14 + 1;
            if (rootIterCount === 50)
              break;
          }
          $.TimeOfImpact_toiMaxRootIters = P.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
          ++pushBackIter;
          if (pushBackIter === 8) {
            done = false;
            break;
          }
        }
        ++iter;
        t14 = $.TimeOfImpact_toiIters;
        if (typeof t14 !== "number")
          return t14.$add();
        $.TimeOfImpact_toiIters = t14 + 1;
        if (done)
          break;
        if (iter === 1000) {
          output.state = 1;
          output.t = t13;
          break;
        }
      }
      $.TimeOfImpact_toiMaxIters = P.max($.TimeOfImpact_toiMaxIters, iter);
    },
    TimeOfImpact$_construct$1: function(argPool) {
      var t1 = this.indexes;
      t1[0] = 0;
      t1[1] = 0;
      $.TimeOfImpact_toiCalls = 0;
      $.TimeOfImpact_toiIters = 0;
      $.TimeOfImpact_toiMaxIters = 0;
      $.TimeOfImpact_toiRootIters = 0;
      $.TimeOfImpact_toiMaxRootIters = 0;
    },
    static: {"": "TimeOfImpact_MAX_ITERATIONS,TimeOfImpact_toiCalls,TimeOfImpact_toiIters,TimeOfImpact_toiMaxIters,TimeOfImpact_toiRootIters,TimeOfImpact_toiMaxRootIters"}
  },
  SeparationFunction: {
    "": "Object;proxyA@,proxyB@,type,localPoint<,axis,sweepA,sweepB,localPointA,localPointB,pointA,pointB,localPointA1,localPointA2,normal,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
    initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
      var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, s;
      this.proxyA = argProxyA;
      this.proxyB = argProxyB;
      count = cache.count;
      this.sweepA = argSweepA;
      this.sweepB = argSweepB;
      t2 = this.xfa;
      argSweepA.getTransform$2(t2, t1);
      t3 = this.xfb;
      this.sweepB.getTransform$2(t3, t1);
      if (count === 1) {
        this.type = 0;
        t1 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t5 = cache.indexA;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (t5 >>> 0 !== t5 || t5 >= 8)
          return H.ioore(t4, t5);
        t1.setFrom$1(t4[t5]);
        t5 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        t6 = cache.indexB;
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t6 = t6[0];
        if (t6 >>> 0 !== t6 || t6 >= 8)
          return H.ioore(t4, t6);
        t5.setFrom$1(t4[t6]);
        t6 = this.pointA;
        V.Transform_mulToOut(t2, t1, t6);
        t1 = this.pointB;
        V.Transform_mulToOut(t3, t5, t1);
        t5 = this.axis;
        t5.setFrom$1(t1).sub$1(t6);
        return t5.normalizeLength$0();
      } else {
        t1 = cache.indexA;
        t4 = t1.length;
        if (0 >= t4)
          return H.ioore(t1, 0);
        t5 = t1[0];
        if (1 >= t4)
          return H.ioore(t1, 1);
        t4 = cache.indexB;
        t6 = this.pointA;
        t7 = this.localPoint;
        t8 = this.normal;
        t9 = this.axis;
        t10 = this.pointB;
        t11 = this.temp;
        if (J.$eq(t5, t1[1])) {
          this.type = 2;
          t5 = this.localPointB1;
          t12 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t13 = t4[0];
          if (t13 >>> 0 !== t13 || t13 >= 8)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointB2;
          t12 = this.proxyB.get$vertices();
          if (1 >= t4.length)
            return H.ioore(t4, 1);
          t4 = t4[1];
          if (t4 >>> 0 !== t4 || t4 >= 8)
            return H.ioore(t12, t4);
          t13.setFrom$1(t12[t4]);
          t11.setFrom$1(t13).sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t3.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(t7, t13);
          t7.scale$1(t7, 0.5);
          V.Transform_mulToOut(t3, t7, t10);
          t7 = this.localPointA;
          t3 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0];
          if (t1 >>> 0 !== t1 || t1 >= 8)
            return H.ioore(t3, t1);
          t7.setFrom$1(t3[t1]);
          V.Transform_mulToOut(t2, t7, t6);
          t11.setFrom$1(t6);
          t11.sub$1(t10);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        } else {
          this.type = 1;
          t5 = this.localPointA1;
          t12 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t13 = t1[0];
          if (t13 >>> 0 !== t13 || t13 >= 8)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointA2;
          t12 = this.proxyA.get$vertices();
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          t1 = t1[1];
          if (t1 >>> 0 !== t1 || t1 >= 8)
            return H.ioore(t12, t1);
          t13.setFrom$1(t12[t1]);
          t11.setFrom$1(t13);
          t11.sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t2.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(t7, t13);
          t7.scale$1(t7, 0.5);
          V.Transform_mulToOut(t2, t7, t6);
          t7 = this.localPointB;
          t2 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t4 = t4[0];
          if (t4 >>> 0 !== t4 || t4 >= 8)
            return H.ioore(t2, t4);
          t7.setFrom$1(t2[t4]);
          V.Transform_mulToOut(t3, t7, t10);
          t11.setFrom$1(t10);
          t11.sub$1(t6);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        }
      }
    },
    findMinSeparation$2: function(indexes, t) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t4 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3, t4);
          t5 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), t5);
          t3.negate$0();
          indexes[0] = this.proxyA.getSupport$1(t4);
          indexes[1] = this.proxyB.getSupport$1(t5);
          t5 = this.localPointA;
          t4 = this.proxyA.get$vertices();
          t6 = indexes[0];
          if (t6 >>> 0 !== t6 || t6 >= 8)
            return H.ioore(t4, t6);
          t5.setFrom$1(t4[t6]);
          t6 = this.localPointB;
          t4 = this.proxyB.get$vertices();
          t7 = indexes[1];
          if (t7 >>> 0 !== t7 || t7 >= 8)
            return H.ioore(t4, t7);
          t6.setFrom$1(t4[t7]);
          t7 = this.pointA;
          V.Transform_mulToOut(t1, t5, t7);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t6, t5);
          return t5.sub$1(t7).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t1 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3, t1);
          t3.negate$0();
          indexes[0] = -1;
          t1 = this.proxyB.getSupport$1(t1);
          indexes[1] = t1;
          t5 = this.localPointB;
          t6 = this.proxyB.get$vertices();
          if (t1 >= 8)
            return H.ioore(t6, t1);
          t5.setFrom$1(t6[t1]);
          t1 = this.pointB;
          V.Transform_mulToOut(t2, t5, t1);
          return t1.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t2 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), t2);
          t3.negate$0();
          indexes[1] = -1;
          t2 = this.proxyA.getSupport$1(t2);
          indexes[0] = t2;
          t5 = this.localPointA;
          t6 = this.proxyA.get$vertices();
          if (t2 >= 8)
            return H.ioore(t6, t2);
          t5.setFrom$1(t6[t2]);
          t2 = this.pointA;
          V.Transform_mulToOut(t1, t5, t2);
          return t2.sub$1(t4).dot$1(t3);
        default:
          indexes[0] = -1;
          indexes[1] = -1;
          return 0;
      }
    },
    evaluate$3: function(indexA, indexB, t) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t1.rotation.transposed$0().transformed$2(t3, this.axisA);
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisB);
          t3.negate$0();
          t4 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= 8)
            return H.ioore(t5, indexA);
          t4.setFrom$1(t5[indexA]);
          t5 = this.localPointB;
          t6 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= 8)
            return H.ioore(t6, indexB);
          t5.setFrom$1(t6[indexB]);
          t6 = this.pointA;
          V.Transform_mulToOut(t1, t4, t6);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, t5, t4);
          return t4.sub$1(t6).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t2.rotation.transposed$0().transformed$2(t3, this.axisB);
          t3.negate$0();
          t1 = this.localPointB;
          t5 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= 8)
            return H.ioore(t5, indexB);
          t1.setFrom$1(t5[indexB]);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t1, t5);
          return t5.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisA);
          t3.negate$0();
          t2 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= 8)
            return H.ioore(t5, indexA);
          t2.setFrom$1(t5[indexA]);
          t5 = this.pointA;
          V.Transform_mulToOut(t1, t2, t5);
          return t5.sub$1(t4).dot$1(t3);
        default:
          return 0;
      }
    }
  },
  TimeOfImpactInput: {
    "": "Object;proxyA<,proxyB<,sweepA,sweepB,tMax"
  },
  TimeOfImpactOutput: {
    "": "Object;state,t"
  },
  WorldManifold: {
    "": "Object;normal,points,pool3,pool4",
    initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
      var pointA, pointB, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, i, t13, scalar;
      switch (manifold.type) {
        case 0:
          pointA = this.pool3;
          pointB = this.pool4;
          t1 = this.normal;
          t2 = t1.storage;
          t2[0] = 1;
          t2[1] = 0;
          t3 = xfA.position.storage;
          t4 = t3[0];
          t5 = xfA.rotation.storage;
          t6 = t5[0];
          t7 = manifold.localPoint.storage;
          t8 = t7[0];
          t9 = t5[2];
          t10 = t7[1];
          t11 = pointA.storage;
          t11[0] = t4 + t6 * t8 + t9 * t10;
          t11[1] = t3[1] + t5[1] * t7[0] + t5[3] * t10;
          t10 = xfB.position.storage;
          t5 = t10[0];
          t7 = xfB.rotation.storage;
          t3 = t7[0];
          t9 = manifold.points[0].localPoint.storage;
          t8 = t9[0];
          t6 = t7[2];
          t4 = t9[1];
          t12 = pointB.storage;
          t12[0] = t5 + t3 * t8 + t6 * t4;
          t12[1] = t10[1] + t7[1] * t9[0] + t7[3] * t4;
          if (V.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
            t2[0] = t12[0] - t11[0];
            t2[1] = t12[1] - t11[1];
            t1.normalize$0();
          }
          t1 = t2[0];
          t3 = t11[0];
          t2 = t2[1];
          t11 = t11[1];
          t4 = t12[0];
          t12 = t12[1];
          t5 = this.points;
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          J.set$x$x(t5[0], (t1 * radiusA + t3 + (-t1 * radiusB + t4)) * 0.5);
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          J.set$y$x(t5[0], (t2 * radiusA + t11 + (-t2 * radiusB + t12)) * 0.5);
          return;
        case 1:
          t1 = xfA.rotation.storage;
          t2 = t1[0];
          t3 = manifold.localNormal.storage;
          t4 = t3[0];
          t5 = t1[2];
          t6 = t3[1];
          t7 = this.normal.storage;
          t7[0] = t2 * t4 + t5 * t6;
          t4 = t1[1];
          t3 = t3[0];
          t2 = t1[3];
          t7[1] = t4 * t3 + t2 * t6;
          t6 = xfA.position.storage;
          t3 = t6[0];
          t4 = t1[0];
          t8 = manifold.localPoint.storage;
          t9 = t8[0];
          t10 = t8[1];
          t11 = this.pool3.storage;
          t11[0] = t3 + t4 * t9 + t5 * t10;
          t11[1] = t6[1] + t1[1] * t8[0] + t2 * t10;
          for (t1 = xfB.position.storage, t2 = xfB.rotation.storage, t3 = manifold.points, t4 = this.pool4.storage, t5 = this.points, i = 0; i < manifold.pointCount; ++i) {
            t6 = t1[0];
            t8 = t2[0];
            if (i >= 2)
              return H.ioore(t3, i);
            t9 = t3[i].localPoint.storage;
            t10 = t9[0];
            t12 = t2[2];
            t13 = t9[1];
            t4[0] = t6 + t8 * t10 + t12 * t13;
            t4[1] = t1[1] + t2[1] * t9[0] + t2[3] * t13;
            t13 = t4[0];
            t9 = t11[0];
            t12 = t7[0];
            t10 = t4[1];
            t8 = t11[1];
            t6 = t7[1];
            scalar = radiusA - ((t13 - t9) * t12 + (t10 - t8) * t6);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$x$x(t5[i], (t12 * scalar + t13 + (-t12 * radiusB + t13)) * 0.5);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$y$x(t5[i], (t6 * scalar + t10 + (-t6 * radiusB + t10)) * 0.5);
          }
          return;
        case 2:
          t1 = xfB.rotation.storage;
          t2 = t1[0];
          t3 = manifold.localNormal.storage;
          t4 = t3[0];
          t5 = t1[2];
          t6 = t3[1];
          t7 = this.normal.storage;
          t7[0] = t2 * t4 + t5 * t6;
          t4 = t1[1];
          t3 = t3[0];
          t2 = t1[3];
          t7[1] = t4 * t3 + t2 * t6;
          t6 = xfB.position.storage;
          t3 = t6[0];
          t4 = t1[0];
          t8 = manifold.localPoint.storage;
          t9 = t8[0];
          t10 = t8[1];
          t11 = this.pool3.storage;
          t11[0] = t3 + t4 * t9 + t5 * t10;
          t11[1] = t6[1] + t1[1] * t8[0] + t2 * t10;
          for (t1 = xfA.position.storage, t2 = xfA.rotation.storage, t3 = manifold.points, t4 = this.pool4.storage, t5 = this.points, i = 0; i < manifold.pointCount; ++i) {
            t6 = t1[0];
            t8 = t2[0];
            if (i >= 2)
              return H.ioore(t3, i);
            t9 = t3[i].localPoint.storage;
            t10 = t9[0];
            t12 = t2[2];
            t13 = t9[1];
            t4[0] = t6 + t8 * t10 + t12 * t13;
            t4[1] = t1[1] + t2[1] * t9[0] + t2[3] * t13;
            t13 = t4[0];
            t9 = t11[0];
            t12 = t7[0];
            t10 = t4[1];
            t8 = t11[1];
            t6 = t7[1];
            scalar = radiusB - ((t13 - t9) * t12 + (t10 - t8) * t6);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$x$x(t5[i], (-t12 * radiusA + t13 + (t12 * scalar + t13)) * 0.5);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$y$x(t5[i], (-t6 * radiusA + t10 + (t6 * scalar + t10)) * 0.5);
          }
          t7[0] = -t7[0];
          t7[1] = -t7[1];
          break;
        default:
      }
    },
    static: {WorldManifold$: function() {
        var t1, t2, t3;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        return new V.WorldManifold(new T.Vector2(t1), P.List_List$generate(2, new V.WorldManifold_closure(), true, T.Vector2), new T.Vector2(t2), new T.Vector2(t3));
      }}
  },
  WorldManifold_closure: {
    "": "Closure:15;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  Sweep: {
    "": "Object;localCenter<,centerZero<,center,angleZero,angle",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.localCenter === other.get$localCenter() && this.centerZero === other.get$centerZero() && this.center === other.center && this.angleZero === other.angleZero && this.angle === other.angle;
    },
    setFrom$1: function(other) {
      this.localCenter.setFrom$1(other.localCenter);
      this.centerZero.setFrom$1(other.centerZero);
      this.center.setFrom$1(other.center);
      this.angleZero = other.angleZero;
      this.angle = other.angle;
    },
    normalize$0: function() {
      var d = 6.283185307179586 * C.JSNumber_methods.toInt$0(Math.floor(this.angleZero / 6.283185307179586));
      this.angleZero = this.angleZero - d;
      this.angle = this.angle - d;
    },
    getTransform$2: function(xf, alpha) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = 1 - alpha;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t4 = xf.position.storage;
      t4[0] = t1 * t2[0] + alpha * t3[0];
      t4[1] = t1 * t2[1] + alpha * t3[1];
      t3 = xf.rotation;
      t3.setRotation$1(t1 * this.angleZero + alpha * this.angle);
      t1 = t4[0];
      t3 = t3.storage;
      t2 = t3[0];
      t5 = this.localCenter.storage;
      t6 = t5[0];
      t7 = t3[2];
      t8 = t5[1];
      t4[0] = t1 - (t2 * t6 + t7 * t8);
      t4[1] = t4[1] - (t3[1] * t5[0] + t3[3] * t8);
    },
    advance$1: function(time) {
      var t1, t2, t3;
      t1 = 1 - time;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t2[0] = t1 * t2[0] + time * t3[0];
      t2[1] = t1 * t2[1] + time * t3[1];
      this.angleZero = t1 * this.angleZero + time * this.angle;
    },
    static: {Sweep$: function() {
        return new V.Sweep(new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), 0, 0);
      }}
  },
  Transform: {
    "": "Object;position>,rotation<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.position === J.get$position$x(other) && this.rotation === other.get$rotation();
    },
    static: {Transform$0: function() {
        return new V.Transform(new T.Vector2(new Float32Array(2)), new T.Matrix2(new Float32Array(4)));
      }, Transform_mulToOut: function(transform, vector, out) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = transform.position.storage;
        t2 = t1[1];
        t3 = transform.rotation.storage;
        t4 = t3[1];
        t5 = J.getInterceptor$x(vector);
        t6 = t5.get$x(vector);
        if (typeof t6 !== "number")
          return H.iae(t6);
        t7 = t3[3];
        t8 = t5.get$y(vector);
        if (typeof t8 !== "number")
          return H.iae(t8);
        t1 = t1[0];
        t9 = t3[0];
        t10 = t5.get$x(vector);
        if (typeof t10 !== "number")
          return H.iae(t10);
        t3 = t3[2];
        t5 = t5.get$y(vector);
        if (typeof t5 !== "number")
          return H.iae(t5);
        t11 = J.getInterceptor$x(out);
        t11.set$x(out, t1 + t9 * t10 + t3 * t5);
        t11.set$y(out, t2 + t4 * t6 + t7 * t8);
      }}
  },
  Body: {
    "": "Object;world,flags<,contactList<,sleepTime,userData,_linearVelocity,_angularVelocity,mass,invMass,next,prev,fixtureList,fixtureCount,jointList,_force,_torque,_inertia,invInertia,linearDamping,angularDamping,_type<,islandIndex,originTransform,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
    createFixture$1: function(def) {
      var t1, t2, fixture, t3, broadPhase, node;
      t1 = V.AxisAlignedBox$(null, null);
      t2 = new V.Filter(0, 0, 0);
      fixture = new V.Fixture(t1, null, null, null, null, null, null, null, t2, null, null, V.AxisAlignedBox$(null, null), V.AxisAlignedBox$(null, null));
      fixture.userData = def.userData;
      fixture.friction = def.friction;
      fixture.restitution = def.restitution;
      fixture.body = this;
      fixture.next = null;
      t2.setFrom$1(def.filter);
      fixture.isSensor = def.isSensor;
      t2 = def.shape;
      t2 = t2.clone$0(t2);
      fixture.shape = t2;
      fixture.density = def.density;
      t3 = this.flags;
      if (typeof t3 !== "number")
        return t3.$and();
      if ((t3 & 32) === 32) {
        broadPhase = this.world._contactManager.broadPhase;
        t2.computeAxisAlignedBox$2(t1, this.originTransform);
        node = broadPhase._tree.createProxy$2(t1, fixture);
        broadPhase.proxyCount = broadPhase.proxyCount + 1;
        broadPhase.moveBuffer.push(node);
        fixture.proxy = node;
      }
      fixture.next = this.fixtureList;
      this.fixtureList = fixture;
      this.fixtureCount = this.fixtureCount + 1;
      fixture.body = this;
      t1 = fixture.density;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        this.resetMassData$0();
      t1 = this.world;
      t1._flags = t1._flags | 1;
      return fixture;
    },
    setTransform$2: function(_, argPosition, argAngle) {
      var t1, t2, t3, broadPhase, f;
      if ((this.world._flags & 2) === 2)
        return;
      t1 = this.originTransform;
      t1.rotation.setRotation$1(argAngle);
      t1.position.setFrom$1(argPosition);
      t2 = this.sweep;
      t3 = t2.centerZero;
      V.Transform_mulToOut(t1, t2.localCenter, t3);
      t2.center.setFrom$1(t3);
      t2.angleZero = argAngle;
      t2.angle = argAngle;
      broadPhase = this.world._contactManager.broadPhase;
      for (f = this.fixtureList; f != null; f = f.next)
        f.synchronize$3(broadPhase, t1, t1);
      t1 = this.world._contactManager;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
    },
    get$position: function(_) {
      return this.originTransform.position;
    },
    get$localCenter: function() {
      return this.sweep.localCenter;
    },
    applyForce$2: function(force, point) {
      var t1, t2, t3;
      if (this._type !== 2)
        return;
      this.set$awake(true);
      t1 = this._force.storage;
      t2 = force.storage;
      t1[0] = t1[0] + t2[0];
      t1[1] = t1[1] + t2[1];
      t1 = point.storage;
      t3 = this.sweep.center.storage;
      this._torque = this._torque + ((t1[0] - t3[0]) * t2[1] - (t1[1] - t3[1]) * t2[0]);
    },
    resetMassData$0: function() {
      var t1, t2, t3, massData, f, t4, t5, t6, temp;
      this.mass = 0;
      this.invMass = 0;
      this._inertia = 0;
      this.invInertia = 0;
      t1 = this.sweep;
      t2 = t1.localCenter;
      t2.setZero$0();
      t3 = this._type;
      if (t3 === 0 || t3 === 1) {
        t2 = this.originTransform.position;
        t1.center.setFrom$1(t2);
        t1.centerZero.setFrom$1(t2);
        return;
      }
      t3 = this.tempCenter;
      t3.setZero$0();
      massData = this._pmd;
      for (f = this.fixtureList, t4 = massData.center.storage; f != null; f = f.next) {
        t5 = f.density;
        if (t5 === 0)
          continue;
        f.shape.computeMass$2(massData, t5);
        this.mass = this.mass + massData.mass;
        t5 = new Float32Array(2);
        t5[1] = t4[1];
        t5[0] = t4[0];
        t6 = massData.mass;
        t5[1] = t5[1] * t6;
        t5[0] = t5[0] * t6;
        t3.add$1(t3, new T.Vector2(t5));
        this._inertia = this._inertia + massData.inertia;
      }
      t4 = this.mass;
      if (t4 > 0) {
        t4 = 1 / t4;
        this.invMass = t4;
        t3.scale$1(t3, t4);
      } else {
        this.mass = 1;
        this.invMass = 1;
      }
      t4 = this._inertia;
      if (t4 > 0) {
        t5 = this.flags;
        if (typeof t5 !== "number")
          return t5.$and();
        t5 = (t5 & 16) === 0;
      } else
        t5 = false;
      if (t5) {
        t4 -= this.mass * t3.dot$1(t3);
        this._inertia = t4;
        this.invInertia = 1 / t4;
      } else {
        this._inertia = 0;
        this.invInertia = 0;
      }
      t4 = this.oldCenter;
      t5 = t1.center;
      t4.setFrom$1(t5);
      t2.setFrom$1(t3);
      t1 = t1.centerZero;
      V.Transform_mulToOut(this.originTransform, t2, t1);
      t5.setFrom$1(t1);
      temp = new T.Vector2(new Float32Array(2));
      temp.setFrom$1(t5);
      temp.sub$1(t4);
      V.Vector2_crossVectorAndNumToOut(temp, -this._angularVelocity, temp);
      t4 = this._linearVelocity;
      t4.add$1(t4, temp);
    },
    get$type: function(_) {
      return this._type;
    },
    set$awake: function(flag) {
      var t1;
      if (flag) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 2) === 0) {
          this.flags = t1 | 2;
          this.sleepTime = 0;
        }
      } else {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        this.flags = t1 & 4294967293;
        this.sleepTime = 0;
        this._linearVelocity.setZero$0();
        this._angularVelocity = 0;
        this._force.setZero$0();
        this._torque = 0;
      }
    },
    get$awake: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) === 2;
    },
    synchronizeFixtures$0: function() {
      var xf1, t1, t2, t3, broadPhase, f;
      xf1 = this._pxf;
      t1 = xf1.rotation;
      t2 = this.sweep;
      t1.setRotation$1(t2.angleZero);
      t3 = xf1.position;
      t1.transformed$2(t2.localCenter, t3);
      t3.scale$1(t3, -1);
      t3.add$1(t3, t2.centerZero);
      broadPhase = this.world._contactManager.broadPhase;
      for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.next)
        f.synchronize$3(broadPhase, xf1, t1);
    },
    synchronizeTransform$0: function() {
      var t1, t2, c, s, t, r, t3, t4, t5, t6, t7, t8;
      t1 = this.sweep;
      t2 = t1.angle;
      c = Math.cos(t2);
      t2 = t1.angle;
      s = Math.sin(t2);
      t = this.originTransform;
      r = t.rotation;
      r.setValues$4(c, s, -s, c);
      t2 = r.storage;
      t3 = t2[0];
      t4 = t1.localCenter.storage;
      t5 = t4[0];
      t6 = t2[2];
      t7 = t4[1];
      t1 = t1.center.storage;
      t8 = t.position.storage;
      t8[0] = (t3 * t5 + t6 * t7) * -1 + t1[0];
      t8[1] = (t2[1] * t4[0] + t2[3] * t7) * -1 + t1[1];
    },
    shouldCollide$1: function(other) {
      return !(this._type !== 2 && other.get$_type() !== 2);
    },
    Body$2: function(bd, world) {
      var t1, t2, t3, t4;
      if (bd.bullet) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 8;
      }
      if (bd.fixedRotation) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 16;
      }
      if (bd.allowSleep) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 4;
      }
      if (bd.awake) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 2;
      }
      if (bd.active) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 32;
      }
      t1 = this.originTransform;
      t1.position.setFrom$1(bd.position);
      t1.rotation.setRotation$1(bd.angle);
      t2 = this.sweep;
      t3 = t2.localCenter;
      t3.setZero$0();
      t4 = t2.centerZero;
      V.Transform_mulToOut(t1, t3, t4);
      t2.center.setFrom$1(t4);
      t4 = bd.angle;
      t2.angle = t4;
      t2.angleZero = t4;
      if (this._type === 2) {
        this.mass = 1;
        this.invMass = 1;
      } else {
        this.mass = 0;
        this.invMass = 0;
      }
    },
    static: {"": "Body_ISLAND_FLAG,Body_AWAKE_FLAG,Body_AUTO_SLEEP_FLAG,Body_BULLET_FLAG,Body_FIXED_ROTATION_FLAG,Body_ACTIVE_FLAG,Body_TO_I_FLAG"}
  },
  BodyDef: {
    "": "Object;type,angle,userData,position>,linearVelocity,angularVelocity,fixedRotation,isSleeping,bullet,allowSleep,linearDamping,angularDamping,awake,active",
    static: {BodyDef$: function() {
        return new V.BodyDef(0, 0, null, new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), 0, false, null, false, true, 0, 0, true, true);
      }}
  },
  ContactManager: {
    "": "Object;broadPhase,contactList,contactCount,contactFilter,contactListener,pool",
    _addPair$2: [function(fixtureA, fixtureB) {
      var bodyA, bodyB, edge, t1, fA, fB, c, t2;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      if (bodyA == null ? bodyB == null : bodyA === bodyB)
        return;
      edge = bodyB.get$contactList();
      for (; edge != null;) {
        t1 = edge.other;
        if (t1 == null ? bodyA == null : t1 === bodyA) {
          t1 = edge.contact;
          fA = t1.fixtureA;
          fB = t1.fixtureB;
          if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
            return;
          if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
            return;
        }
        edge = edge.next;
      }
      if (!bodyB.shouldCollide$1(bodyA))
        return;
      if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
        return;
      c = this.pool.popContact$2(fixtureA, fixtureB);
      fixtureA = c.fixtureA;
      fixtureB = c.fixtureB;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      c.prev = null;
      t1 = this.contactList;
      c.next = t1;
      if (t1 != null)
        t1.prev = c;
      this.contactList = c;
      t1 = c.edge1;
      t1.contact = c;
      t1.other = bodyB;
      t1.prev = null;
      t1.next = bodyA.get$contactList();
      t2 = bodyA.contactList;
      if (t2 != null)
        t2.prev = t1;
      bodyA.contactList = t1;
      t1 = c.edge2;
      t1.contact = c;
      t1.other = bodyA;
      t1.prev = null;
      t1.next = bodyB.get$contactList();
      t2 = bodyB.contactList;
      if (t2 != null)
        t2.prev = t1;
      bodyB.contactList = t1;
      this.contactCount = this.contactCount + 1;
    }, "call$2", "get$_addPair", 4, 0, 18],
    destroy$1: function(c) {
      var fixtureA, fixtureB, bodyA, bodyB, t1, t2, t3, type1, type2;
      fixtureA = c.fixtureA;
      fixtureB = c.fixtureB;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      t1 = c.prev;
      if (t1 != null)
        t1.next = c.next;
      t2 = c.next;
      if (t2 != null)
        t2.prev = t1;
      if (c === this.contactList)
        this.contactList = t2;
      t1 = c.edge1;
      t2 = t1.prev;
      if (t2 != null)
        t2.next = t1.next;
      t3 = t1.next;
      if (t3 != null)
        t3.prev = t2;
      if (t1 === bodyA.get$contactList())
        bodyA.contactList = t3;
      t1 = c.edge2;
      t2 = t1.prev;
      if (t2 != null)
        t2.next = t1.next;
      t3 = t1.next;
      if (t3 != null)
        t3.prev = t2;
      if (t1 === bodyB.get$contactList())
        bodyB.contactList = t3;
      if (c.manifold.pointCount > 0) {
        J.get$body$x(fixtureA).set$awake(true);
        J.get$body$x(c.fixtureB).set$awake(true);
      }
      t1 = c.fixtureA;
      type1 = t1.get$type(t1);
      t1 = c.fixtureB;
      type2 = t1.get$type(t1);
      t1 = this.pool._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >= 2)
        return H.ioore(t1, type2);
      t1[type2].creator.addFirst$1(c);
      this.contactCount = this.contactCount - 1;
    },
    collide$0: function() {
      var c, t1, t2, fixtureA, fixtureB, bodyA, bodyB, t3, c0, proxyIdA, proxyIdB;
      c = this.contactList;
      for (t1 = this.contactListener, t2 = this.contactFilter; c != null;) {
        fixtureA = c.fixtureA;
        fixtureB = c.fixtureB;
        bodyA = J.get$body$x(fixtureA);
        bodyB = J.get$body$x(fixtureB);
        if (!bodyA.get$awake() && !bodyB.get$awake()) {
          c = c.next;
          continue;
        }
        t3 = c.flags;
        if (typeof t3 !== "number")
          return t3.$and();
        if ((t3 & 8) === 8) {
          if (!bodyB.shouldCollide$1(bodyA)) {
            c0 = c.next;
            this.destroy$1(c);
            c = c0;
            continue;
          }
          if (!t2.shouldCollide$2(fixtureA, fixtureB)) {
            c0 = c.next;
            this.destroy$1(c);
            c = c0;
            continue;
          }
          t3 = c.flags;
          if (typeof t3 !== "number")
            return t3.$and();
          c.flags = t3 & 4294967287;
        }
        proxyIdA = fixtureA.get$proxy();
        proxyIdB = fixtureB.get$proxy();
        if (!V.AxisAlignedBox_testOverlap(proxyIdA.box, proxyIdB.box)) {
          c0 = c.next;
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.update$1(t1);
        c = c.next;
      }
    }
  },
  CircleContact: {
    "": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      var t1, t2, t3;
      t1 = this.pool.collision;
      t2 = this.fixtureA;
      t2 = t2.get$shape(t2);
      t3 = this.fixtureB;
      t1.collideCircles$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
    }
  },
  Contact: {
    "": "Object;manifold<",
    init$2: function(fixA, fixB) {
      var t1;
      this.flags = 0;
      this.fixtureA = fixA;
      this.fixtureB = fixB;
      this.manifold.pointCount = 0;
      this.prev = null;
      this.next = null;
      t1 = this.edge1;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      t1 = this.edge2;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      this.toiCount = 0;
    },
    update$1: function(listener) {
      var t1, t2, wasTouching, sensorA, t3, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, t4, touching, i, mp2, id2, t5, t6, t7, j, mp1, t8;
      t1 = this._oldManifold;
      t1.setFrom$1(this.manifold);
      t2 = this.flags;
      if (typeof t2 !== "number")
        return t2.$or();
      t2 |= 4;
      this.flags = t2;
      wasTouching = (t2 & 2) === 2;
      t2 = this.fixtureA;
      sensorA = t2.get$isSensor();
      t3 = this.fixtureB;
      sensorB = t3.get$isSensor();
      sensor = sensorA === true || sensorB === true;
      bodyA = t2.get$body(t2);
      bodyB = t3.get$body(t3);
      xfA = bodyA.originTransform;
      xfB = bodyB.originTransform;
      if (sensor) {
        shapeA = t2.get$shape(t2);
        shapeB = t3.get$shape(t3);
        t1 = this.pool.collision;
        t2 = t1.input;
        t2.proxyA.setFromShape$1(shapeA);
        t2.proxyB.setFromShape$1(shapeB);
        t3 = t2.transformA;
        t3.position.setFrom$1(xfA.position);
        t3.rotation.setFrom$1(xfA.rotation);
        t3 = t2.transformB;
        t3.position.setFrom$1(xfB.position);
        t3.rotation.setFrom$1(xfB.rotation);
        t2.useRadii = true;
        t3 = t1.cache;
        t3.count = 0;
        t4 = t1._pool.distance;
        t1 = t1.output;
        t4.distance$3(t1, t3, t2);
        t1 = t1.distance;
        if (typeof t1 !== "number")
          return t1.$lt();
        touching = t1 < 0.000001192;
        this.manifold.pointCount = 0;
      } else {
        this.evaluate$3(this.manifold, xfA, xfB);
        touching = this.manifold.pointCount > 0;
        for (t2 = t1.points, i = 0; t3 = this.manifold, i < t3.pointCount; ++i) {
          t3 = t3.points;
          if (i >= 2)
            return H.ioore(t3, i);
          mp2 = t3[i];
          mp2.normalImpulse = 0;
          mp2.tangentImpulse = 0;
          id2 = mp2.id;
          for (t3 = t1.pointCount, t4 = id2.features, t5 = t4.incidentEdge, t6 = t4.incidentVertex, t7 = t4.flip, j = 0; j < t3; ++j) {
            if (j >= 2)
              return H.ioore(t2, j);
            mp1 = t2[j];
            t8 = mp1.id.features;
            if (t4.referenceEdge === t8.referenceEdge && t5 === t8.incidentEdge && t6 === t8.incidentVertex && t7 === t8.flip) {
              mp2.normalImpulse = mp1.normalImpulse;
              mp2.tangentImpulse = mp1.tangentImpulse;
              break;
            }
          }
        }
        if (touching !== wasTouching) {
          bodyA.set$awake(true);
          bodyB.set$awake(true);
        }
      }
      t1 = this.flags;
      if (touching) {
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 2;
      } else {
        if (typeof t1 !== "number")
          return t1.$and();
        this.flags = t1 & 4294967293;
      }
      return;
    }
  },
  ContactConstraint: {
    "": "Object;points>,localNormal<,localPoint<,normal<,normalMass,K,bodyA@,bodyB@,type*,radius?,friction,restitution,pointCount@,manifold@",
    toString$0: function(_) {
      return "localNormal: \"" + H.S(this.localNormal) + "\", localPoint: \"" + H.S(this.localPoint) + "\" normal: \"" + H.S(this.normal) + "\", radius: \"" + H.S(this.radius) + "\" friction: \"" + H.S(this.friction) + "\" restitution: \"" + H.S(this.restitution) + "\", pointCount: \"" + this.pointCount + "\"";
    },
    static: {ContactConstraint$: function() {
        return new V.ContactConstraint(P.List_List$generate(2, new V.ContactConstraint_closure(), true, V.ContactConstraintPoint), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Matrix2(new Float32Array(4)), new T.Matrix2(new Float32Array(4)), null, null, null, null, null, null, 0, null);
      }}
  },
  ContactConstraint_closure: {
    "": "Closure:15;",
    call$1: function(i) {
      return new V.ContactConstraintPoint(new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), 0, 0, 0, 0, 0);
    }
  },
  ContactConstraintPoint: {
    "": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass<,tangentMass<,velocityBias",
    toString$0: function(_) {
      return "normal impulse: " + H.S(this.normalImpulse) + ", tangentImpulse: " + H.S(this.tangentImpulse) + ", normalMass: " + H.S(this.normalMass) + ", tangentMass: " + H.S(this.tangentMass) + ", velocityBias: " + H.S(this.velocityBias) + ", localPoint: " + H.S(this.localPoint) + ", rA: " + H.S(this.rA) + ", rB: " + H.S(this.rB);
    }
  },
  ContactEdge: {
    "": "Object;other,contact,prev,next"
  },
  ContactRegister: {
    "": "Object;creator,primary"
  },
  ContactSolver: {
    "": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
    init$3: function(contacts, contactCount, impulseRatio) {
      var t1, t2, t3, i, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, t8, friction, restitution, vA, vB, wA, wB, cc, t9, t10, t11, t12, t13, t14, t15, j, t16, cp, ccp, t17, t18, t19, t20, t21, rnA, rnB, t22, t23, t24, t25, rtA, rtB, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
      this.constraintCount = contactCount;
      t1 = this.constraints;
      t2 = t1.length;
      if (typeof contactCount !== "number")
        return H.iae(contactCount);
      if (t2 < contactCount) {
        t2 = Array(P.max(t2 * 2, contactCount));
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [V.ContactConstraint]);
        this.constraints = t2;
        t3 = t1.length;
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.ContactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      t1 = this.worldManifold;
      t2 = t1.points;
      t3 = this.tangent.storage;
      t4 = this.temp2.storage;
      t5 = this.temp1.storage;
      t6 = t1.normal.storage;
      i = 0;
      while (true) {
        t7 = this.constraintCount;
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (!(i < t7))
          break;
        if (i >= contacts.length)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.fixtureA;
        fixtureB = contact.fixtureB;
        shapeA = fixtureA.get$shape(fixtureA);
        shapeB = fixtureB.get$shape(fixtureB);
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        manifold = contact.manifold;
        t7 = fixtureA.friction;
        t8 = fixtureB.friction;
        if (typeof t7 !== "number")
          return t7.$mul();
        if (typeof t8 !== "number")
          return H.iae(t8);
        friction = Math.sqrt(t7 * t8);
        t7 = fixtureA.restitution;
        t8 = fixtureB.restitution;
        if (typeof t7 !== "number")
          return t7.$gt();
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (t7 > t8)
          restitution = t7;
        else
          restitution = t8;
        vA = bodyA._linearVelocity;
        vB = bodyB._linearVelocity;
        wA = bodyA._angularVelocity;
        wB = bodyB._angularVelocity;
        t1.initialize$5(t1, manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
        t7 = this.constraints;
        if (i >= t7.length)
          return H.ioore(t7, i);
        cc = t7[i];
        cc.set$bodyA(bodyA);
        cc.set$bodyB(bodyB);
        cc.set$manifold(manifold);
        t7 = cc.normal;
        t7 = t7.storage;
        t7[0] = t6[0];
        t7[1] = t6[1];
        cc.pointCount = manifold.pointCount;
        cc.friction = friction;
        cc.restitution = restitution;
        t8 = cc.localNormal;
        t9 = manifold.localNormal.storage;
        t8 = t8.storage;
        t8[0] = t9[0];
        t8[1] = t9[1];
        t9 = cc.localPoint;
        t8 = manifold.localPoint.storage;
        t9 = t9.storage;
        t9[0] = t8[0];
        t9[1] = t8[1];
        cc.radius = radiusA + radiusB;
        cc.type = manifold.type;
        for (t8 = manifold.points, t9 = cc.points, t10 = bodyA.sweep.center.storage, t11 = bodyB.sweep.center.storage, t12 = -wA, t13 = -wB, t14 = vB.storage, t15 = vA.storage, j = 0; t16 = cc.pointCount, j < t16; ++j) {
          if (j >= 2)
            return H.ioore(t8, j);
          cp = t8[j];
          if (j >= t9.length)
            return H.ioore(t9, j);
          ccp = t9[j];
          ccp.set$normalImpulse(impulseRatio * cp.normalImpulse);
          ccp.set$tangentImpulse(impulseRatio * cp.tangentImpulse);
          t16 = ccp.get$localPoint();
          t17 = cp.localPoint.storage;
          t16 = t16.storage;
          t16[0] = t17[0];
          t16[1] = t17[1];
          t17 = ccp.get$rA();
          if (j >= t2.length)
            return H.ioore(t2, j);
          t17.storage[0] = J.$sub$n(J.get$x$x(t2[j]), t10[0]);
          t17 = ccp.rA;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t16 = J.get$y$x(t2[j]);
          t18 = t10[1];
          if (typeof t16 !== "number")
            return t16.$sub();
          t17 = t17.storage;
          t17[1] = t16 - t18;
          t18 = ccp.rB;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t18 = t18.storage;
          t18[0] = J.$sub$n(J.get$x$x(t2[j]), t11[0]);
          if (j >= t2.length)
            return H.ioore(t2, j);
          t16 = J.get$y$x(t2[j]);
          t19 = t11[1];
          if (typeof t16 !== "number")
            return t16.$sub();
          t18[1] = t16 - t19;
          t19 = t17[0];
          t16 = t7[1];
          t20 = t17[1];
          t21 = t7[0];
          rnA = t19 * t16 - t20 * t21;
          rnB = t18[0] * t16 - t18[1] * t21;
          t21 = bodyA.invMass;
          t20 = bodyB.invMass;
          t19 = bodyA.invInertia;
          t22 = bodyB.invInertia;
          ccp.normalMass = 1 / (t21 + t20 + t19 * (rnA * rnA) + t22 * (rnB * rnB));
          t3[0] = 1 * t16;
          t3[1] = -1 * t7[0];
          t16 = t17[0];
          t23 = t3[1];
          t24 = t17[1];
          t25 = t3[0];
          rtA = t16 * t23 - t24 * t25;
          rtB = t18[0] * t23 - t18[1] * t25;
          ccp.tangentMass = 1 / (t21 + t20 + t19 * (rtA * rtA) + t22 * (rtB * rtB));
          ccp.velocityBias = 0;
          t4[0] = t12 * t24;
          t4[1] = wA * t17[0];
          t5[0] = t13 * t18[1] + t14[0] - t15[0] - t4[0];
          t5[1] = wB * t18[0] + t14[1] - t15[1] - t4[1];
          vRel = t7[0] * t5[0] + t7[1] * t5[1];
          if (vRel < -1)
            ccp.velocityBias = -restitution * vRel;
        }
        if (t16 === 2) {
          t8 = t9.length;
          if (0 >= t8)
            return H.ioore(t9, 0);
          ccp1 = t9[0];
          if (1 >= t8)
            return H.ioore(t9, 1);
          ccp2 = t9[1];
          invMassA = bodyA.invMass;
          invIA = bodyA.invInertia;
          invMassB = bodyB.invMass;
          invIB = bodyB.invInertia;
          t9 = ccp1.get$rA().storage;
          t8 = t9[0];
          t10 = t7[1];
          t9 = t9[1];
          t7 = t7[0];
          rn1A = t8 * t10 - t9 * t7;
          t9 = ccp1.get$rB().storage;
          rn1B = t9[0] * t10 - t9[1] * t7;
          t9 = ccp2.get$rA().storage;
          rn2A = t9[0] * t10 - t9[1] * t7;
          t9 = ccp2.get$rB().storage;
          rn2B = t9[0] * t10 - t9[1] * t7;
          t7 = invMassA + invMassB;
          t9 = invIA * rn1A;
          t10 = invIB * rn1B;
          k11 = t7 + t9 * rn1A + t10 * rn1B;
          k22 = t7 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
          k12 = t7 + t9 * rn2A + t10 * rn2B;
          if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
            t7 = cc.K.storage;
            t7[3] = k22;
            t7[2] = k12;
            t7[1] = k12;
            t7[0] = k11;
            t7 = cc.normalMass;
            t8 = t7.storage;
            t8[3] = k22;
            t8[2] = k12;
            t8[1] = k12;
            t8[0] = k11;
            t7.invert$0();
          } else
            cc.pointCount = 1;
        }
        ++i;
      }
    },
    warmStart$0: function() {
      var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t3, j, ccp, t4, t5, t6, Px, Py;
      t1 = this.tangent.storage;
      i = 0;
      while (true) {
        t2 = this.constraintCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = this.constraints;
        if (i >= t2.length)
          return H.ioore(t2, i);
        c = t2[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t2 = c.get$normal().storage;
        t3 = t2[0];
        t1[0] = 1 * t2[1];
        t1[1] = -1 * t3;
        for (t3 = c.points, j = 0; j < c.pointCount; ++j) {
          if (j >= t3.length)
            return H.ioore(t3, j);
          ccp = t3[j];
          t4 = ccp.get$normalImpulse();
          t5 = t2[0];
          t6 = ccp.get$tangentImpulse();
          Px = t4 * t5 + t6 * t1[0];
          Py = t4 * t2[1] + t6 * t1[1];
          t6 = bodyA._angularVelocity - invIA * (ccp.get$rA().storage[0] * Py - ccp.rA.storage[1] * Px);
          if (bodyA._type !== 0) {
            if (t6 * t6 > 0)
              bodyA.set$awake(true);
            bodyA._angularVelocity = t6;
          }
          t4 = bodyA._linearVelocity.storage;
          t4[0] = t4[0] - Px * invMassA;
          t4[1] = t4[1] - Py * invMassA;
          t4 = ccp.rB.storage;
          t4 = bodyB._angularVelocity + invIB * (t4[0] * Py - t4[1] * Px);
          if (bodyB._type !== 0) {
            if (t4 * t4 > 0)
              bodyB.set$awake(true);
            bodyB._angularVelocity = t4;
          }
          t4 = bodyB._linearVelocity.storage;
          t4[0] = t4[0] + Px * invMassB;
          t4[1] = t4[1] + Py * invMassB;
        }
        ++i;
      }
    },
    solveVelocityConstraints$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, i, t16, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, t17, t18, t19, j, t20, ccp, a, t21, t22, t23, t24, t25, maxFriction, newImpulse, lambda, Px, Py, a1, cp2, t26, t27, t28, t29, t30, t31, t32, vn1, vn2;
      t1 = this.dv1.storage;
      t2 = this.dv2.storage;
      t3 = this.temp2;
      t4 = t3.storage;
      t5 = this.dv.storage;
      t6 = this.tangent.storage;
      t7 = this.x;
      t8 = t7.storage;
      t9 = this.d;
      t10 = t9.storage;
      t11 = this.P1.storage;
      t12 = this.P2;
      t13 = t12.storage;
      t14 = this.temp1;
      t15 = t14.storage;
      i = 0;
      while (true) {
        t16 = this.constraintCount;
        if (typeof t16 !== "number")
          return H.iae(t16);
        if (!(i < t16))
          break;
        t16 = this.constraints;
        if (i >= t16.length)
          return H.ioore(t16, i);
        c = t16[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        wA = bodyA._angularVelocity;
        wB = bodyB._angularVelocity;
        vA = bodyA._linearVelocity;
        vB = bodyB._linearVelocity;
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t6[0] = 1 * c.get$normal().storage[1];
        t16 = c.normal.storage;
        t6[1] = -1 * t16[0];
        friction = c.friction;
        for (t17 = c.points, t18 = vB.storage, t19 = vA.storage, j = 0; t20 = c.pointCount, j < t20; ++j) {
          if (j >= t17.length)
            return H.ioore(t17, j);
          ccp = t17[j];
          a = ccp.get$rA();
          t20 = ccp.get$rB().storage;
          t21 = a.storage;
          t5[0] = -wB * t20[1] + t18[0] - t19[0] + wA * t21[1];
          t5[1] = wB * t20[0] + t18[1] - t19[1] - wA * t21[0];
          t21 = t5[0];
          t20 = t6[0];
          t22 = t5[1];
          t23 = t6[1];
          t24 = ccp.get$tangentMass();
          t25 = ccp.normalImpulse;
          if (typeof friction !== "number")
            return friction.$mul();
          maxFriction = friction * t25;
          newImpulse = P.max(-maxFriction, P.min(ccp.tangentImpulse + t24 * -(t21 * t20 + t22 * t23), maxFriction));
          lambda = newImpulse - ccp.tangentImpulse;
          Px = t6[0] * lambda;
          Py = t6[1] * lambda;
          t19[0] = t19[0] - Px * invMassA;
          t19[1] = t19[1] - Py * invMassA;
          t23 = ccp.rA.storage;
          wA -= invIA * (t23[0] * Py - t23[1] * Px);
          t18[0] = t18[0] + Px * invMassB;
          t18[1] = t18[1] + Py * invMassB;
          t23 = ccp.rB.storage;
          wB += invIB * (t23[0] * Py - t23[1] * Px);
          ccp.tangentImpulse = newImpulse;
        }
        t21 = -wB;
        t22 = t17.length;
        ccp = t17[0];
        if (t20 === 1) {
          if (0 >= t22)
            return H.ioore(t17, 0);
          a1 = ccp.get$rA();
          t17 = ccp.get$rB().storage;
          t20 = a1.storage;
          t5[0] = t21 * t17[1] + t18[0] - t19[0] + wA * t20[1];
          t5[1] = wB * t17[0] + t18[1] - t19[1] - wA * t20[0];
          t20 = t5[0];
          t17 = t16[0];
          t21 = t5[1];
          t16 = t16[1];
          t22 = ccp.get$normalMass();
          t23 = ccp.velocityBias;
          t24 = ccp.normalImpulse;
          a = t24 + -t22 * (t20 * t17 + t21 * t16 - t23);
          newImpulse = a > 0 ? a : 0;
          lambda = newImpulse - t24;
          Px = t17 * lambda;
          Py = t16 * lambda;
          t19[0] = t19[0] - Px * invMassA;
          t19[1] = t19[1] - Py * invMassA;
          t16 = ccp.rA.storage;
          wA -= invIA * (t16[0] * Py - t16[1] * Px);
          t18[0] = t18[0] + Px * invMassB;
          t18[1] = t18[1] + Py * invMassB;
          t16 = ccp.rB.storage;
          wB += invIB * (t16[0] * Py - t16[1] * Px);
          ccp.normalImpulse = newImpulse;
        } else {
          if (0 >= t22)
            return H.ioore(t17, 0);
          if (1 >= t22)
            return H.ioore(t17, 1);
          cp2 = t17[1];
          t17 = ccp.get$normalImpulse();
          t20 = cp2.get$normalImpulse();
          t22 = new Float32Array(2);
          a = new T.Vector2(t22);
          t22[0] = t17;
          t22[1] = t20;
          t20 = ccp.rA.storage;
          t1[0] = t21 * ccp.get$rB().storage[1] + t18[0] - t19[0] + wA * t20[1];
          t17 = ccp.rB.storage;
          t1[1] = wB * t17[0] + t18[1] - t19[1] - wA * t20[0];
          t23 = cp2.rA.storage;
          t2[0] = t21 * cp2.get$rB().storage[1] + t18[0] - t19[0] + wA * t23[1];
          t21 = cp2.rB.storage;
          t2[1] = wB * t21[0] + t18[1] - t19[1] - wA * t23[0];
          t24 = t1[0];
          t25 = t16[0];
          t26 = t1[1];
          t27 = t16[1];
          t28 = t2[0];
          t29 = t2[1];
          t30 = ccp.velocityBias;
          t31 = cp2.velocityBias;
          t32 = new Float32Array(2);
          t32[0] = t24 * t25 + t26 * t27 - t30;
          t32[1] = t28 * t25 + t29 * t27 - t31;
          t31 = c.K.storage;
          t27 = t31[0];
          t29 = t22[0];
          t25 = t31[2];
          t28 = t22[1];
          t4[0] = t27 * t29 + t25 * t28;
          t4[1] = t31[1] * t22[0] + t31[3] * t28;
          t32[0] = t32[0] - t4[0];
          t32[1] = t32[1] - t4[1];
          $loop$1: {
            t22 = c.normalMass;
            t8[1] = t32[1];
            t8[0] = t32[0];
            t22.transform$1(t22, t7);
            t8[1] = t8[1] * -1;
            t8[0] = t8[0] * -1;
            t22 = t8[0];
            if (t22 >= 0 && t8[1] >= 0) {
              t10[1] = t8[1];
              t10[0] = t22;
              t9.sub$1(a);
              t11[1] = t16[1];
              t11[0] = t16[0];
              t22 = t10[0];
              t11[1] = t11[1] * t22;
              t11[0] = t11[0] * t22;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(t14, t12);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassA;
              t4[0] = t4[0] * invMassA;
              vA.sub$1(t3);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassB;
              t4[0] = t4[0] * invMassB;
              vB.add$1(vB, t3);
              t16 = t20[0];
              t22 = t11[1];
              t20 = t20[1];
              t24 = t11[0];
              t25 = t23[0];
              t26 = t13[1];
              t23 = t23[1];
              t27 = t13[0];
              wA -= invIA * (t16 * t22 - t20 * t24 + (t25 * t26 - t23 * t27));
              wB += invIB * (t17[0] * t22 - t17[1] * t24 + (t21[0] * t26 - t21[1] * t27));
              ccp.normalImpulse = t8[0];
              cp2.normalImpulse = t8[1];
              break $loop$1;
            }
            t8[0] = -ccp.normalMass * t32[0];
            t8[1] = 0;
            t22 = t31[1];
            t24 = t8[0];
            t25 = t32[1];
            if (t24 >= 0 && t22 * t24 + t25 >= 0) {
              t10[1] = t8[1];
              t10[0] = t24;
              t9.sub$1(a);
              t11[1] = t16[1];
              t11[0] = t16[0];
              t22 = t10[0];
              t11[1] = t11[1] * t22;
              t11[0] = t11[0] * t22;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(t14, t12);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassA;
              t4[0] = t4[0] * invMassA;
              vA.sub$1(t3);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassB;
              t4[0] = t4[0] * invMassB;
              vB.add$1(vB, t3);
              t16 = t20[0];
              t22 = t11[1];
              t20 = t20[1];
              t24 = t11[0];
              t25 = t23[0];
              t26 = t13[1];
              t23 = t23[1];
              t27 = t13[0];
              wA -= invIA * (t16 * t22 - t20 * t24 + (t25 * t26 - t23 * t27));
              wB += invIB * (t17[0] * t22 - t17[1] * t24 + (t21[0] * t26 - t21[1] * t27));
              ccp.normalImpulse = t8[0];
              cp2.normalImpulse = t8[1];
              break $loop$1;
            }
            t8[0] = 0;
            t8[1] = -cp2.normalMass * t25;
            t22 = t31[2];
            t24 = t8[1];
            t25 = t32[0];
            if (t24 >= 0 && t22 * t24 + t25 >= 0) {
              t10[1] = t24;
              t10[0] = t8[0];
              t9.sub$1(a);
              t11[1] = t16[1];
              t11[0] = t16[0];
              t22 = t10[0];
              t11[1] = t11[1] * t22;
              t11[0] = t11[0] * t22;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(t14, t12);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassA;
              t4[0] = t4[0] * invMassA;
              vA.sub$1(t3);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassB;
              t4[0] = t4[0] * invMassB;
              vB.add$1(vB, t3);
              t16 = t20[0];
              t22 = t11[1];
              t20 = t20[1];
              t24 = t11[0];
              t25 = t23[0];
              t26 = t13[1];
              t23 = t23[1];
              t27 = t13[0];
              wA -= invIA * (t16 * t22 - t20 * t24 + (t25 * t26 - t23 * t27));
              wB += invIB * (t17[0] * t22 - t17[1] * t24 + (t21[0] * t26 - t21[1] * t27));
              ccp.normalImpulse = t8[0];
              cp2.normalImpulse = t8[1];
              break $loop$1;
            }
            t8[0] = 0;
            t8[1] = 0;
            vn1 = t32[0];
            vn2 = t32[1];
            if (vn1 >= 0 && vn2 >= 0) {
              t10[1] = t8[1];
              t10[0] = t8[0];
              t9.sub$1(a);
              t11[1] = t16[1];
              t11[0] = t16[0];
              t17 = t10[0];
              t11[1] = t11[1] * t17;
              t11[0] = t11[0] * t17;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(t14, t12);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassA;
              t4[0] = t4[0] * invMassA;
              vA.sub$1(t3);
              t4[1] = t15[1];
              t4[0] = t15[0];
              t4[1] = t4[1] * invMassB;
              t4[0] = t4[0] * invMassB;
              vB.add$1(vB, t3);
              t16 = t20[0];
              t17 = t11[1];
              t20 = t20[1];
              t22 = t11[0];
              t24 = t23[0];
              t25 = t13[1];
              t23 = t23[1];
              t26 = t13[0];
              wA -= invIA * (t16 * t17 - t20 * t22 + (t24 * t25 - t23 * t26));
              wB += invIB * (t24 * t17 - t23 * t22 + (t21[0] * t25 - t21[1] * t26));
              ccp.normalImpulse = t8[0];
              cp2.normalImpulse = t8[1];
              break $loop$1;
            }
            break $loop$1;
          }
        }
        t19[1] = t19[1];
        t19[0] = t19[0];
        if (bodyA._type !== 0) {
          if (wA * wA > 0)
            bodyA.set$awake(true);
          bodyA._angularVelocity = wA;
        }
        t18[1] = t18[1];
        t18[0] = t18[0];
        if (bodyB._type !== 0) {
          if (wB * wB > 0)
            bodyB.set$awake(true);
          bodyB._angularVelocity = wB;
        }
        ++i;
      }
    },
    storeImpulses$0: function() {
      var i, t1, c, m, t2, j, t3, t4, t5;
      i = 0;
      while (true) {
        t1 = this.constraintCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.constraints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        c = t1[i];
        m = c.get$manifold();
        for (t1 = c.points, t2 = m.points, j = 0; j < c.get$pointCount(); ++j) {
          if (j >= 2)
            return H.ioore(t2, j);
          t3 = t2[j];
          t4 = t1.length;
          if (j >= t4)
            return H.ioore(t1, j);
          t5 = t1[j];
          t3.normalImpulse = t5.get$normalImpulse();
          if (j >= t4)
            return H.ioore(t1, j);
          t3.tangentImpulse = t5.get$tangentImpulse();
        }
        ++i;
      }
    },
    solvePositionConstraints$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, psm, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, minSeparation, i, t21, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, j, t22, t23, separation, t24, t25, $C, t26, t27, t28, t29, rnA, rnB, $K, impulse;
      t1 = this.P.storage;
      t2 = this.temp1;
      t3 = t2.storage;
      t4 = this.rA;
      t5 = t4.storage;
      t6 = this.rB;
      t7 = t6.storage;
      psm = this.psolver;
      t8 = psm.planePoint;
      t9 = psm.clipPoint;
      t10 = psm.temp;
      t11 = t10.storage;
      t12 = t9.storage;
      t13 = psm.normal;
      t14 = psm.point;
      t15 = t14.storage;
      t16 = t13.storage;
      t17 = psm.pointA;
      t18 = t17.storage;
      t19 = psm.pointB;
      t20 = t19.storage;
      minSeparation = 0;
      i = 0;
      while (true) {
        t21 = this.constraintCount;
        if (typeof t21 !== "number")
          return H.iae(t21);
        if (!(i < t21))
          break;
        t21 = this.constraints;
        if (i >= t21.length)
          return H.ioore(t21, i);
        c = t21[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        t21 = bodyA.mass;
        invMassA = t21 * bodyA.invMass;
        invIA = t21 * bodyA.invInertia;
        t21 = bodyB.mass;
        invMassB = t21 * bodyB.invMass;
        invIB = t21 * bodyB.invInertia;
        for (t21 = invMassA + invMassB, j = 0; j < c.get$pointCount(); ++j) {
          switch (c.get$type(c)) {
            case 0:
              t22 = c.get$bodyA();
              t23 = c.get$localPoint();
              V.Transform_mulToOut(t22.originTransform, t23, t17);
              t23 = c.get$bodyB();
              t22 = c.get$points(c);
              if (0 >= t22.length)
                return H.ioore(t22, 0);
              t22 = t22[0].get$localPoint();
              V.Transform_mulToOut(t23.originTransform, t22, t19);
              if (V.MathBox_distanceSquared(t17, t19) > 1.4208639999999999e-14) {
                t16[1] = t20[1];
                t16[0] = t20[0];
                t13.sub$1(t17);
                t13.normalize$0();
              } else {
                t16[0] = 1;
                t16[1] = 0;
              }
              t15[1] = t18[1];
              t15[0] = t18[0];
              t22 = t14.add$1(t14, t19).storage;
              t22[1] = t22[1] * 0.5;
              t22[0] = t22[0] * 0.5;
              t11[1] = t20[1];
              t11[0] = t20[0];
              t10.sub$1(t17);
              t22 = t10.dot$1(t13);
              t23 = c.radius;
              if (typeof t23 !== "number")
                return H.iae(t23);
              psm.separation = t22 - t23;
              break;
            case 1:
              t22 = c.get$bodyA();
              t23 = c.get$localNormal();
              t22 = t22.originTransform.rotation;
              t23 = t23.storage;
              t16[1] = t23[1];
              t16[0] = t23[0];
              t22.transform$1(t22, t13);
              t22 = c.get$bodyA();
              t23 = c.get$localPoint();
              V.Transform_mulToOut(t22.originTransform, t23, t8);
              t23 = c.get$bodyB();
              t22 = c.get$points(c);
              if (j >= t22.length)
                return H.ioore(t22, j);
              t22 = t22[j].get$localPoint();
              V.Transform_mulToOut(t23.originTransform, t22, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t22 = t10.dot$1(t13);
              t23 = c.radius;
              if (typeof t23 !== "number")
                return H.iae(t23);
              psm.separation = t22 - t23;
              t15[1] = t12[1];
              t15[0] = t12[0];
              break;
            case 2:
              t22 = c.get$bodyB();
              t23 = c.get$localNormal();
              t22 = t22.originTransform.rotation;
              t23 = t23.storage;
              t16[1] = t23[1];
              t16[0] = t23[0];
              t22.transform$1(t22, t13);
              t22 = c.get$bodyB();
              t23 = c.get$localPoint();
              V.Transform_mulToOut(t22.originTransform, t23, t8);
              t23 = c.get$bodyA();
              t22 = c.get$points(c);
              if (j >= t22.length)
                return H.ioore(t22, j);
              t22 = t22[j].get$localPoint();
              V.Transform_mulToOut(t23.originTransform, t22, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t22 = t10.dot$1(t13);
              t23 = c.radius;
              if (typeof t23 !== "number")
                return H.iae(t23);
              psm.separation = t22 - t23;
              t15[1] = t12[1];
              t15[0] = t12[0];
              t16[1] = -t16[1];
              t16[0] = -t16[0];
              break;
            default:
          }
          separation = psm.separation;
          t5[1] = t15[1];
          t5[0] = t15[0];
          t22 = bodyA.sweep;
          t23 = t22.center;
          t4.sub$1(t23);
          t7[1] = t15[1];
          t7[0] = t15[0];
          t24 = bodyB.sweep;
          t25 = t24.center;
          t6.sub$1(t25);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t26 = t5[0];
          t27 = t16[1];
          t28 = t5[1];
          t29 = t16[0];
          rnA = t26 * t27 - t28 * t29;
          rnB = t7[0] * t27 - t7[1] * t29;
          $K = t21 + invIA * rnA * rnA + invIB * rnB * rnB;
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t27;
          t1[0] = t29;
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassA;
          t3[0] = t3[0] * invMassA;
          t23.sub$1(t2);
          t22.angle = t22.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassB;
          t3[0] = t3[0] * invMassB;
          t25.add$1(t25, t2);
          t24.angle = t24.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
          bodyB.synchronizeTransform$0();
        }
        ++i;
      }
      return minSeparation >= -0.0075;
    },
    static: {"": "ContactSolver_INITIAL_NUM_CONSTRAINTS,ContactSolver_K_MAX_CONDITION_NUMBER", ContactSolver$: function() {
        return new V.ContactSolver(P.List_List$generate(256, new V.ContactSolver_closure(), true, V.ContactConstraint), null, V.WorldManifold$(), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new V.PositionSolverManifold(new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), 0, new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2))), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)));
      }}
  },
  ContactSolver_closure: {
    "": "Closure:15;",
    call$1: function(i) {
      return V.ContactConstraint$();
    }
  },
  PositionSolverManifold: {
    "": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  PolygonAndCircleContact: {
    "": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      var t1, t2, t3;
      t1 = this.pool.collision;
      t2 = this.fixtureA;
      t2 = t2.get$shape(t2);
      t3 = this.fixtureB;
      t1.collidePolygonAndCircle$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
    }
  },
  PolygonContact: {
    "": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      var t1, t2, t3;
      t1 = this.pool.collision;
      t2 = this.fixtureA;
      t2 = t2.get$shape(t2);
      t3 = this.fixtureB;
      t1.collidePolygons$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
    }
  },
  TimeOfImpactConstraint: {
    "": "Object;localPoints<,localNormal<,localPoint<,type*,radius?,pointCount@,bodyA@,bodyB@",
    static: {TimeOfImpactConstraint$: function() {
        return new V.TimeOfImpactConstraint(P.List_List$generate(2, new V.TimeOfImpactConstraint_closure(), true, T.Vector2), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), 0, 0, 0, null, null);
      }}
  },
  TimeOfImpactConstraint_closure: {
    "": "Closure:15;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  TimeOfImpactSolver: {
    "": "Object;constraints,count,toiBody,psm,rA<,rB<,P,temp",
    initialize$3: function(_, contacts, argCount, argToiBody) {
      var t1, t2, t3, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp, t4;
      this.count = argCount;
      this.toiBody = argToiBody;
      t1 = this.constraints;
      t2 = t1.length;
      if (argCount >= t2) {
        t2 = Array(P.max(argCount, t2 * 2));
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [V.TimeOfImpactConstraint]);
        this.constraints = t2;
        t3 = t1.length;
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.TimeOfImpactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      for (i = 0; i < this.count; ++i) {
        if (i >= 32)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.fixtureA;
        fixtureB = contact.fixtureB;
        shapeA = fixtureA.get$shape(fixtureA);
        shapeB = fixtureB.get$shape(fixtureB);
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        manifold = contact.manifold;
        t1 = this.constraints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        constraint = t1[i];
        constraint.set$bodyA(bodyA);
        constraint.set$bodyB(bodyB);
        t1 = constraint.get$localNormal().storage;
        t2 = manifold.localNormal.storage;
        t1[1] = t2[1];
        t1[0] = t2[0];
        t2 = constraint.get$localPoint().storage;
        t1 = manifold.localPoint.storage;
        t2[1] = t1[1];
        t2[0] = t1[0];
        constraint.set$type(constraint, manifold.type);
        constraint.set$pointCount(manifold.pointCount);
        constraint.set$radius(radiusA + radiusB);
        for (t1 = constraint.get$pointCount(), t2 = manifold.points, j = 0; j < t1; ++j) {
          if (j >= 2)
            return H.ioore(t2, j);
          cp = t2[j];
          t3 = constraint.get$localPoints();
          t4 = cp.localPoint;
          if (j >= t3.length)
            return H.ioore(t3, j);
          t3[j] = t4;
        }
      }
    },
    solve$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, t8, normal, point, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, minSeparation, i, t20, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t21, t22, t23, separation, t24, $C, t25, t26, t27, t28, rnA, rnB, $K, impulse;
      for (t1 = this.P.storage, t2 = this.temp, t3 = t2.storage, t4 = this.rA, t5 = t4.storage, t6 = this.rB, t7 = t6.storage, t8 = this.psm, normal = t8.normal, point = t8.point, t9 = point.storage, t10 = normal.storage, t11 = t8.planePoint, t12 = t11.storage, t13 = t8.clipPoint.storage, t14 = t8.temp, t15 = t14.storage, t16 = t8.pointA, t17 = t16.storage, t18 = t8.pointB, t19 = t18.storage, minSeparation = 0, i = 0; i < this.count; ++i) {
        t20 = this.constraints;
        if (i >= t20.length)
          return H.ioore(t20, i);
        c = t20[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        massA = bodyA.mass;
        massB = bodyB.mass;
        t20 = this.toiBody;
        if (bodyA == null ? t20 == null : bodyA === t20)
          massB = 0;
        else
          massA = 0;
        invMassA = massA * bodyA.invMass;
        invIA = massA * bodyA.invInertia;
        invMassB = massB * bodyB.invMass;
        invIB = massB * bodyB.invInertia;
        for (t20 = invMassA + invMassB, j = 0; j < c.get$pointCount(); ++j) {
          switch (c.get$type(c)) {
            case 0:
              t21 = c.get$bodyA();
              t22 = c.get$localPoint();
              t21.toString;
              t23 = new Float32Array(2);
              V.Transform_mulToOut(t21.originTransform, t22, new T.Vector2(t23));
              t17[1] = t23[1];
              t17[0] = t23[0];
              t23 = c.get$bodyB();
              t22 = c.get$localPoints();
              if (0 >= t22.length)
                return H.ioore(t22, 0);
              t22 = t22[0];
              t23.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t23.originTransform, t22, new T.Vector2(t21));
              t19[1] = t21[1];
              t19[0] = t21[0];
              if (V.MathBox_distanceSquared(t16, t18) > 1.4208639999999999e-14) {
                t10[1] = t19[1];
                t10[0] = t19[0];
                normal.sub$1(t16);
                normal.normalize$0();
              } else {
                t10[0] = 1;
                t10[1] = 0;
              }
              t9[1] = t17[1];
              t9[0] = t17[0];
              t21 = point.add$1(point, t18).storage;
              t21[1] = t21[1] * 0.5;
              t21[0] = t21[0] * 0.5;
              t15[1] = t19[1];
              t15[0] = t19[0];
              t14.sub$1(t16);
              t8.separation = t14.dot$1(normal) - c.radius;
              break;
            case 1:
              t21 = c.get$bodyA();
              t22 = c.get$localNormal();
              t21.toString;
              t23 = new Float32Array(2);
              t21 = t21.originTransform.rotation;
              t22 = t22.storage;
              t23[1] = t22[1];
              t23[0] = t22[0];
              t21.transform$1(t21, new T.Vector2(t23));
              t10[1] = t23[1];
              t10[0] = t23[0];
              t21 = c.get$bodyA();
              t22 = c.get$localPoint();
              t21.toString;
              t23 = new Float32Array(2);
              V.Transform_mulToOut(t21.originTransform, t22, new T.Vector2(t23));
              t12[1] = t23[1];
              t12[0] = t23[0];
              t23 = c.get$bodyB();
              t22 = c.get$localPoints();
              if (j >= t22.length)
                return H.ioore(t22, j);
              t22 = t22[j];
              t23.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t23.originTransform, t22, new T.Vector2(t21));
              t13[1] = t21[1];
              t13[0] = t21[0];
              t15[1] = t13[1];
              t15[0] = t13[0];
              t14.sub$1(t11);
              t8.separation = t14.dot$1(normal) - c.radius;
              t9[1] = t13[1];
              t9[0] = t13[0];
              break;
            case 2:
              t21 = c.get$bodyB();
              t22 = c.get$localNormal();
              t21.toString;
              t23 = new Float32Array(2);
              t21 = t21.originTransform.rotation;
              t22 = t22.storage;
              t23[1] = t22[1];
              t23[0] = t22[0];
              t21.transform$1(t21, new T.Vector2(t23));
              t10[1] = t23[1];
              t10[0] = t23[0];
              t21 = c.get$bodyB();
              t22 = c.get$localPoint();
              t21.toString;
              t23 = new Float32Array(2);
              V.Transform_mulToOut(t21.originTransform, t22, new T.Vector2(t23));
              t12[1] = t23[1];
              t12[0] = t23[0];
              t23 = c.get$bodyA();
              t22 = c.get$localPoints();
              if (j >= t22.length)
                return H.ioore(t22, j);
              t22 = t22[j];
              t23.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t23.originTransform, t22, new T.Vector2(t21));
              t13[1] = t21[1];
              t13[0] = t21[0];
              t15[1] = t13[1];
              t15[0] = t13[0];
              t14.sub$1(t11);
              t8.separation = t14.dot$1(normal) - c.radius;
              t9[1] = t13[1];
              t9[0] = t13[0];
              t10[1] = -t10[1];
              t10[0] = -t10[0];
              break;
            default:
          }
          separation = t8.separation;
          t5[1] = t9[1];
          t5[0] = t9[0];
          t21 = bodyA.sweep;
          t22 = t21.center;
          t4.sub$1(t22);
          t7[1] = t9[1];
          t7[0] = t9[0];
          t23 = bodyB.sweep;
          t24 = t23.center;
          t6.sub$1(t24);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t25 = t5[0];
          t26 = t10[1];
          t27 = t5[1];
          t28 = t10[0];
          rnA = t25 * t26 - t27 * t28;
          rnB = t7[0] * t26 - t7[1] * t28;
          $K = t20 + invIA * rnA * rnA + invIB * rnB * rnB;
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t26;
          t1[0] = t28;
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassA;
          t3[0] = t3[0] * invMassA;
          t22.sub$1(t2);
          t21.angle = t21.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassB;
          t3[0] = t3[0] * invMassB;
          t24.add$1(t24, t2);
          t23.angle = t23.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
          bodyB.synchronizeTransform$0();
        }
      }
      return minSeparation >= -0.0075;
    },
    static: {TimeOfImpactSolver$: function() {
        return new V.TimeOfImpactSolver(P.List_List$generate(4, new V.TimeOfImpactSolver_closure(), true, V.TimeOfImpactConstraint), 0, null, new V.TimeOfImpactSolverManifold(new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), 0, new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2))), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)));
      }}
  },
  TimeOfImpactSolver_closure: {
    "": "Closure:15;",
    call$1: function(i) {
      return V.TimeOfImpactConstraint$();
    }
  },
  TimeOfImpactSolverManifold: {
    "": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  Filter: {
    "": "Object;categoryBits,maskBits,groupIndex",
    setFrom$1: function(other) {
      this.categoryBits = other.categoryBits;
      this.maskBits = other.maskBits;
      this.groupIndex = other.groupIndex;
    }
  },
  Fixture: {
    "": "Object;box,density,next,body>,shape>,friction,restitution,proxy<,filter<,isSensor<,userData,_poolOne,_poolTwo",
    synchronize$3: function(broadPhase, transformOne, transformTwo) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      if (this.proxy == null)
        return;
      t1 = this._poolOne;
      this.shape.computeAxisAlignedBox$2(t1, transformOne);
      t2 = this._poolTwo;
      this.shape.computeAxisAlignedBox$2(t2, transformTwo);
      t3 = this.box;
      t4 = t3.lowerBound;
      t5 = t1.lowerBound;
      t6 = t5.storage;
      t7 = t6[0];
      t8 = t2.lowerBound.storage;
      t9 = t8[0];
      t7 = t7 < t9 ? t7 : t9;
      t4 = t4.storage;
      t4[0] = t7;
      t7 = t6[1];
      t8 = t8[1];
      t4[1] = t7 < t8 ? t7 : t8;
      t4 = t3.upperBound;
      t1 = t1.upperBound.storage;
      t7 = t1[0];
      t2 = t2.upperBound.storage;
      t8 = t2[0];
      t7 = t7 > t8 ? t7 : t8;
      t4 = t4.storage;
      t4[0] = t7;
      t1 = t1[1];
      t2 = t2[1];
      t4[1] = t1 > t2 ? t1 : t2;
      t1 = transformTwo.position.storage;
      t2 = transformOne.position.storage;
      t6[0] = t1[0] - t2[0];
      t6[1] = t1[1] - t2[1];
      t2 = this.proxy;
      if (broadPhase._tree.moveProxy$3(t2, t3, t5))
        broadPhase.moveBuffer.push(t2);
    },
    get$type: function(_) {
      return this.shape.type;
    }
  },
  FixtureDef: {
    "": "Object;shape,userData,friction,restitution,density,isSensor,filter",
    FixtureDef$0: function() {
      var t1 = this.filter;
      t1.categoryBits = 1;
      t1.maskBits = 65535;
      t1.groupIndex = 0;
    },
    static: {FixtureDef$: function() {
        var t1 = new V.FixtureDef(null, null, 0.2, 0, 0, false, new V.Filter(0, 0, 0));
        t1.FixtureDef$0();
        return t1;
      }}
  },
  Island: {
    "": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
    init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
      var t1, t2, old, t3, i;
      this.bodyCapacity = argBodyCapacity;
      this.contactCapacity = argContactCapacity;
      this.jointCapacity = argJointCapacity;
      this.bodyCount = 0;
      this.contactCount = 0;
      this.listener = argListener;
      t1 = this.bodies;
      if (t1 == null || argBodyCapacity > t1.length)
        this.bodies = H.setRuntimeTypeInfo(Array(argBodyCapacity), [V.Body]);
      t1 = this.contacts;
      if (t1 != null) {
        t2 = this.contactCapacity;
        t1 = t1.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t1 = t2 > t1;
      } else
        t1 = true;
      if (t1) {
        t1 = this.contactCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.contacts = H.setRuntimeTypeInfo(Array(t1), [V.Contact]);
      }
      t1 = this.joints;
      if (t1 != null) {
        t2 = this.jointCapacity;
        t1 = t1.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t1 = t2 > t1;
      } else
        t1 = true;
      if (t1) {
        t1 = this.jointCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.joints = H.setRuntimeTypeInfo(Array(t1), [V.Joint]);
      }
      old = this.velocities;
      t1 = old == null;
      if (!t1) {
        t2 = this.bodyCapacity;
        t3 = old.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        if (t1)
          old = H.setRuntimeTypeInfo(Array(0), [V.Velocity]);
        t1 = this.bodyCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Velocity]);
        this.velocities = t1;
        i = old.length;
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.velocities, i < t1.length; ++i) {
          t2 = new V.Velocity(null, null);
          t2.v = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
      old = this.positions;
      t1 = old == null;
      if (!t1) {
        t2 = this.bodyCapacity;
        t3 = old.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        if (t1)
          old = H.setRuntimeTypeInfo(Array(0), [V.Position]);
        t1 = this.bodyCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Position]);
        this.positions = t1;
        i = old.length;
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.positions, i < t1.length; ++i) {
          t2 = new V.Position(null, null);
          t2.x = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
    },
    solve$3: function(step, gravity, allowSleep) {
      var t1, i, t2, b, t3, t4, t5, t6, t7, t8, newAngularVelocity, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, temp, j, ratio, rotation, t9, contactsOkay, jointsOkay, minSleepTime;
      t1 = gravity.storage;
      i = 0;
      while (true) {
        t2 = this.bodyCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        c$0: {
          t2 = this.bodies;
          if (i >= t2.length)
            return H.ioore(t2, i);
          b = t2[i];
          if (b._type !== 2)
            break c$0;
          t2 = b._force.storage;
          t3 = t2[0];
          t4 = b.invMass;
          t5 = t1[0];
          t6 = step.dt;
          t2 = t2[1];
          t7 = t1[1];
          t8 = new Float32Array(2);
          t8[0] = (t3 * t4 + t5) * t6;
          t8[1] = (t2 * t4 + t7) * t6;
          t6 = b._linearVelocity;
          t6.add$1(t6, new T.Vector2(t8));
          t8 = b._angularVelocity;
          newAngularVelocity = t8 + step.dt * b.invInertia * b._torque;
          if (b._type !== 0) {
            if (newAngularVelocity * newAngularVelocity > 0)
              b.set$awake(true);
            b._angularVelocity = newAngularVelocity;
            t2 = newAngularVelocity;
          } else
            t2 = t8;
          t3 = step.dt;
          a = 1 - t3 * b.linearDamping;
          t4 = a < 1;
          if (0 > (t4 ? a : 1))
            a1 = 0;
          else
            a1 = t4 ? a : 1;
          t4 = t6.storage;
          t4[1] = t4[1] * a1;
          t4[0] = t4[0] * a1;
          a2 = 1 - t3 * b.angularDamping;
          b1 = a2 < 1 ? a2 : 1;
          t2 *= 0 > b1 ? 0 : b1;
          if (b._type !== 0) {
            if (t2 * t2 > 0)
              b.set$awake(true);
            b._angularVelocity = t2;
          }
        }
        ++i;
      }
      t1 = this.contactCount;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.contacts;
      i1 = -1;
      i2 = 0;
      for (; i2 < t1; ++i2) {
        t3 = t2.length;
        if (i2 >= t3)
          return H.ioore(t2, i2);
        t4 = t2[i2];
        fixtureA = t4.fixtureA;
        fixtureB = t4.fixtureB;
        bodyA = J.get$body$x(fixtureA);
        bodyB = J.get$body$x(fixtureB);
        if (bodyA.get$type(bodyA) !== 0 && bodyB.get$type(bodyB) !== 0) {
          ++i1;
          if (i1 >= t3)
            return H.ioore(t2, i1);
          temp = t2[i1];
          t2[i1] = t4;
          t2[i2] = temp;
        }
      }
      t3 = this._contactSolver;
      t3.init$3(t2, t1, step.dtRatio);
      t3.warmStart$0();
      t1 = this.jointCount;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.joints;
      i = 0;
      for (; i < t1; ++i) {
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i].initVelocityConstraints$1(step);
      }
      for (i = 0; i < step.velocityIterations; ++i) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.joints;
        j = 0;
        for (; j < t1; ++j) {
          if (j >= t2.length)
            return H.ioore(t2, j);
          t2[j].solveVelocityConstraints$1(step);
        }
        t3.solveVelocityConstraints$0();
      }
      t3.storeImpulses$0();
      t1 = new Float32Array(2);
      temp = new T.Vector2(t1);
      t2 = this._translation;
      t4 = t2.storage;
      i = 0;
      while (true) {
        t5 = this.bodyCount;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(i < t5))
          break;
        c$0: {
          t5 = this.bodies;
          if (i >= t5.length)
            return H.ioore(t5, i);
          b = t5[i];
          if (b._type === 0)
            break c$0;
          t5 = b._linearVelocity.storage;
          t4[1] = t5[1];
          t4[0] = t5[0];
          t6 = step.dt;
          t4[1] = t4[1] * t6;
          t4[0] = t4[0] * t6;
          if (t2.dot$1(t2) > 4) {
            ratio = 2 / t2.get$length(t2);
            t5[1] = t5[1] * ratio;
            t5[0] = t5[0] * ratio;
          }
          rotation = step.dt * b._angularVelocity;
          if (rotation * rotation > 2.4674011002723395) {
            t6 = Math.abs(rotation);
            t6 = b._angularVelocity * (1.5707963267948966 / t6);
            if (b._type !== 0) {
              if (t6 * t6 > 0)
                b.set$awake(true);
              b._angularVelocity = t6;
            }
          }
          t6 = b.sweep;
          t7 = t6.center;
          t8 = t6.centerZero.storage;
          t9 = t7.storage;
          t8[1] = t9[1];
          t8[0] = t9[0];
          t6.angleZero = t6.angle;
          t1[1] = t5[1];
          t1[0] = t5[0];
          t5 = step.dt;
          t1[1] = t1[1] * t5;
          t1[0] = t1[0] * t5;
          t7.add$1(t7, temp);
          t6.angle = t6.angle + step.dt * b._angularVelocity;
          b.synchronizeTransform$0();
        }
        ++i;
      }
      for (i = 0; i < step.positionIterations; ++i) {
        contactsOkay = t3.solvePositionConstraints$1(0.2);
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.joints;
        jointsOkay = true;
        j = 0;
        for (; j < t1; ++j, jointsOkay = false) {
          if (j >= t2.length)
            return H.ioore(t2, j);
          t2[j].solvePositionConstraints$1(0.2);
          if (jointsOkay)
            ;
        }
        if (contactsOkay && jointsOkay)
          break;
      }
      this.report$1(t3.constraints);
      if (allowSleep) {
        minSleepTime = 99999999999999;
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          c$0: {
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            b = t1[i];
            if (b._type === 0)
              break c$0;
            t1 = b.flags;
            if (typeof t1 !== "number")
              return t1.$and();
            if ((t1 & 4) === 0) {
              b.sleepTime = 0;
              minSleepTime = 0;
            }
            if ((t1 & 4) !== 0) {
              t1 = b._angularVelocity;
              if (!(t1 * t1 > 0.0012184696791468343)) {
                t1 = b._linearVelocity;
                t1 = t1.dot$1(t1) > 0.0001;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              b.sleepTime = 0;
              minSleepTime = 0;
            } else {
              t1 = b.sleepTime + step.dt;
              b.sleepTime = t1;
              minSleepTime = P.min(minSleepTime, t1);
            }
          }
          ++i;
        }
        if (minSleepTime >= 0.5) {
          i = 0;
          while (true) {
            t1 = this.bodyCount;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i].set$awake(false);
            ++i;
          }
        }
      }
    },
    report$1: function(constraints) {
      return;
    }
  },
  Position: {
    "": "Object;x*,a"
  },
  Velocity: {
    "": "Object;v,a"
  },
  Joint: {
    "": "Object;"
  },
  TimeStep: {
    "": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"
  },
  World: {
    "": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
    _addType$3: function(creatorStack, type1, type2) {
      var register, t1, t2, register2;
      register = new V.ContactRegister(null, false);
      register.creator = creatorStack;
      register.primary = true;
      t1 = this._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t2 = t1[type1];
      t2.length;
      if (type2 >= 2)
        return H.ioore(t2, type2);
      t2[type2] = register;
      if (type1 !== type2) {
        register2 = new V.ContactRegister(null, false);
        register2.creator = creatorStack;
        register2.primary = false;
        t1[type2][type1] = register2;
      }
    },
    popContact$2: function(fixtureA, fixtureB) {
      var type1, type2, t1, reg, creator, c;
      type1 = fixtureA.get$type(fixtureA);
      type2 = fixtureB.get$type(fixtureB);
      t1 = this._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >= 2)
        return H.ioore(t1, type2);
      reg = t1[type2];
      creator = reg.creator;
      if (creator != null) {
        if (creator._head === creator._tail)
          creator = this._getFreshContactStack$2(type1, type2);
        if (reg.primary) {
          c = creator.removeFirst$0();
          c.init$2(fixtureA, fixtureB);
          return c;
        } else {
          c = creator.removeFirst$0();
          c.init$2(fixtureB, fixtureA);
          return c;
        }
      } else
        return;
    },
    _getFreshContactStack$2: function(type1, type2) {
      var t1, t2;
      if (type1 === 0 && type2 === 0)
        return this._pool.getCircleContactStack$0();
      else {
        t1 = type1 === 1 && type2 === 1;
        t2 = this._pool;
        if (t1)
          return t2.getPolyContactStack$0();
        else
          return t2.getPolyCircleContactStack$0();
      }
    },
    createBody$1: function(def) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, b;
      if ((this._flags & 2) === 2)
        return;
      t1 = V.Transform$0();
      t2 = V.Sweep$();
      t3 = new T.Vector2(new Float32Array(2));
      t3.setFrom$1(def.linearVelocity);
      t4 = def.linearDamping;
      t5 = def.angularDamping;
      t6 = new Float32Array(2);
      t7 = def.userData;
      t8 = V.FixtureDef$();
      t9 = new Float32Array(2);
      t10 = V.Transform$0();
      t11 = new Float32Array(2);
      t12 = new Float32Array(2);
      b = new V.Body(this, 0, null, 0, t7, t3, 0, null, null, null, null, null, 0, null, new T.Vector2(t6), 0, 0, 0, t4, t5, def.type, null, t1, t2, t8, new V.MassData(0, new T.Vector2(t9), 0), t10, new T.Vector2(t11), new T.Vector2(t12));
      b.Body$2(def, this);
      b.prev = null;
      t12 = this._bodyList;
      b.next = t12;
      if (t12 != null)
        t12.prev = b;
      this._bodyList = b;
      this._bodyCount = this._bodyCount + 1;
      return b;
    },
    clearForces$0: function() {
      var body, t1;
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body._force.storage;
        t1[0] = 0;
        t1[1] = 0;
        body._torque = 0;
      }
    },
    solve$1: function(timeStep) {
      var t1, t2, t3, b, c, j, stackSize, seed, t4, t5, stackCount, ce, contact, sensorA, sensorB, t6, other, stackCount0, je, i;
      t1 = this.island;
      t2 = this._bodyCount;
      t3 = this._contactManager;
      t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
      for (b = this._bodyList; b != null; b = b.next) {
        t2 = b.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        b.flags = t2 & 4294967294;
      }
      for (c = this._contactManager.contactList; c != null; c = c.next) {
        t2 = c.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        c.flags = t2 & 4294967294;
      }
      for (j = this._jointList; false; j = j.get$_box2d$_next())
        j.set$islandFlag(false);
      stackSize = this._bodyCount;
      if (this.stack.length < stackSize)
        this.stack = H.setRuntimeTypeInfo(Array(stackSize), [V.Body]);
      for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.next) {
        t4 = seed.flags;
        if (typeof t4 !== "number")
          return t4.$and();
        if ((t4 & 1) === 1)
          continue;
        if ((t4 & 2) !== 2 || (t4 & 32) !== 32)
          continue;
        if (seed._type === 0)
          continue;
        t1.bodyCount = 0;
        t1.contactCount = 0;
        t1.jointCount = 0;
        t5 = this.stack;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5[0] = seed;
        seed.flags = t4 | 1;
        for (stackCount = 1; stackCount > 0;) {
          t4 = this.stack;
          --stackCount;
          if (stackCount >= t4.length)
            return H.ioore(t4, stackCount);
          b = t4[stackCount];
          t4 = t1.bodyCount;
          b.islandIndex = t4;
          t5 = t1.bodies;
          if (typeof t4 !== "number")
            return t4.$add();
          t1.bodyCount = t4 + 1;
          if (t4 >= t5.length)
            return H.ioore(t5, t4);
          t5[t4] = b;
          b.set$awake(true);
          if (b._type === 0)
            continue;
          for (ce = b.contactList; ce != null; ce = ce.next) {
            contact = ce.contact;
            t4 = contact.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            if ((t4 & 4) !== 4 || (t4 & 2) !== 2)
              continue;
            sensorA = contact.fixtureA.get$isSensor();
            sensorB = contact.fixtureB.get$isSensor();
            if (sensorA === true || sensorB === true)
              continue;
            t5 = t1.contacts;
            t6 = t1.contactCount;
            if (typeof t6 !== "number")
              return t6.$add();
            t1.contactCount = t6 + 1;
            if (t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = contact;
            contact.flags = t4 | 1;
            other = ce.other;
            t4 = other.get$flags();
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            t4 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount >= t4.length)
              return H.ioore(t4, stackCount);
            t4[stackCount] = other;
            t4 = other.flags;
            if (typeof t4 !== "number")
              return t4.$or();
            other.flags = t4 | 1;
            stackCount = stackCount0;
          }
          for (je = b.jointList; false; je = je.get$next()) {
            t4 = je.get$joint();
            t4.get$islandFlag();
            other = je.get$other();
            other.get$active();
            t5 = t1.joints;
            t6 = t1.jointCount;
            if (typeof t6 !== "number")
              return t6.$add();
            t1.jointCount = t6 + 1;
            if (t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = t4;
            t4.set$islandFlag(true);
            t4 = other.get$flags();
            t4.$and(t4, 1);
            t5 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount >= t5.length)
              return H.ioore(t5, stackCount);
            t5[stackCount] = other;
            other.set$flags(t4.$or(t4, 1));
            stackCount = stackCount0;
          }
        }
        t1.solve$3(timeStep, t2, t3);
        i = 0;
        while (true) {
          t4 = t1.bodyCount;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t4 = t1.bodies;
          if (i >= t4.length)
            return H.ioore(t4, i);
          b = t4[i];
          if (b._type === 0) {
            t4 = b.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            b.flags = t4 & 4294967294;
          }
          ++i;
        }
      }
      for (b = this._bodyList; b != null; b = b.next) {
        t1 = b.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) === 0)
          continue;
        if (b._type === 0)
          continue;
        b.synchronizeFixtures$0();
      }
      t1 = this._contactManager;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
    },
    solveTimeOfImpact$0: function() {
      var c, t1, body, t2;
      for (c = this._contactManager.contactList; c != null; c = c.next) {
        t1 = c.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        c.flags = t1 | 4;
        c.toiCount = 0;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) !== 0) {
          t2 = body._type;
          t2 = t2 === 1 || t2 === 0;
        } else
          t2 = true;
        if (t2)
          body.flags = t1 | 64;
        else
          body.flags = t1 & 4294967231;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || (t1 & 8) === 8)
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        body.flags = t1 | 64;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || (t1 & 8) !== 8)
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        body.flags = t1 | 64;
      }
    },
    solveTimeOfImpactGivenBody$1: function(body) {
      var t1, bullet, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, toiContact0, other, type, t8, fixtureA, fixtureB, bodyA, bodyB, contact, i;
      t1 = body.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      bullet = (t1 & 8) === 8;
      t1 = this.toiOutput;
      t2 = this.toiInput;
      t3 = t2.proxyA;
      t4 = t2.proxyB;
      t5 = t2.sweepA;
      t6 = t2.sweepB;
      t7 = this._pool;
      toiContact = null;
      toi = 1;
      toiOther = null;
      iter = 0;
      do {
        for (ce = body.contactList, found = false, count = 0; ce != null; ce = ce.next) {
          toiContact0 = ce.contact;
          if (toiContact0 == null ? toiContact == null : toiContact0 === toiContact)
            continue;
          other = ce.other;
          type = other.get$type(other);
          if (bullet) {
            t8 = other.flags;
            if (typeof t8 !== "number")
              return t8.$and();
            if ((t8 & 64) === 0)
              continue;
            if (type !== 0) {
              t8 = toiContact0.flags;
              if (typeof t8 !== "number")
                return t8.$and();
              t8 = (t8 & 16) !== 0;
            } else
              t8 = false;
            if (t8)
              continue;
          } else if (type === 2)
            continue;
          t8 = toiContact0.flags;
          if (typeof t8 !== "number")
            return t8.$and();
          if ((t8 & 4) === 4) {
            t8 = toiContact0.toiCount;
            if (typeof t8 !== "number")
              return t8.$gt();
            t8 = t8 > 10;
          } else
            t8 = true;
          if (t8)
            continue;
          fixtureA = toiContact0.fixtureA;
          fixtureB = toiContact0.fixtureB;
          if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
            continue;
          bodyA = fixtureA.get$body(fixtureA);
          t8 = J.getInterceptor$x(fixtureB);
          bodyB = t8.get$body(fixtureB);
          t3.setFromShape$1(fixtureA.get$shape(fixtureA));
          t4.setFromShape$1(t8.get$shape(fixtureB));
          t5.setFrom$1(bodyA.sweep);
          t6.setFrom$1(bodyB.get$sweep());
          t2.tMax = toi;
          t7.timeOfImpact.timeOfImpact$2(t1, t2);
          if (t1.state === 3 && t1.t < toi) {
            toi = t1.t;
            toiOther = other;
            toiContact = toiContact0;
            found = true;
          }
          ++count;
        }
        ++iter;
      } while (found && count > 1 && iter < 50);
      if (toiContact == null) {
        t1 = body.sweep;
        t1.advance$1(1);
        t2 = t1.center.storage;
        t3 = t1.centerZero.storage;
        t2[1] = t3[1];
        t2[0] = t3[0];
        t1.angle = t1.angleZero;
        body.synchronizeTransform$0();
        return;
      }
      t1 = this.backup;
      t2 = body.sweep;
      t1.setFrom$1(t2);
      t2.advance$1(toi);
      t3 = t2.center.storage;
      t4 = t2.centerZero.storage;
      t3[1] = t4[1];
      t3[0] = t4[0];
      t2.angle = t2.angleZero;
      body.synchronizeTransform$0();
      toiContact.update$1(this._contactManager.contactListener);
      t3 = toiContact.flags;
      if (typeof t3 !== "number")
        return t3.$and();
      if ((t3 & 4) !== 4) {
        t2.setFrom$1(t1);
        this.solveTimeOfImpactGivenBody$1(body);
      }
      t1 = toiContact.toiCount;
      if (typeof t1 !== "number")
        return t1.$add();
      toiContact.toiCount = t1 + 1;
      ce = body.contactList;
      count = 0;
      while (true) {
        if (!(ce != null && count < 32))
          break;
        c$0: {
          other = ce.other;
          if (other.get$type(other) === 2)
            break c$0;
          contact = ce.contact;
          t1 = contact.flags;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 4) !== 4)
            break c$0;
          fixtureA = contact.fixtureA;
          fixtureB = contact.fixtureB;
          if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
            break c$0;
          if (contact == null ? toiContact != null : contact !== toiContact)
            contact.update$1(this._contactManager.contactListener);
          t1 = contact.flags;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 4) !== 4 || (t1 & 2) !== 2)
            break c$0;
          t1 = this.contacts;
          if (count >= 32)
            return H.ioore(t1, count);
          t1[count] = contact;
          ++count;
        }
        ce = ce.next;
      }
      t1 = this.toiSolver;
      t1.initialize$3(t1, this.contacts, count, body);
      for (i = 0; i < 20; ++i)
        if (t1.solve$1(0.75))
          break;
      if (toiOther.get$type(toiOther) !== 0) {
        t1 = toiContact.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        toiContact.flags = t1 | 16;
      }
    },
    World$3: function(gravity, doSleep, argPool) {
      var t1, i, t2;
      this._contactManager = new V.ContactManager(V.BroadPhase$(), null, 0, new V.ContactFilter(), null, this);
      for (t1 = this._contactStacks, i = 0; i < 2; ++i) {
        t2 = Array(2);
        t2.$builtinTypeInfo = [V.ContactRegister];
        t1[i] = t2;
      }
      t1 = this._pool;
      this._addType$3(t1.getCircleContactStack$0(), 0, 0);
      this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
      this._addType$3(t1.getPolyContactStack$0(), 1, 1);
    },
    static: {"": "World_WORLD_POOL_SIZE,World_WORLD_POOL_CONTAINER_SIZE,World_NEW_FIXTURE,World_LOCKED,World_CLEAR_FORCES", World$: function(gravity, doSleep, argPool) {
        var t1 = new V.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, H.setRuntimeTypeInfo(Array(2), [[J.JSArray, V.ContactRegister]]), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new V.TimeStep(0, 0, 0, 0, 0, true), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new V.WorldQueryWrapper(null, null), new V.TimeOfImpactInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Sweep$(), V.Sweep$(), 0), new V.TimeOfImpactOutput(0, 0), V.Sweep$(), V.TimeOfImpactSolver$(), H.setRuntimeTypeInfo(Array(32), [V.Contact]), new V.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, V.ContactSolver$(), new T.Vector2(new Float32Array(2)), new V.ContactImpulse(H.setRuntimeTypeInfo(Array(2), [J.JSDouble]), H.setRuntimeTypeInfo(Array(2), [J.JSDouble]))), H.setRuntimeTypeInfo(Array(10), [V.Body]));
        t1.World$3(gravity, doSleep, argPool);
        return t1;
      }}
  },
  WorldQueryWrapper: {
    "": "Object;broadPhase,callback"
  },
  DefaultWorldPool: {
    "": "Object;collision,timeOfImpact,distance",
    getCircleContactStack$0: function() {
      var t1, queue, i;
      t1 = V.CircleContact;
      queue = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
      queue.ListQueue$1(null, t1);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.CircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyCircleContactStack$0: function() {
      var t1, queue, i;
      t1 = V.PolygonAndCircleContact;
      queue = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
      queue.ListQueue$1(null, t1);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonAndCircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyContactStack$0: function() {
      var t1, queue, i;
      t1 = V.PolygonContact;
      queue = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
      queue.ListQueue$1(null, t1);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    DefaultWorldPool$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23;
      t1 = V.SimplexVertex$();
      t2 = V.SimplexVertex$();
      t3 = V.SimplexVertex$();
      t4 = H.setRuntimeTypeInfo(Array(3), [V.SimplexVertex]);
      t5 = new Float32Array(2);
      t6 = new Float32Array(2);
      t6 = new V.Simplex(t1, t2, t3, t4, 0, new T.Vector2(t5), new T.Vector2(new Float32Array(2)), new T.Vector2(t6), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)));
      t6.Simplex$0();
      this.distance = new V.Distance(0, 0, 20, t6, H.setRuntimeTypeInfo(Array(3), [J.JSInt]), H.setRuntimeTypeInfo(Array(3), [J.JSInt]), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)));
      t6 = V.DistanceInput$();
      t6 = new V.Collision(this, V.SimplexCache$(), t6, V.DistanceOutput$(), new V.EdgeResults(0, 0), new V.EdgeResults(0, 0), H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]), H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]));
      t6.Collision$_construct$1(this);
      this.collision = t6;
      t6 = V.SimplexCache$();
      t5 = V.DistanceInput$();
      t4 = V.Transform$0();
      t3 = V.Transform$0();
      t2 = V.DistanceOutput$();
      t1 = V.DistanceProxy$();
      t7 = V.DistanceProxy$();
      t8 = new Float32Array(2);
      t9 = new Float32Array(2);
      t10 = V.Sweep$();
      t11 = V.Sweep$();
      t12 = new Float32Array(2);
      t13 = new Float32Array(2);
      t14 = new Float32Array(2);
      t15 = new Float32Array(2);
      t16 = new Float32Array(2);
      t17 = new Float32Array(2);
      t18 = new Float32Array(2);
      t19 = new Float32Array(2);
      t20 = new Float32Array(2);
      t21 = new Float32Array(2);
      t22 = V.Transform$0();
      t23 = V.Transform$0();
      t23 = new V.TimeOfImpact(t6, t5, t4, t3, t2, new V.SeparationFunction(t1, t7, 0, new T.Vector2(t8), new T.Vector2(t9), t10, t11, new T.Vector2(t12), new T.Vector2(t13), new T.Vector2(t14), new T.Vector2(t15), new T.Vector2(t16), new T.Vector2(t17), new T.Vector2(t18), new T.Vector2(t19), new T.Vector2(t20), new T.Vector2(new Float32Array(2)), new T.Vector2(new Float32Array(2)), new T.Vector2(t21), t22, t23), H.setRuntimeTypeInfo(Array(2), [J.JSInt]), V.Sweep$(), V.Sweep$(), this);
      t23.TimeOfImpact$_construct$1(this);
      this.timeOfImpact = t23;
    },
    static: {DefaultWorldPool$: function() {
        var t1 = new V.DefaultWorldPool(null, null, null);
        t1.DefaultWorldPool$0();
        return t1;
      }}
  }
}],
["dart._collection.dev", "dart:_collection-dev", , H, {
  "": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_removeWhereList: function(list, test) {
    var retained, $length, t1, i, element;
    retained = [];
    $length = list.length;
    for (t1 = $length, i = 0; i < $length; ++i) {
      if (i >= t1)
        return H.ioore(list, i);
      element = list[i];
      if (test.call$1(element) !== true)
        retained.push(element);
      t1 = list.length;
      if ($length !== t1)
        throw H.wrapException(P.ConcurrentModificationError$(list));
    }
    t1 = retained.length;
    if (t1 === $length)
      return;
    C.JSArray_methods.set$length(list, t1);
    for (i = 0; i < retained.length; ++i)
      C.JSArray_methods.$indexSet(list, i, retained[i]);
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    if (start < 0 || start > list.length)
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(P.StateError$("Not enough elements"));
    H.Lists_copy(from, skipCount, list, start, $length);
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1, t2;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length; i >= srcStart; --i, --j) {
        if (i < 0 || i >= t1)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, t2 = src.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= t2)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, t2, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (j > left) {
          t2 = j - 1;
          if (t2 < 0 || t2 >= a.length)
            return H.ioore(a, t2);
          t2 = J.$gt$n(compare.call$2(a[t2], el), 0);
        } else
          t2 = false;
        if (!t2)
          break;
        j0 = j - 1;
        if (j0 < 0 || j0 >= a.length)
          return H.ioore(a, j0);
        t1.$indexSet(a, j, a[j0]);
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, t2, el2, el3, el4, el5, t0, less, great, k, ak, comp, t3, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    t2 = a.length;
    if (index2 < 0 || index2 >= t2)
      return H.ioore(a, index2);
    el2 = a[index2];
    if (index3 < 0 || index3 >= t2)
      return H.ioore(a, index3);
    el3 = a[index3];
    if (index4 < 0 || index4 >= t2)
      return H.ioore(a, index4);
    el4 = a[index4];
    if (index5 < 0 || index5 >= t2)
      return H.ioore(a, index5);
    el5 = a[index5];
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    if (left < 0 || left >= a.length)
      return H.ioore(a, left);
    t1.$indexSet(a, index2, a[left]);
    if (right < 0 || right >= a.length)
      return H.ioore(a, right);
    t1.$indexSet(a, index4, a[right]);
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        if (k >= a.length)
          return H.ioore(a, k);
        ak = a[k];
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            if (less >= a.length)
              return H.ioore(a, less);
            t1.$indexSet(a, k, a[less]);
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            if (great < 0 || great >= a.length)
              return H.ioore(a, great);
            comp = compare.call$2(a[great], el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              t2 = t2.$lt(comp, 0);
              t3 = a.length;
              great0 = great - 1;
              if (t2) {
                if (less >= t3)
                  return H.ioore(a, less);
                t1.$indexSet(a, k, a[less]);
                less0 = less + 1;
                if (great >= a.length)
                  return H.ioore(a, great);
                t1.$indexSet(a, less, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                if (great >= t3)
                  return H.ioore(a, great);
                t1.$indexSet(a, k, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        if (k >= a.length)
          return H.ioore(a, k);
        ak = a[k];
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            if (less >= a.length)
              return H.ioore(a, less);
            t1.$indexSet(a, k, a[less]);
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;) {
            if (great < 0 || great >= a.length)
              return H.ioore(a, great);
            if (J.$gt$n(compare.call$2(a[great], el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              if (great >= a.length)
                return H.ioore(a, great);
              t2 = J.$lt$n(compare.call$2(a[great], el2), 0);
              great0 = great - 1;
              t3 = a.length;
              if (t2) {
                if (less >= t3)
                  return H.ioore(a, less);
                t1.$indexSet(a, k, a[less]);
                less0 = less + 1;
                if (great >= a.length)
                  return H.ioore(a, great);
                t1.$indexSet(a, less, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                if (great >= t3)
                  return H.ioore(a, great);
                t1.$indexSet(a, k, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
          }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    if (t2 >= a.length)
      return H.ioore(a, t2);
    t1.$indexSet(a, left, a[t2]);
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    if (t2 < 0 || t2 >= a.length)
      return H.ioore(a, t2);
    t1.$indexSet(a, right, a[t2]);
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      while (true) {
        if (less >= a.length)
          return H.ioore(a, less);
        if (!J.$eq(compare.call$2(a[less], el2), 0))
          break;
        ++less;
      }
      while (true) {
        if (great < 0 || great >= a.length)
          return H.ioore(a, great);
        if (!J.$eq(compare.call$2(a[great], el4), 0))
          break;
        --great;
      }
      for (k = less; k <= great; ++k) {
        if (k >= a.length)
          return H.ioore(a, k);
        ak = a[k];
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            if (less >= a.length)
              return H.ioore(a, less);
            t1.$indexSet(a, k, a[less]);
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;) {
            if (great < 0 || great >= a.length)
              return H.ioore(a, great);
            if (J.$eq(compare.call$2(a[great], el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              if (great >= a.length)
                return H.ioore(a, great);
              t2 = J.$lt$n(compare.call$2(a[great], el2), 0);
              great0 = great - 1;
              t3 = a.length;
              if (t2) {
                if (less >= t3)
                  return H.ioore(a, less);
                t1.$indexSet(a, k, a[less]);
                less0 = less + 1;
                if (great >= a.length)
                  return H.ioore(a, great);
                t1.$indexSet(a, less, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                if (great >= t3)
                  return H.ioore(a, great);
                t1.$indexSet(a, k, a[great]);
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
          }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(this, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    $asIterableBase: null
  },
  SubListIterable: {
    "": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$gt();
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2, t3;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = t2 >= $length;
      } else
        t3 = true;
      if (t3)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, t1;
      realIndex = this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2;
      t1 = this._start;
      if (t1 < 0)
        throw H.wrapException(P.RangeError$value(t1));
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t1 > t2)
          throw H.wrapException(P.RangeError$range(t1, 0, t2));
      }
    },
    $asListIterable: null,
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      this._index = this._index + 1;
      return true;
    }
  },
  MappedIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "": "MappedIterable;_iterable,_f",
    $asMappedIterable: null
  },
  MappedIterator: {
    "": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  FixedLengthListMixin: {
    "": "Object;"
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "": "",
  _invokeErrorHandler: function(errorHandler, error, stackTrace) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return errorHandler.call$2(error, stackTrace);
    else
      return errorHandler.call$1(error);
  },
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    zone.toString;
    if (t1)
      return errorHandler;
    else
      return errorHandler;
  },
  _asyncRunCallback: [function() {
    var callback, t1, exception, milliseconds;
    for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
      callback = t1.removeFirst$0();
      try {
        callback.call$0();
      } catch (exception) {
        H.unwrapException(exception);
        milliseconds = C.JSInt_methods._tdivFast$1(C.Duration_0._duration, 1000);
        H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure());
        throw exception;
      }

    }
    $._callbacksAreEnqueued = false;
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 0],
  _scheduleAsyncCallback: function(callback) {
    $.get$_asyncCallbacks()._add$1(callback);
    if (!$._callbacksAreEnqueued) {
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
      $._callbacksAreEnqueued = true;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, t1, t2, exception;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      t1 = result;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 4],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 5, 6],
  _nullDoneHandler: [function() {
    return;
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 0],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture, t1;
    cancelFuture = subscription.cancel$0();
    t1 = J.getInterceptor(cancelFuture);
    if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$0();
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$1(arg);
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncError: {
    "": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "": "Object;",
    $isFuture: true
  },
  _Future: {
    "": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    _onValue$1: function(arg0) {
      return this.get$_onValue().call$1(arg0);
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    _whenCompleteAction$0: function() {
      return this.get$_whenCompleteAction().call$0();
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (typeof value === "object" && value !== null && !!t1.$isFuture) {
        P._Future__chainFutures(value, this);
        return;
      }
      listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 5, 6],
    _asyncComplete$1: function(value) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
    },
    $is_Future: true,
    $isFuture: true,
    static: {"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future__chainFutures: function(source, target) {
        var t1;
        target._state = 2;
        t1 = J.getInterceptor(source);
        if (typeof source === "object" && source !== null && !!t1.$is_Future)
          if (source._state >= 4)
            P._Future__propagateToListeners(source, target);
          else
            source._addListener$1(target);
        else
          source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, t5, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          if (hasError) {
            t2 = t1.source_4.get$_zone();
            t4 = listeners._zone;
            t2.toString;
            t4.toString;
            t2 = t4 == null ? t2 != null : t4 !== t2;
          } else
            t2 = false;
          if (t2) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          t2 = $.Zone__current;
          t4 = listeners._zone;
          if (t2 == null ? t4 != null : t2 !== t4) {
            t4.toString;
            P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
            return;
          }
          t3.listenerHasValue_1 = null;
          t3.listenerValueOrError_2 = null;
          t3.isPropagationAborted_3 = false;
          t4.toString;
          P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t3, hasError, listeners));
          if (t3.isPropagationAborted_3)
            return;
          t2 = t3.listenerHasValue_1 === true;
          if (t2) {
            t4 = t3.listenerValueOrError_2;
            t5 = J.getInterceptor(t4);
            t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
            t4 = t5;
          } else
            t4 = false;
          if (t4) {
            chainSource = t3.listenerValueOrError_2;
            t2 = J.getInterceptor(chainSource);
            if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
              listeners._state = 2;
              t1.source_4 = chainSource;
              t2 = chainSource;
              continue;
            }
            P._Future__chainFutures(chainSource, listeners);
            return;
          }
          if (t2) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = J.get$error$x(asyncError);
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P._AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "": "Closure:13;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainFutures_closure: {
    "": "Closure:15;target_0",
    call$1: function(value) {
      this.target_0._complete$1(value);
    }
  },
  _Future__chainFutures_closure0: {
    "": "Closure:19;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "": "Closure:13;this_0,value_1",
    call$0: function() {
      this.this_0._complete$1(this.value_1);
    }
  },
  _Future__propagateToListeners_closure: {
    "": "Closure:13;box_2,listener_3",
    call$0: function() {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
    }
  },
  _Future__propagateToListeners_closure0: {
    "": "Closure:13;box_2,box_1,hasError_4,listener_5",
    call$0: function() {
      var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, t5, completeResult, exception;
      t1 = {};
      try {
        t2 = this.box_2;
        if (!this.hasError_4) {
          value = t2.source_4.get$_value();
          t3 = this.listener_5;
          t4 = t3._state === 2 ? null : t3._onValueCallback;
          t5 = this.box_1;
          if (t4 != null) {
            t5.listenerValueOrError_2 = t3._onValue$1(value);
            t5.listenerHasValue_1 = true;
          } else {
            t5.listenerValueOrError_2 = value;
            t5.listenerHasValue_1 = true;
          }
          t4 = t5;
        } else {
          asyncError = t2.source_4.get$_error();
          t3 = this.listener_5;
          test = t3._state === 2 ? null : t3._errorTestCallback;
          matchesTest = true;
          if (test != null)
            matchesTest = test.call$1(J.get$error$x(asyncError));
          if (matchesTest === true)
            t4 = (t3._state === 2 ? null : t3._onErrorCallback) != null;
          else
            t4 = false;
          if (t4) {
            errorCallback = t3._state === 2 ? null : t3._onErrorCallback;
            t4 = this.box_1;
            t4.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            t4.listenerHasValue_1 = true;
          } else {
            t4 = this.box_1;
            t4.listenerValueOrError_2 = asyncError;
            t4.listenerHasValue_1 = false;
          }
        }
        if ((t3._state === 2 ? null : t3._whenCompleteActionCallback) != null) {
          completeResult = t3._whenCompleteAction$0();
          t1.completeResult_0 = completeResult;
          t5 = J.getInterceptor(completeResult);
          if (typeof completeResult === "object" && completeResult !== null && !!t5.$isFuture) {
            t3.set$_isChained(true);
            t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(t2, t3), new P._Future__propagateToListeners__closure0(t1, t3));
            t4.isPropagationAborted_3 = true;
          }
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (this.hasError_4) {
          t1 = J.get$error$x(this.box_2.source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.box_1;
        if (t1)
          t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t2.listenerValueOrError_2 = new P._AsyncError(e, s);
        t2.listenerHasValue_1 = false;
      }

    }
  },
  _Future__propagateToListeners__closure: {
    "": "Closure:15;box_2,listener_6",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
    }
  },
  _Future__propagateToListeners__closure0: {
    "": "Closure:19;box_0,listener_7",
    call$2: function(error, stackTrace) {
      var t1, t2, t3, completeResult;
      t1 = this.box_0;
      t2 = t1.completeResult_0;
      t3 = J.getInterceptor(t2);
      if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  Stream: {
    "": "Object;",
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "": "Closure:13;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "": "Closure:15;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "": "Closure:13;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_length_closure: {
    "": "Closure:15;box_0",
    call$1: function(_) {
      var t1 = this.box_0;
      t1.count_0 = t1.count_0 + 1;
    }
  },
  Stream_length_closure0: {
    "": "Closure:13;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  StreamSubscription: {
    "": "Object;"
  },
  StreamTransformer: {
    "": "Object;"
  },
  _StreamController: {
    "": "Object;",
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      if ((this._state & 8) === 0) {
        var t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      t1 = this._varData.get$varData();
      return t1;
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0) {
        t1 = this._ensurePendingEvents$0();
        t1.add$1(t1, new P._DelayedData(value, null));
      }
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: function(_) {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if (this._doneFuture == null) {
        t2 = P._Future$(null);
        this._doneFuture = t2;
        if ((t1 & 2) !== 0)
          t2._complete$1(null);
      }
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0) {
        t1 = this._ensurePendingEvents$0();
        t1.add$1(t1, C.C__DelayedDone);
      }
      return this._doneFuture;
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(new P.StateError("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state | 1;
      this._state = t2;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }
  },
  _StreamController__subscribe_closure: {
    "": "Closure:13;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "": "Closure:0;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  _SyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    $as_StreamController__AsyncStreamControllerDispatch: null
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _SyncStreamController: {
    "": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    $as_StreamController__SyncStreamControllerDispatch: null
  },
  _StreamController__SyncStreamControllerDispatch: {
    "": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: null
  },
  _ControllerStream: {
    "": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true,
    $as_StreamImpl: null
  },
  _ControllerSubscription: {
    "": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1, addState;
      t1 = this._async$_controller;
      if ((t1._state & 8) !== 0) {
        addState = t1._varData;
        addState.pause$0(addState);
      }
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 0],
    $as_BufferingStreamSubscription: null
  },
  _EventSink: {
    "": "Object;"
  },
  _BufferingStreamSubscription: {
    "": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        pendingEvents.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._async$_onData = handleData;
    },
    onError$1: function(_, handleError) {
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t2 = this._pending;
            t2 = !t2.get$isEmpty(t2);
          } else
            t2 = false;
          if (t2)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 0],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(pending, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendDone$0: function() {
      var t1, t2, t3;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.get$isEmpty(t2);
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "": "Closure:0;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(subscription, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    },
    $asStream: null
  },
  _DelayedEvent: {
    "": "Object;next@"
  },
  _DelayedData: {
    "": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedDone: {
    "": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "": "Closure:13;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "": "Closure:13;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "": "Closure:20;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _BaseZone: {
    "": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "": "Closure:13;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }
  },
  _BaseZone_bindCallback_closure0: {
    "": "Closure:13;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    }
  },
  _BaseZone_bindUnaryCallback_closure: {
    "": "Closure:15;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "": "Closure:15;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }
  },
  _rootHandleUncaughtError_closure: {
    "": "Closure:13;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "": "Closure:13;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace, t2;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null) {
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
      } else
        t2 = false;
      if (t2)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _RootZone: {
    "": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "": "",
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 7],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 8],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, iterable))
      return "(...)";
    t1 = $.get$_toStringVisiting();
    t1.add$1(t1, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i)
      if (t2[i] === m)
        return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var nums, rest;
      if ((key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    addAll$1: function(_, other) {
      other.forEach$1(other, new P._HashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, t1, entry, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            this._collection$_length = this._collection$_length + 1;
            this._keys = null;
          }
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(this, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "": "Closure:15;this_0",
    call$1: function(each) {
      var t1 = this.this_0;
      return t1.$index(t1, each);
    }
  },
  _HashMap_addAll_closure: {
    "": "Closure;this_0",
    call$2: function(key, value) {
      var t1 = this.this_0;
      t1.$indexSet(t1, key, value);
    },
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "_HashMap");
    }
  },
  HashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $asIterableBase: null
  },
  HashMapKeyIterator: {
    "": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    $index: function(_, key) {
      var strings, cell, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_collection$_value();
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_collection$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    },
    remove$1: function(_, key) {
      var rest, bucket, index, cell;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$_collection$_value();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._collection$_value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "": "Closure:15;this_0",
    call$1: function(each) {
      var t1 = this.this_0;
      return t1.$index(t1, each);
    }
  },
  LinkedHashMapCell: {
    "": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    },
    $asIterableBase: null
  },
  LinkedHashMapKeyIterator: {
    "": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSet: {
    "": "_HashSetBase;",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(this, object) ? object : null;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var rest, table, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else {
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        bucket.splice(index, 1);
        return true;
      }
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $as_HashSetBase: null
  },
  _IdentityHashSet: {
    "": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    },
    $as_HashSet: null
  },
  HashSetIterator: {
    "": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(this, object) ? object : null;
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    add$1: function(_, element) {
      var nums, table, rest, hash, bucket;
      if ((element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._newLinkedCell$1(element));
        }
        return true;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (bucket[i].get$_element() === element)
          return i;
      return -1;
    },
    $as_HashSetBase: null
  },
  LinkedHashSetCell: {
    "": "Object;_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_element();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "": "IterableBase;",
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $asIterableBase: null
  },
  IterableBase: {
    "": "Object;",
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    }
  },
  ListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          return H.ioore(receiver, i);
        action.call$1(receiver[i]);
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    toString$0: function(receiver) {
      var result, t1;
      t1 = $.get$_toStringVisiting();
      if (t1.contains$1(t1, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        t1 = $.get$_toStringVisiting();
        t1.add$1(t1, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        t1 = $.get$_toStringVisiting();
        t1.remove$1(t1, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null
  },
  Maps_mapToString_closure: {
    "": "Closure:14;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    addFirst$1: function(element) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._table;
      t3 = t2.length;
      t1 = (t1 - 1 & t3 - 1) >>> 0;
      this._head = t1;
      if (t1 < 0 || t1 >= t3)
        return H.ioore(t2, t1);
      t2[t1] = element;
      if (t1 === this._tail)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      this._modificationCount = this._modificationCount + 1;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $asIterableBase: null,
    static: {"": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "": "Object;_queue,_end,_modificationCount,_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.core", "dart:core", , P, {
  "": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 9],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit, charCodes;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10) {
            t2 = buffer._contents + "\\n";
            buffer._contents = t2;
          } else if (codeUnit === 13) {
            t2 = buffer._contents + "\\r";
            buffer._contents = t2;
          } else if (codeUnit === 9) {
            t2 = buffer._contents + "\\t";
            buffer._contents = t2;
          } else {
            t2 = buffer._contents + "\\x";
            buffer._contents = t2;
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
            charCodes = P.List_List$filled(1, t2, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            t2 = buffer._contents + t2;
            buffer._contents = t2;
          }
        else if (codeUnit === 92) {
          t2 = buffer._contents + "\\\\";
          buffer._contents = t2;
        } else if (codeUnit === 34) {
          t2 = buffer._contents + "\\\"";
          buffer._contents = t2;
        } else {
          charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          t2 = buffer._contents + t2;
          buffer._contents = t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 10],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 11],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1, $length, fixedList, t2, i, t3;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    $length = list.length;
    t1 = Array($length);
    t1.fixed$length = init;
    fixedList = H.setRuntimeTypeInfo(t1, [$E]);
    for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
      if (i >= t1)
        return H.ioore(list, i);
      t3 = list[i];
      if (i >= t2)
        return H.ioore(fixedList, i);
      fixedList[i] = t3;
    }
    return fixedList;
  },
  List_List$generate: function($length, generator, growable, $E) {
    var result, t1, i;
    if (growable) {
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
    } else {
      t1 = Array($length);
      t1.fixed$length = init;
      result = H.setRuntimeTypeInfo(t1, [$E]);
    }
    for (i = 0; i < $length; ++i) {
      t1 = generator.call$1(i);
      if (i >= result.length)
        return H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  NoSuchMethodError_toString_closure: {
    "": "Closure:21;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(P._symbolToString(key));
    }
  },
  Comparable: {
    "": "Object;"
  },
  DateTime: {
    "": "Object;"
  },
  Duration: {
    "": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "": "Closure:22;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n > 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "": "Closure:22;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  StackOverflowError: {
    "": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "": "Object;message",
    toString$0: function(_) {
      return "FormatException: " + this.message;
    },
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  Expando: {
    "": "Object;name",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Iterator: {
    "": "Object;"
  },
  Null: {
    "": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  Match: {
    "": "Object;"
  },
  StackTrace: {
    "": "Object;"
  },
  Stopwatch: {
    "": "Object;_core$_start,_stop",
    start$0: function(_) {
      var t1, t2, t3;
      t1 = this._core$_start == null;
      if (!t1 && this._stop == null)
        return;
      if (t1)
        this._core$_start = H.Primitives_numMicroseconds();
      else {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._stop;
        t3 = this._core$_start;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._core$_start = t1 - (t2 - t3);
        this._stop = null;
      }
    },
    reset$0: function(_) {
      var t1;
      if (this._core$_start == null)
        return;
      t1 = H.Primitives_numMicroseconds();
      this._core$_start = t1;
      if (this._stop != null)
        this._stop = t1;
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._core$_start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      if (t2 == null) {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._core$_start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 - t2;
        t1 = t2;
      } else {
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 - t1;
      }
      return t1;
    }
  },
  StringBuffer: {
    "": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents = this._contents + separator;
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "": "",
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "": "Element;",
    "%": "HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDirectoryElement|HTMLDivElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "": "HtmlElement;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  CanvasElement: {
    "": "HtmlElement;height%,width%",
    getContext$2: function(receiver, contextId, attrs) {
      return receiver.getContext(contextId);
    },
    getContext$1: function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    $isCanvasElement: true,
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext: {
    "": "Interceptor;",
    "%": "CanvasRenderingContext2D;CanvasRenderingContext"
  },
  CharacterData: {
    "": "Node;length=",
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  DetailsElement: {
    "": "HtmlElement;",
    open$3$async: function($receiver, arg0, arg1, arg2) {
      return this.open.call$3$async(arg0, arg1, arg2);
    },
    "%": "HTMLDetailsElement"
  },
  DialogElement: {
    "": "HtmlElement;",
    open$3$async: function($receiver, arg0, arg1, arg2) {
      return this.open.call$3$async(arg0, arg1, arg2);
    },
    "%": "HTMLDialogElement"
  },
  Document: {
    "": "Node;",
    "%": "SVGDocument;Document"
  },
  DomException: {
    "": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "": "Node;",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Rectangle(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight), [null]);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false), [null]);
    },
    "%": ";Element"
  },
  EmbedElement: {
    "": "HtmlElement;height%,width%",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "": "Interceptor;",
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
  },
  EventTarget: {
    "": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    "%": "MediaStream;EventTarget"
  },
  FormElement: {
    "": "HtmlElement;length=",
    "%": "HTMLFormElement"
  },
  HtmlDocument: {
    "": "Document;body=",
    "%": "HTMLDocument"
  },
  HttpRequest: {
    "": "HttpRequestEventTarget;status=,statusText=",
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    send$0: function($receiver) {
      return $receiver.send();
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "": "HtmlElement;height%,width%",
    "%": "HTMLIFrameElement"
  },
  ImageElement: {
    "": "HtmlElement;crossOrigin},height%,src},width%",
    $isImageElement: true,
    "%": "HTMLImageElement"
  },
  InputElement: {
    "": "HtmlElement;height%,width%",
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "": "UIEvent;",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    "%": "KeyboardEvent"
  },
  MediaElement: {
    "": "HtmlElement;error=",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MouseEvent: {
    "": "UIEvent;button=",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  Node: {
    "": "EventTarget;",
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    "%": "Attr|DocumentFragment|DocumentType|Entity|Notation|ShadowRoot;Node"
  },
  ObjectElement: {
    "": "HtmlElement;height%,width%",
    "%": "HTMLObjectElement"
  },
  ProgressElement: {
    "": "HtmlElement;position=",
    "%": "HTMLProgressElement"
  },
  ScriptElement: {
    "": "HtmlElement;crossOrigin},src}",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "": "HtmlElement;length=",
    "%": "HTMLSelectElement"
  },
  SpeechRecognitionError: {
    "": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  Touch0: {
    "": "Interceptor;",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    "%": "Touch"
  },
  TouchEvent: {
    "": "UIEvent;changedTouches=",
    "%": "TouchEvent"
  },
  TouchList: {
    "": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Touch0];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "TouchList"
  },
  UIEvent: {
    "": "Event;",
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
  },
  VideoElement: {
    "": "MediaElement;height%,width%",
    $isVideoElement: true,
    "%": "HTMLVideoElement"
  },
  Window: {
    "": "EventTarget;status=",
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
        (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMWindow|Window"
  },
  Console: {
    "": "Object;",
    error$1: [function(_, arg) {
      return typeof console != "undefined" ? console.error(arg) : null;
    }, "call$1", "get$error", 2, 0, 23],
    static: {"": "Console__safeConsole"}
  },
  Interceptor_ListMixin: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Touch0];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Touch0];
    }
  },
  EventStreamProvider: {
    "": "Object;_eventType"
  },
  _EventStream: {
    "": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    $asStream: null
  },
  _ElementEventStreamImpl: {
    "": "_EventStream;_target,_eventType,_useCapture",
    $as_EventStream: null
  },
  _EventStreamSubscription: {
    "": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    $asStreamSubscription: null
  },
  ImmutableListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    $isList: true,
    $asList: null
  },
  FixedSizeListIterator: {
    "": "Object;_array,_html$_length,_html$_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._html$_position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._html$_position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._html$_position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "": "",
  FEBlendElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "": "SvgElement;x=,y=,z=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "": "SvgElement;x=,y=,z=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GraphicsElement: {
    "": "SvgElement;",
    "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "": "SvgElement;height=,width=,x=,y=",
    "%": "SVGPatternElement"
  },
  Rect: {
    "": "Interceptor;x%,y%",
    "%": "SVGRect"
  },
  RectElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  SvgElement: {
    "": "Element;",
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGUseElement"
  }
}],
["dart.dom.web_gl", "dart:web_gl", , P, {
  "": "",
  RenderingContext: {
    "": "CanvasRenderingContext;",
    activeTexture$1: function(receiver, texture) {
      return receiver.activeTexture(texture);
    },
    attachShader$2: function(receiver, program, shader) {
      return receiver.attachShader(program, shader);
    },
    bindBuffer$2: function(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindTexture$2: function(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    bufferData$3: function(receiver, target, data_OR_size, usage) {
      return receiver.bufferData(target, data_OR_size, usage);
    },
    clear$1: function(receiver, mask) {
      return receiver.clear(mask);
    },
    clearColor$4: function(receiver, red, green, blue, alpha) {
      return receiver.clearColor(red, green, blue, alpha);
    },
    compileShader$1: function(receiver, shader) {
      return receiver.compileShader(shader);
    },
    createBuffer$0: function(receiver) {
      return receiver.createBuffer();
    },
    createProgram$0: function(receiver) {
      return receiver.createProgram();
    },
    createShader$1: function(receiver, type) {
      return receiver.createShader(type);
    },
    createTexture$0: function(receiver) {
      return receiver.createTexture();
    },
    deleteBuffer$1: function(receiver, buffer) {
      return receiver.deleteBuffer(buffer);
    },
    disableVertexAttribArray$1: function(receiver, index) {
      return receiver.disableVertexAttribArray(index);
    },
    drawElements$4: function(receiver, mode, count, type, offset) {
      return receiver.drawElements(mode, count, type, offset);
    },
    enableVertexAttribArray$1: function(receiver, index) {
      return receiver.enableVertexAttribArray(index);
    },
    getAttribLocation$2: function(receiver, program, $name) {
      return receiver.getAttribLocation(program, $name);
    },
    getProgramParameter$2: function(receiver, program, pname) {
      return receiver.getProgramParameter(program, pname);
    },
    getShaderInfoLog$1: function(receiver, shader) {
      return receiver.getShaderInfoLog(shader);
    },
    getShaderParameter$2: function(receiver, shader, pname) {
      return receiver.getShaderParameter(shader, pname);
    },
    getUniformLocation$2: function(receiver, program, $name) {
      return receiver.getUniformLocation(program, $name);
    },
    linkProgram$1: function(receiver, program) {
      return receiver.linkProgram(program);
    },
    shaderSource$2: function(receiver, shader, string) {
      return receiver.shaderSource(shader, string);
    },
    texImage2D$9: function(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
      var t1, t2;
      if (border_OR_canvas_OR_image_OR_pixels_OR_video == null)
        t1 = true;
      else
        t1 = false;
      if (t1) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, P.convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
        return;
      }
      t1 = J.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video);
      if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!t1.$isImageElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!t1.$isCanvasElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!t1.$isVideoElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
        t1 = true;
      else
        t1 = false;
      if (t1) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      throw H.wrapException(new P.ArgumentError("Incorrect number or type of arguments"));
    },
    texImage2D$6: function($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
      return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, null, null, null);
    },
    texParameteri$3: function(receiver, target, pname, param) {
      return receiver.texParameteri(target, pname, param);
    },
    uniform1i$2: function(receiver, $location, x) {
      return receiver.uniform1i($location, x);
    },
    uniform4fv$2: function(receiver, $location, v) {
      return receiver.uniform4fv($location, v);
    },
    uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix4fv($location, transpose, array);
    },
    useProgram$1: function(receiver, program) {
      return receiver.useProgram(program);
    },
    vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
      return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    },
    viewport$4: function(receiver, x, y, width, height) {
      return receiver.viewport(x, y, width, height);
    },
    "%": "WebGLRenderingContext"
  },
  UniformLocation: {
    "": "Interceptor;",
    "%": "WebGLUniformLocation"
  }
}],
["dart.math", "dart:math", , P, {
  "": "",
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    var t1;
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    var t1;
    if (typeof a !== "number")
      throw H.wrapException(new P.ArgumentError(a));
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (isNaN(b))
        return b;
      return a;
    }
    if (b === 0)
      t1 = a === 0 ? 1 / a < 0 : a < 0;
    else
      t1 = false;
    if (t1)
      return b;
    return a;
  },
  Point: {
    "": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isPoint)
        return false;
      t1 = this.x;
      t2 = other.x;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.y;
        t2 = other.y;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 + t3, t4 + t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 - t3, t4 - t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $mul: function(_, factor) {
      var t1, t2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = new P.Point(t1 * factor, t2 * factor);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $isPoint: true
  },
  _RectangleBase: {
    "": "Object;",
    toString$0: function(_) {
      return "Rectangle (" + H.S(this.get$left()) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isRectangle)
        return false;
      t1 = this.get$left();
      t2 = other.left;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.top;
        t2 = other.top;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this.width;
          t2 = other.width;
          if (t1 == null ? t2 == null : t1 === t2) {
            t1 = this.height;
            t2 = other.height;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(this.get$left());
      t2 = J.get$hashCode$(this.top);
      t3 = J.get$hashCode$(this.width);
      t4 = J.get$hashCode$(this.height);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    }
  },
  Rectangle: {
    "": "_RectangleBase;left<,top,width,height",
    $isRectangle: true,
    $as_RectangleBase: null
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "": "",
  _ensureNativeList: function(list) {
    return list;
  },
  TypedData: {
    "": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
    },
    "%": "DataView;ArrayBufferView;_NativeTypedArray|_NativeTypedArray_ListMixin|_NativeTypedArray_ListMixin_FixedLengthListMixin|_NativeTypedArrayOfDouble|_NativeTypedArray_ListMixin0|_NativeTypedArray_ListMixin_FixedLengthListMixin0|_NativeTypedArrayOfInt"
  },
  Float32List: {
    "": "_NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Float32Array"
  },
  Float64List: {
    "": "_NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Float64Array"
  },
  Int16List: {
    "": "_NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Int16Array"
  },
  Int32List: {
    "": "_NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Int32Array"
  },
  Int8List: {
    "": "_NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Int8Array"
  },
  Uint16List: {
    "": "_NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Uint16Array"
  },
  Uint32List: {
    "": "_NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "Uint32Array"
  },
  Uint8ClampedList: {
    "": "_NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  Uint8List: {
    "": "_NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    "%": ";Uint8Array"
  },
  _NativeTypedArray: {
    "": "TypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: true
  },
  _NativeTypedArrayOfDouble: {
    "": "_NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    }
  },
  _NativeTypedArray_ListMixin: {
    "": "_NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    }
  },
  _NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "": "_NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  _NativeTypedArrayOfInt: {
    "": "_NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    }
  },
  _NativeTypedArray_ListMixin0: {
    "": "_NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    }
  },
  _NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "": "_NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["html_common", "dart:html_common", , P, {
  "": "",
  convertDartToNative_ImageData: function(imageData) {
    return imageData;
  }
}],
["vapor", "package:vapor/vapor.dart", , Q, {
  "": "",
  FileDownloader_Download: function(url, callback) {
    var request, exception, t1, t2;
    request = new XMLHttpRequest();
    try {
      J.open$3$async$x(request, "GET", url, false);
      J.send$0$x(request);
    } catch (exception) {
      H.unwrapException(exception);
      window;
      $.get$Console__safeConsole().toString;
      if (typeof console != "undefined")
        console.log("Exception caught in FileDownloader.Download()");
    }

    if (J.get$status$x(request) === 200)
      ;
    else {
      window;
      t1 = $.get$Console__safeConsole();
      t2 = C.JSString_methods.$add("FileDownloader Error! " + J.toString$0(J.get$status$x(request)) + " ", J.get$statusText$x(request));
      t1.toString;
      if (typeof console != "undefined")
        console.log(t2);
    }
    return request;
  },
  Component: {
    "": "Object;",
    Awake$0: function() {
      return;
    },
    Start$0: function() {
      return;
    },
    Update$0: function() {
      return;
    },
    Render$0: function() {
      return;
    },
    OnCollision$1: function(contact) {
    }
  },
  GameObject: {
    "": "Object;name,components,children,scene,transform,renderer,collider,rigidbody,camera",
    AddComponent$1: function(component) {
      component.gameObject = this;
      component.transform = this.transform;
      if (!!component.$isRenderer)
        this.renderer = component;
      else if (!!component.$isCamera)
        this.camera = component;
      else if (!!component.$isCollider) {
        this.collider = component;
        this.rigidbody = component.body;
      }
      this.components.push(component);
      component.Awake$0();
    },
    Start$0: function() {
      var t1, i;
      for (t1 = this.components, i = 0; i < t1.length; ++i)
        t1[i].Start$0();
    },
    Update$0: function() {
      var t1, i, t2;
      for (t1 = this.components, i = 0; i < t1.length; ++i) {
        t2 = t1[i];
        if (t2.enabled)
          t2.Update$0();
      }
    },
    Render$0: function() {
      var t1, i, t2;
      for (t1 = this.components, i = 0; i < t1.length; ++i) {
        t2 = t1[i];
        if (t2.enabled)
          t2.Render$0();
      }
    },
    OnCollision$1: function(contact) {
      var t1, i;
      for (t1 = this.components, i = 0; i < t1.length; ++i)
        t1[i].OnCollision$1(contact);
    },
    static: {GameObject_CreateCamera: function() {
        var cameraObject, camera;
        cameraObject = new Q.GameObject("GameObject", [], [], null, Q.Transform$(), null, null, null, null);
        cameraObject.name = "Camera";
        camera = new Q.Camera("Camera", $.get$Color_UnityBlue(), 45, null, 0.1, 1000, null, "Component", true, null, null);
        camera.Camera$0();
        cameraObject.AddComponent$1(camera);
        return cameraObject;
      }, GameObject_CreateQuad: function() {
        var quadObject, meshRenderer, mesh, t1;
        quadObject = new Q.GameObject("GameObject", [], [], null, Q.Transform$(), null, null, null, null);
        quadObject.name = "Quad";
        meshRenderer = new Q.MeshRenderer("MeshRenderer", null, "Renderer", null, "Component", true, null, null);
        mesh = new Q.Mesh("New Mesh", null, null, 0, null, null, null, null, null, null, 0);
        mesh.name = "Quad";
        mesh.set$vertices(new Float32Array(P._ensureNativeList([0.5, 0.5, 0, -0.5, 0.5, 0, 0.5, -0.5, 0, -0.5, -0.5, 0])));
        mesh.set$uv(new Float32Array(P._ensureNativeList([1, 1, 0, 1, 1, 0, 0, 0])));
        mesh._normals = new Float32Array(P._ensureNativeList([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]));
        J.deleteBuffer$1$x($.gl, mesh.normalBuffer);
        t1 = J.createBuffer$0$x($.gl);
        mesh.normalBuffer = t1;
        J.bindBuffer$2$x($.gl, 34962, t1);
        J.bufferData$3$x($.gl, 34962, mesh._normals, 35044);
        mesh.set$triangles(new Uint16Array(P._ensureNativeList([0, 1, 2, 1, 3, 2])));
        meshRenderer.mesh = mesh;
        quadObject.AddComponent$1(meshRenderer);
        return quadObject;
      }, GameObject_CreateCircle: function(radius, segments, startAngle, angularSize) {
        var circleObject, meshRenderer;
        circleObject = new Q.GameObject("GameObject", [], [], null, Q.Transform$(), null, null, null, null);
        circleObject.name = "Circle";
        meshRenderer = new Q.MeshRenderer("MeshRenderer", null, "Renderer", null, "Component", true, null, null);
        meshRenderer.mesh = Q.Mesh_CreateCircle(radius, segments, startAngle, angularSize);
        circleObject.AddComponent$1(meshRenderer);
        return circleObject;
      }}
  },
  Scene: {
    "": "Object;name,gameObjects,cameras,Paused,canvas,world",
    AddGameObject$1: function(gameObject) {
      var t1, t2, i, t3;
      gameObject.scene = this;
      for (t1 = gameObject.components, t2 = this.cameras, i = 0; i < t1.length; ++i) {
        t3 = t1[i];
        if (!!t3.$isCamera)
          t2.push(t3);
      }
      this.gameObjects.push(gameObject);
      gameObject.Start$0();
    },
    Clear$0: function() {
      C.JSArray_methods.set$length(this.gameObjects, 0);
      var t1 = new Float32Array(2);
      t1[0] = 0;
      t1[1] = 0;
      this.world = V.World$(new T.Vector2(t1), true, V.DefaultWorldPool$());
    },
    Update$1: [function(time) {
      var t1, t2, i, t3, t4, t5;
      if (!this.Paused) {
        t1 = $.get$Time__stopwatch();
        if (!(t1._core$_start != null && t1._stop == null))
          t1.start$0(t1);
        $.Time_deltaTime = C.JSNumber_methods._tdivFast$1($.get$Time__stopwatch().get$elapsedTicks() * 1000, 1000000) / 1000;
        t1 = $.get$Time__stopwatch();
        t1.reset$0(t1);
        t1 = this.world;
        t2 = t1._flags;
        if ((t2 & 1) === 1) {
          t2 = t1._contactManager;
          t2.broadPhase.updatePairs$1(t2.get$_addPair());
          t2 = t1._flags & 4294967294;
          t1._flags = t2;
        }
        t1._flags = t2 | 2;
        t2 = t1.timestep;
        t2.dt = 0.016666666666666666;
        t2.velocityIterations = 10;
        t2.positionIterations = 10;
        t2.inv_dt = 60;
        t2.dtRatio = t1._inverseTimestep * 0.016666666666666666;
        t2.warmStarting = t1._warmStarting;
        t1._contactManager.collide$0();
        if (t2.dt > 0) {
          t1.solve$1(t2);
          if (t1._continuousPhysics)
            t1.solveTimeOfImpact$0();
          t1._inverseTimestep = t2.inv_dt;
        }
        if ((t1._flags & 4) === 4)
          t1.clearForces$0();
        t1._flags = t1._flags & 4294967293;
        this.world.clearForces$0();
        for (t1 = this.gameObjects, i = 0; i < t1.length; ++i)
          t1[i].Update$0();
        t1 = $.get$Keyboard__currentFrame();
        t2 = P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
        t2.addAll$1(t2, t1);
        $.Keyboard__previousFrame = t2;
        t2 = $.get$Keyboard__nextFrame();
        t1 = P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
        t1.addAll$1(t1, t2);
        $.Keyboard__currentFrame = t1;
        t1 = $.get$Mouse_deltaMousePosition();
        t2 = $.get$Mouse__nextMousePosition().storage;
        t3 = t2[0];
        t4 = $.get$Mouse_mousePosition().storage;
        t5 = t4[0];
        t1 = t1.storage;
        t1[0] = t3 - t5;
        t1[1] = t2[1] - t4[1];
        t4[0] = t2[0];
        t4[1] = t2[1];
        t2 = $.get$Mouse__currentFrame();
        t4 = P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
        t4.addAll$1(t4, t2);
        $.Mouse__previousFrame = t4;
        t4 = $.get$Mouse__nextFrame();
        t2 = P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
        t2.addAll$1(t2, t4);
        $.Mouse__currentFrame = t2;
        Q.Touch_Update();
        this.Render$0();
        t2 = window;
        t4 = this.get$Update();
        C.Window_methods._ensureRequestAnimationFrame$0(t2);
        C.Window_methods._requestAnimationFrame$1(t2, W._wrapZone(t4));
      }
    }, "call$1", "get$Update", 2, 0, 24],
    Render$0: function() {
      var t1, t2, i, j, viewMatrix, t3;
      t1 = $.gl;
      t2 = t1.canvas;
      J.viewport$4$x(t1, 0, 0, t2.width, t2.height);
      for (t1 = this.cameras, t2 = this.gameObjects, i = 0; i < t1.length; ++i) {
        t1[i].Clear$0();
        for (j = 0; j < t2.length; ++j) {
          if (t2[j].renderer != null) {
            if (i >= t1.length)
              return H.ioore(t1, i);
            viewMatrix = new T.Matrix4(new Float32Array(16));
            viewMatrix.setFrom$1(t1[i].transform.modelMatrix);
            viewMatrix.invert$0();
            if (j >= t2.length)
              return H.ioore(t2, j);
            t2[j].renderer.material.SetMatrix$2("uViewMatrix", viewMatrix);
            if (j >= t2.length)
              return H.ioore(t2, j);
            t3 = t2[j].renderer.material;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t3.SetMatrix$2("uProjectionMatrix", t1[i].get$projectionMatrix());
          }
          if (j >= t2.length)
            return H.ioore(t2, j);
          t2[j].Render$0();
        }
      }
    },
    WindowResized$1: [function($event) {
      var t1, t2, t3, i;
      t1 = this.canvas;
      J.set$width$x(t1.element, window.innerWidth);
      J.set$height$x(t1.element, window.innerHeight);
      t2 = $.gl;
      t1 = t1.element;
      t3 = J.getInterceptor$x(t1);
      J.viewport$4$x(t2, 0, 0, t3.get$width(t1), t3.get$height(t1));
      for (t1 = this.cameras, i = 0; i < t1.length; ++i)
        t1[i].OnWindowResized$1($event);
    }, "call$1", "get$WindowResized", 2, 0, 25],
    Scene$FromCanvas$1: function(canvas) {
      var t1, t2;
      this.canvas = canvas;
      t1 = window;
      t2 = this.get$Update();
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
      t2 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_resize._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$WindowResized()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      new Q.Keyboard().Keyboard$0();
      new Q.Mouse().Mouse$0();
      new Q.Touch().Touch$0();
    }
  },
  Camera: {
    "": "Component;vapor$Camera$name,backgroundColor,fieldOfView,aspect,nearClipPlane,farClipPlane,projectionMatrix<,name,enabled,gameObject,transform",
    Awake$0: function() {
      var t1, t2, t3, t4, t5, r, z, x, y, temp, rotatedEye;
      t1 = this.transform;
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(0, 0, -10);
      t1.set$position(t1, t2);
      t2 = this.transform;
      t1 = new T.Vector3(new Float32Array(3));
      t1.setValues$3(0, 0, 0);
      t3 = new T.Vector3(new Float32Array(3));
      t3.setValues$3(0, 1, 0);
      t4 = t2.get$position(t2);
      t5 = new Float32Array(16);
      r = new T.Matrix4(t5);
      z = t4.$sub(t4, t1);
      z.normalize$0();
      x = t3.cross$1(z);
      x.normalize$0();
      y = z.cross$1(x);
      y.normalize$0();
      r.setZero$0();
      t5[15] = 1;
      t3 = x.storage;
      t5[0] = t3[0];
      t5[1] = t3[1];
      t5[2] = t3[2];
      t3 = y.storage;
      t5[4] = t3[0];
      t5[5] = t3[1];
      t5[6] = t3[2];
      t3 = z.storage;
      t5[8] = t3[0];
      t5[9] = t3[1];
      t5[10] = t3[2];
      temp = t5[4];
      t5[4] = t5[1];
      t5[1] = temp;
      temp = t5[8];
      t5[8] = t5[2];
      t5[2] = temp;
      temp = t5[12];
      t5[12] = t5[3];
      t5[3] = temp;
      temp = t5[9];
      t5[9] = t5[6];
      t5[6] = temp;
      temp = t5[13];
      t5[13] = t5[7];
      t5[7] = temp;
      temp = t5[14];
      t5[14] = t5[11];
      t5[11] = temp;
      t4 = t4.storage;
      t3 = new T.Vector3(new Float32Array(3));
      t3.setValues$3(-t4[0], -t4[1], -t4[2]);
      rotatedEye = r.$mul(r, t3);
      t5[12] = rotatedEye.get$x(rotatedEye);
      t5[13] = rotatedEye.get$y(rotatedEye);
      t5[14] = rotatedEye.get$z(rotatedEye);
      t2.modelMatrix = r;
    },
    Update$0: function() {
      return;
    },
    Clear$0: function() {
      var t1, t2;
      t1 = $.gl;
      t2 = this.backgroundColor.storage;
      J.clearColor$4$x(t1, t2[0], t2[1], t2[2], t2[3]);
      J.clear$1$ax($.gl, 16640);
    },
    OnWindowResized$1: function($event) {
      var t1, t2;
      t1 = $.gl.canvas;
      t2 = t1.width;
      t1 = t1.height;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = t2 / t1;
      this.aspect = t1;
      this.projectionMatrix = T.makePerspectiveMatrix(this.fieldOfView * 0.017453292519943295, t1, this.nearClipPlane, this.farClipPlane);
    },
    ScreenToWorld$2: function(screenPoint, z) {
      var t1, pickWorld, t2, t3;
      t1 = new Float32Array(3);
      pickWorld = new T.Vector3(t1);
      t2 = this.projectionMatrix;
      t3 = J.getInterceptor$x(screenPoint);
      if (!T.unproject(t2.$mul(t2, this.transform.modelMatrix), 0, window.innerWidth, 0, window.innerHeight, t3.get$x(screenPoint), t3.get$y(screenPoint), z, pickWorld)) {
        window;
        $.get$Console__safeConsole().toString;
        if (typeof console != "undefined")
          console.log("FAIL!!!!");
      }
      t1[1] = -t1[1];
      return pickWorld;
    },
    WorldToScreen$1: function(worldPoint) {
      var t1, screenPoint, t2, _x, _y, _z, t3, t4, t5, t6, d;
      t1 = new Float32Array(3);
      screenPoint = new T.Vector3(t1);
      screenPoint.setFrom$1(worldPoint);
      t2 = this.projectionMatrix;
      t2 = t2.$mul(t2, this.transform.modelMatrix);
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      t2 = t2.get$storage();
      t3 = t2.length;
      if (3 >= t3)
        return H.ioore(t2, 3);
      t4 = t2[3];
      if (7 >= t3)
        return H.ioore(t2, 7);
      t5 = t2[7];
      if (11 >= t3)
        return H.ioore(t2, 11);
      t6 = t2[11];
      if (15 >= t3)
        return H.ioore(t2, 15);
      d = 1 / (t4 * _x + t5 * _y + t6 * _z + t2[15]);
      t1[0] = (t2[0] * _x + t2[4] * _y + t2[8] * _z + t2[12]) * d;
      t1[1] = (t2[1] * _x + t2[5] * _y + t2[9] * _z + t2[13]) * d;
      t1[2] = (t2[2] * _x + t2[6] * _y + t2[10] * _z + t2[14]) * d;
      t1[0] = (t1[0] + 1) * 0.5;
      t1[1] = (-t1[1] + 1) * 0.5;
      t2 = t1[0];
      t6 = window.innerWidth;
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1[0] = t2 * t6;
      t6 = t1[1];
      t2 = window.innerHeight;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[1] = t6 * t2;
      return screenPoint;
    },
    Camera$0: function() {
      var t1, t2;
      t1 = $.gl.canvas;
      t2 = t1.width;
      t1 = t1.height;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = t2 / t1;
      this.aspect = t1;
      this.projectionMatrix = T.makePerspectiveMatrix(this.fieldOfView * 0.017453292519943295, t1, this.nearClipPlane, this.farClipPlane);
    },
    $isCamera: true
  },
  Canvas: {
    "": "Object;element",
    Canvas$0: function() {
      var e, t1, t2, e0, t3, exception;
      t1 = window.innerWidth;
      t2 = window.innerHeight;
      e0 = document.createElement("canvas", null);
      if (t1 != null)
        J.set$width$x(e0, t1);
      if (t2 != null)
        J.set$height$x(e0, t2);
      this.element = e0;
      e0.id = "VaporCanvas";
      e0.tabIndex = 0;
      e0.focus();
      document.body.appendChild(this.element);
      try {
        t1 = J.getContext$1$x(this.element, "webgl");
        $.gl = t1;
        if (t1 == null) {
          window;
          $.get$Console__safeConsole().toString;
          if (typeof console != "undefined")
            console.log("Using experimental context.");
          t1 = J.getContext$1$x(this.element, "experimental-webgl");
          $.gl = t1;
        }
        t2 = this.element;
        t3 = J.getInterceptor$x(t2);
        J.viewport$4$x(t1, 0, 0, t3.get$width(t2), t3.get$height(t2));
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        window;
        t1 = $.get$Console__safeConsole();
        t2 = C.JSString_methods.$add("Exception caught. ", e);
        t1.toString;
        if (typeof console != "undefined")
          console.error(t2);
      }

      if ($.gl == null)
        window.alert("Unable to initialize WebGL.");
    },
    static: {Canvas$: function() {
        var t1 = new Q.Canvas(null);
        t1.Canvas$0();
        return t1;
      }}
  },
  Material: {
    "": "Object;shader,textureCount,_cache,_textureIndices",
    SetMatrix$2: function($name, matrix) {
      var t1, t2;
      t1 = this.shader;
      J.useProgram$1$x($.gl, t1.program);
      if (!this._cache.containsKey$1($name)) {
        t1 = this._cache;
        t1.$indexSet(t1, $name, J.getUniformLocation$2$x($.gl, this.shader.program, $name));
      }
      t1 = $.gl;
      t2 = this._cache;
      J.uniformMatrix4fv$3$x(t1, t2.$index(t2, $name), false, matrix.get$storage());
    },
    SetVector$2: function($name, vector) {
      var t1, t2;
      if (vector == null) {
        window;
        t1 = $.get$Console__safeConsole();
        t2 = "Vector is undefined! (" + $name + ")";
        t1.toString;
        if (typeof console != "undefined")
          console.log(t2);
        return;
      }
      t1 = this.shader;
      J.useProgram$1$x($.gl, t1.program);
      if (!this._cache.containsKey$1($name)) {
        t1 = this._cache;
        t1.$indexSet(t1, $name, J.getUniformLocation$2$x($.gl, this.shader.program, $name));
      }
      t1 = $.gl;
      t2 = this._cache;
      J.uniform4fv$2$x(t1, t2.$index(t2, $name), vector.storage);
    },
    SetTexture$2: function($name, texture) {
      var t1, t2, t3;
      if (texture == null) {
        window;
        t1 = $.get$Console__safeConsole();
        t2 = "Texture is undefined! (" + $name + ")";
        t1.toString;
        if (typeof console != "undefined")
          console.log(t2);
        return;
      }
      t1 = this.shader;
      J.useProgram$1$x($.gl, t1.program);
      if (!this._cache.containsKey$1($name)) {
        if (this.textureCount >= 31) {
          window;
          $.get$Console__safeConsole().toString;
          if (typeof console != "undefined")
            console.log("The maximum number of textures (32) is already bound!");
          return;
        }
        t1 = this._cache;
        t1.$indexSet(t1, $name, J.getUniformLocation$2$x($.gl, this.shader.program, $name));
        t1 = this._textureIndices;
        t1.$indexSet(t1, $name, this.textureCount);
        this.textureCount = this.textureCount + 1;
      }
      t1 = $.gl;
      t2 = this._textureIndices;
      t2 = t2.$index(t2, $name);
      if (typeof t2 !== "number")
        return H.iae(t2);
      J.activeTexture$1$x(t1, 33984 + t2);
      J.bindTexture$2$x($.gl, 3553, texture.get$glTexture());
      t2 = $.gl;
      t1 = this._cache;
      t1 = t1.$index(t1, $name);
      t3 = this._textureIndices;
      J.uniform1i$2$x(t2, t1, t3.$index(t3, $name));
    },
    Material$1: function(shader) {
      var t1;
      this.shader = shader;
      this.textureCount = 0;
      this._cache = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.UniformLocation);
      this._textureIndices = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, J.JSInt);
      t1 = this.shader;
      J.useProgram$1$x($.gl, t1.program);
    },
    static: {Material$: function(shader) {
        var t1 = new Q.Material(null, 0, null, null);
        t1.Material$1(shader);
        return t1;
      }}
  },
  Mesh: {
    "": "Object;name,_vertices,vertexBuffer,vertexCount,_uv,uvBuffer,_normals,normalBuffer,_triangles,indexBuffer,indexCount",
    set$vertices: function(newVertices) {
      var t1;
      this._vertices = newVertices;
      J.deleteBuffer$1$x($.gl, this.vertexBuffer);
      t1 = J.createBuffer$0$x($.gl);
      this.vertexBuffer = t1;
      J.bindBuffer$2$x($.gl, 34962, t1);
      J.bufferData$3$x($.gl, 34962, this._vertices, 35044);
      this.vertexCount = C.JSInt_methods._tdivFast$1(this._vertices.length, 3);
    },
    set$uv: function(newUVs) {
      var t1;
      this._uv = newUVs;
      J.deleteBuffer$1$x($.gl, this.uvBuffer);
      t1 = J.createBuffer$0$x($.gl);
      this.uvBuffer = t1;
      J.bindBuffer$2$x($.gl, 34962, t1);
      J.bufferData$3$x($.gl, 34962, this._uv, 35044);
    },
    set$triangles: function(newTriangles) {
      var t1;
      this._triangles = newTriangles;
      J.deleteBuffer$1$x($.gl, this.indexBuffer);
      t1 = J.createBuffer$0$x($.gl);
      this.indexBuffer = t1;
      J.bindBuffer$2$x($.gl, 34963, t1);
      J.bufferData$3$x($.gl, 34963, this._triangles, 35044);
      this.indexCount = this._triangles.length;
    },
    static: {Mesh_CreateLine: function(points, width) {
        var mesh, halfWidth, vertices, triangles, t1, point, t2, t3, i, i0;
        mesh = new Q.Mesh("New Mesh", null, null, 0, null, null, null, null, null, null, 0);
        mesh.name = "Line";
        halfWidth = width / 2;
        vertices = [];
        triangles = [];
        for (t1 = new H.ListIterator(points, points.length, 0, null); t1.moveNext$0();) {
          point = t1._current;
          t2 = J.getInterceptor$x(point);
          vertices.push(t2.get$x(point));
          t3 = t2.get$y(point);
          if (typeof t3 !== "number")
            return t3.$add();
          vertices.push(t3 + halfWidth);
          vertices.push(t2.get$z(point));
          vertices.push(t2.get$x(point));
          t3 = t2.get$y(point);
          if (typeof t3 !== "number")
            return t3.$sub();
          vertices.push(t3 - halfWidth);
          vertices.push(t2.get$z(point));
        }
        mesh.set$vertices(new Float32Array(P._ensureNativeList(vertices)));
        for (i = 0; i < points.length; i = i0) {
          triangles.push(i);
          t1 = i + 1;
          triangles.push(t1);
          i0 = i + 2;
          triangles.push(i0);
          triangles.push(t1);
          triangles.push(i + 3);
          triangles.push(i0);
        }
        mesh.set$triangles(new Uint16Array(P._ensureNativeList(triangles)));
        return mesh;
      }, Mesh_CreateCircle: function(radius, segments, startAngle, angularSize) {
        var mesh, uvs, vertices, triangles, t1, stepAngle, i, angle, t2, t3, i0;
        mesh = new Q.Mesh("New Mesh", null, null, 0, null, null, null, null, null, null, 0);
        mesh.name = "Circle";
        uvs = H.setRuntimeTypeInfo([], [T.Vector2]);
        vertices = H.setRuntimeTypeInfo([], [T.Vector3]);
        triangles = H.setRuntimeTypeInfo([], [J.JSInt]);
        vertices.push(new T.Vector3(new Float32Array(3)));
        t1 = new Float32Array(2);
        t1[0] = 0.5;
        t1[1] = 0.5;
        uvs.push(new T.Vector2(t1));
        stepAngle = angularSize / segments;
        for (i = 0; i <= segments; ++i) {
          t1 = new Float32Array(3);
          angle = startAngle + stepAngle * i;
          t1[0] = radius * Math.cos(angle);
          t1[1] = radius * Math.sin(angle);
          vertices.push(new T.Vector3(t1));
          t2 = t1[0];
          t1 = t1[1];
          t3 = new Float32Array(2);
          t3[0] = (t2 / radius + 1) / 2;
          t3[1] = (t1 / radius + 1) / 2;
          uvs.push(new T.Vector2(t3));
        }
        for (i = 1; i <= segments; i = i0) {
          i0 = i + 1;
          triangles.push(i0);
          triangles.push(i);
          triangles.push(0);
        }
        mesh.set$vertices(Q.Mesh__CreateFloat32List3(vertices));
        mesh.set$uv(Q.Mesh__CreateFloat32List2(uvs));
        mesh.set$triangles(new Uint16Array(P._ensureNativeList(triangles)));
        return mesh;
      }, Mesh__CreateFloat32List3: function(vectorList) {
        var t1, list, t2, index, vector, index0, t3, t4;
        t1 = vectorList.length * 3;
        list = new Float32Array(t1);
        for (t2 = new H.ListIterator(vectorList, vectorList.length, 0, null), index = 0; t2.moveNext$0(); index = index0) {
          vector = t2._current;
          index0 = index + 1;
          t3 = J.getInterceptor$x(vector);
          t4 = t3.get$x(vector);
          if (index >= t1)
            return H.ioore(list, index);
          list[index] = t4;
          index = index0 + 1;
          t4 = t3.get$y(vector);
          if (index0 >= t1)
            return H.ioore(list, index0);
          list[index0] = t4;
          index0 = index + 1;
          t3 = t3.get$z(vector);
          if (index >= t1)
            return H.ioore(list, index);
          list[index] = t3;
        }
        return list;
      }, Mesh__CreateFloat32List2: function(vectorList) {
        var t1, list, t2, index, vector, index0, t3, t4;
        t1 = vectorList.length * 2;
        list = new Float32Array(t1);
        for (t2 = new H.ListIterator(vectorList, vectorList.length, 0, null), index = 0; t2.moveNext$0();) {
          vector = t2._current;
          index0 = index + 1;
          t3 = J.getInterceptor$x(vector);
          t4 = t3.get$x(vector);
          if (index >= t1)
            return H.ioore(list, index);
          list[index] = t4;
          index = index0 + 1;
          t3 = t3.get$y(vector);
          if (index0 >= t1)
            return H.ioore(list, index0);
          list[index0] = t3;
        }
        return list;
      }}
  },
  MeshRenderer: {
    "": "Renderer;vapor$MeshRenderer$name,mesh,vapor$Renderer$name,material,name,enabled,gameObject,transform",
    Render$0: function() {
      var t1, t2, t3, t4;
      t1 = this.material.shader;
      J.useProgram$1$x($.gl, t1.program);
      t1 = this.material;
      t2 = this.gameObject.transform;
      t3 = t2.modelMatrix;
      t1.SetMatrix$2("uModelMatrix", t3.$mul(t3, t2._scaleMatrix));
      t2 = this.mesh;
      t3 = this.material;
      t2.toString;
      t1 = t3.shader;
      J.useProgram$1$x($.gl, t1.program);
      J.enableVertexAttribArray$1$x($.gl, t3.shader.vertexPositionAttribute);
      t1 = t3.shader;
      if (t1.usesTexCoords)
        J.enableVertexAttribArray$1$x($.gl, t1.textureCoordAttribute);
      t1 = t3.shader;
      if (t1.usesNormals)
        J.enableVertexAttribArray$1$x($.gl, t1.vertexNormalAttribute);
      J.bindBuffer$2$x($.gl, 34962, t2.vertexBuffer);
      J.vertexAttribPointer$6$x($.gl, t3.shader.vertexPositionAttribute, 3, 5126, false, 0, 0);
      t1 = t3.shader;
      if (t1.usesTexCoords) {
        t4 = t2.uvBuffer;
        if (t4 != null) {
          J.bindBuffer$2$x($.gl, 34962, t4);
          J.vertexAttribPointer$6$x($.gl, t3.shader.textureCoordAttribute, 2, 5126, false, 0, 0);
        } else {
          window;
          t4 = $.get$Console__safeConsole();
          t1 = C.JSString_methods.$add("Shader (", t1.filepath) + ") expects texure coords, but the mesh (" + t2.name + ") doesn't have them.";
          t4.toString;
          if (typeof console != "undefined")
            console.log(t1);
        }
      }
      t1 = t3.shader;
      if (t1.usesNormals) {
        t4 = t2.normalBuffer;
        if (t4 != null) {
          J.bindBuffer$2$x($.gl, 34962, t4);
          J.vertexAttribPointer$6$x($.gl, t3.shader.vertexNormalAttribute, 3, 5126, false, 0, 0);
        } else {
          window;
          t4 = $.get$Console__safeConsole();
          t1 = C.JSString_methods.$add("Shader (", t1.filepath) + ") expects normals, but the mesh (" + t2.name + ") doesn't have them.";
          t4.toString;
          if (typeof console != "undefined")
            console.log(t1);
        }
      }
      J.bindBuffer$2$x($.gl, 34963, t2.indexBuffer);
      J.drawElements$4$x($.gl, 4, t2.indexCount, 5123, 0);
      t1 = t3.shader;
      J.useProgram$1$x($.gl, t1.program);
      J.disableVertexAttribArray$1$x($.gl, t3.shader.vertexPositionAttribute);
      t1 = t3.shader;
      if (t1.usesTexCoords)
        J.disableVertexAttribArray$1$x($.gl, t1.textureCoordAttribute);
      t1 = t3.shader;
      if (t1.usesNormals)
        J.disableVertexAttribArray$1$x($.gl, t1.vertexNormalAttribute);
    },
    $isMeshRenderer: true
  },
  Renderer: {
    "": "Component;",
    Update$0: function() {
      return;
    },
    Render$0: function() {
      return;
    },
    $isRenderer: true
  },
  Shader: {
    "": "Object;vertexShader,pixelShader,program,filepath,usesTexCoords,usesNormals,vertexPositionAttribute,textureCoordAttribute,vertexNormalAttribute",
    static: {Shader_FromFile: function(filepath) {
        var t1, t2, shader, shaderSource, t3;
        window;
        t1 = $.get$Console__safeConsole();
        t2 = "Loading shader = " + C.JSString_methods.substring$1(filepath, C.JSString_methods.lastIndexOf$1(filepath, "/") + 1);
        t1.toString;
        if (typeof console != "undefined")
          console.log(t2);
        shader = new Q.Shader(null, null, null, null, false, false, null, null, null);
        shaderSource = Q.Shader__PreprocessSource(Q.FileDownloader_Download(filepath, null).responseText, filepath);
        t1 = Q.Shader__CompileShader($.ShaderType_VertexShader, shaderSource);
        shader.vertexShader = t1;
        t2 = Q.Shader__CompileShader($.ShaderType_FragmentShader, shaderSource);
        shader.pixelShader = t2;
        t3 = J.createProgram$0$x($.gl);
        shader.program = t3;
        J.attachShader$2$x($.gl, t3, t1);
        J.attachShader$2$x($.gl, t3, t2);
        J.linkProgram$1$x($.gl, t3);
        if (J.getProgramParameter$2$x($.gl, t3, 35714) !== true) {
          window;
          $.get$Console__safeConsole().toString;
          if (typeof console != "undefined")
            console.log("Link error! Could not initialise shaders.");
        }
        shader.vertexPositionAttribute = J.getAttribLocation$2$x($.gl, t3, "aVertexPosition");
        t1 = J.getAttribLocation$2$x($.gl, t3, "aTextureCoord");
        shader.textureCoordAttribute = t1;
        if (t1 !== -1)
          shader.usesTexCoords = true;
        t1 = J.getAttribLocation$2$x($.gl, t3, "aVertexNormal");
        shader.vertexNormalAttribute = t1;
        if (t1 !== -1)
          shader.usesNormals = true;
        shader.filepath = filepath;
        return shader;
      }, Shader__PreprocessSource: function(shaderSource, filepath) {
        var relativePath, t1, stripIncludes, stripEnd, t2, includeFile, t3, t4, request;
        relativePath = C.JSString_methods.substring$2(filepath, 0, C.JSString_methods.lastIndexOf$1(filepath, "/") + 1);
        t1 = H.JSSyntaxRegExp_makeNative("\\s*#include\\s+\\\".+\\\"", false, true, false);
        if (typeof shaderSource !== "string")
          H.throwExpression(new P.ArgumentError(shaderSource));
        stripIncludes = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\s*#include\\s+\\\"", false, true, false), null, null);
        stripEnd = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\\"", false, true, false), null, null);
        for (t1 = new H._AllMatchesIterator(new H.JSSyntaxRegExp(t1, null, null), shaderSource, null); t1.moveNext$0();) {
          t2 = t1.__js_helper$_current._match;
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          includeFile = J.replaceAll$2$s(t2[0], stripIncludes, "");
          includeFile = H.stringReplaceAllUnchecked(includeFile, stripEnd, "");
          window;
          t3 = $.get$Console__safeConsole();
          t4 = "Including shader = " + includeFile;
          t3.toString;
          if (typeof console != "undefined")
            console.log(t4);
          request = Q.FileDownloader_Download(relativePath + includeFile, null);
          if (request.status !== 200) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Could not load shader include! " + includeFile;
            t3.toString;
            if (typeof console != "undefined")
              console.log(t4);
          }
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = t2[0];
          t3 = J.$add$ns(request.responseText, "\n");
          shaderSource.toString;
          shaderSource = H.stringReplaceAllUnchecked(shaderSource, t2, t3);
        }
        return shaderSource;
      }, Shader__CompileShader: function(shaderType, source) {
        var type, shaderObject, t1, t2;
        type = shaderType === $.ShaderType_FragmentShader ? 35632 : 35633;
        shaderObject = J.createShader$1$x($.gl, type);
        source = C.JSString_methods.$add("#define " + shaderType + "\n", source);
        J.shaderSource$2$x($.gl, shaderObject, source);
        J.compileShader$1$x($.gl, shaderObject);
        if (J.getShaderParameter$2$x($.gl, shaderObject, 35713) !== true) {
          window;
          t1 = $.get$Console__safeConsole();
          t2 = C.JSString_methods.$add("Shader compilation error: " + shaderType + " - ", J.getShaderInfoLog$1$x($.gl, shaderObject));
          t1.toString;
          if (typeof console != "undefined")
            console.log(t2);
        }
        return shaderObject;
      }}
  },
  Texture2D: {
    "": "Object;name,image,glTexture<,LoadedCallback",
    LoadedCallback$1: function(arg0) {
      return this.LoadedCallback.call$1(arg0);
    },
    _Loaded$1: [function(e) {
      J.bindTexture$2$x($.gl, 3553, this.glTexture);
      J.texImage2D$6$x($.gl, 3553, 0, 6408, 6408, 5121, this.image);
      J.texParameteri$3$x($.gl, 3553, 10240, 9729);
      J.texParameteri$3$x($.gl, 3553, 10241, 9729);
      J.bindTexture$2$x($.gl, 3553, null);
      if (this.LoadedCallback != null)
        this.LoadedCallback$1(this);
    }, "call$1", "get$_Loaded", 2, 0, 25],
    Texture2D$1: function(texturePath) {
      var t1, t2, t3;
      t1 = this.image;
      t2 = J.getInterceptor$x(t1);
      t2.set$crossOrigin(t1, "anonymous");
      t3 = t2.get$onLoad(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(this.get$_Loaded()), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
      t2.set$src(t1, texturePath);
      this.glTexture = J.createTexture$0$x($.gl);
    }
  },
  Keyboard: {
    "": "Object;",
    Keyboard$0: function() {
      var t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_keydown._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Keyboard__KeyDown$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_keyup._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Keyboard__KeyUp$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    static: {"": "Keyboard__previousFrame,Keyboard__currentFrame,Keyboard__nextFrame", Keyboard__KeyDown: [function($event) {
        var t1 = $.get$Keyboard__nextFrame();
        t1.$indexSet(t1, J.get$keyCode$x($event), true);
      }, "call$1", "Keyboard__KeyDown$closure", 2, 0, 12], Keyboard__KeyUp: [function($event) {
        var t1 = $.get$Keyboard__nextFrame();
        t1.$indexSet(t1, J.get$keyCode$x($event), false);
      }, "call$1", "Keyboard__KeyUp$closure", 2, 0, 12]}
  },
  Mouse: {
    "": "Object;",
    Mouse$0: function() {
      var t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_mousedown._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Mouse__MouseDown$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_mouseup._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Mouse__MouseUp$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_mousemove._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Mouse__MouseMove$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    static: {"": "Mouse__previousFrame,Mouse__currentFrame,Mouse__nextFrame,Mouse__nextMousePosition,Mouse_mousePosition,Mouse_deltaMousePosition", Mouse__MouseDown: [function($event) {
        var t1 = $.get$Mouse__nextFrame();
        t1.$indexSet(t1, J.get$button$x($event), true);
      }, "call$1", "Mouse__MouseDown$closure", 2, 0, 2], Mouse__MouseUp: [function($event) {
        var t1 = $.get$Mouse__nextFrame();
        t1.$indexSet(t1, J.get$button$x($event), false);
      }, "call$1", "Mouse__MouseUp$closure", 2, 0, 2], Mouse__MouseMove: [function($event) {
        var t1, t2, t3, t4;
        t1 = $.get$Mouse__nextMousePosition();
        t2 = J.getInterceptor$x($event);
        t3 = t2.get$client($event);
        t3 = t3.get$x(t3);
        if (typeof t3 !== "number")
          return t3.$mul();
        t4 = t1.storage;
        t4[0] = t3 * 1;
        t2 = t2.get$client($event);
        t2 = t2.get$y(t2);
        if (typeof t2 !== "number")
          return t2.$mul();
        t4[1] = t2 * 1;
        t2 = new Float32Array(3);
        new T.Vector3(t2).setFrom$1(t1);
        t1 = t2[0];
        t4 = window.innerWidth;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[0] = t1 / t4;
        t4 = t2[1];
        t1 = window.innerHeight;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2[1] = t4 / t1;
        t2[0] = t2[0] * 2 - 1;
        t2[1] = t2[1] * 2 - 1;
        t2[1] = -t2[1];
      }, "call$1", "Mouse__MouseMove$closure", 2, 0, 2]}
  },
  Touch: {
    "": "Object;",
    Touch$0: function() {
      var t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_touchstart._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Touch__TouchStart$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_touchend._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Touch__TouchEnd$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(document, C.EventStreamProvider_touchmove._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(Q.Touch__TouchMove$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    static: {"": "Touch__previousFrame,Touch__currentFrame,Touch__nextFrame", Touch__TouchStart: [function($event) {
        var t1, changedTouches, i, j, t2, found, t3, newTouch;
        t1 = J.getInterceptor$x($event);
        t1.preventDefault$0($event);
        changedTouches = t1.get$changedTouches($event);
        for (i = 0; t1 = changedTouches.length, i < t1; ++i) {
          for (j = 0; t2 = $.get$Touch__nextFrame(), found = false, j < t2.length; ++j) {
            t3 = changedTouches[i].identifier;
            t2 = t2[j].fingerId;
            if (t3 == null ? t2 == null : t3 === t2) {
              found = true;
              break;
            }
          }
          if (!found) {
            t1 = new Float32Array(3);
            t1[0] = 0;
            t1[1] = 0;
            t1[2] = 0;
            t2 = new Float32Array(3);
            t2[0] = 0;
            t2[1] = 0;
            t2[2] = 0;
            newTouch = new Q.TouchData(0, new T.Vector3(t1), new T.Vector3(t2), 0, 0, $.TouchPhase_Began);
            t2 = changedTouches.length;
            if (i >= t2)
              return H.ioore(changedTouches, i);
            t1 = changedTouches[i];
            newTouch.fingerId = t1.identifier;
            if (i >= t2)
              return H.ioore(changedTouches, i);
            t2 = t1.screenX;
            t1 = t1.screenY;
            new P.Point(t2, t1).$builtinTypeInfo = [null];
            if (i >= changedTouches.length)
              return H.ioore(changedTouches, i);
            t1 = changedTouches[i];
            t3 = t1.screenX;
            t1 = t1.screenY;
            new P.Point(t3, t1).$builtinTypeInfo = [null];
            t3 = new Float32Array(3);
            t3[0] = t2;
            t3[1] = t1;
            t3[2] = 0;
            newTouch.position = new T.Vector3(t3);
            $.get$Touch__nextFrame().push(newTouch);
          }
        }
      }, "call$1", "Touch__TouchStart$closure", 2, 0, 3], Touch__TouchEnd: [function($event) {
        var changedTouches, i, newTouch, j, t1, oldTouch, t2, t3, t4, t5;
        changedTouches = J.get$changedTouches$x($event);
        for (i = 0; i < changedTouches.length; ++i) {
          newTouch = changedTouches[i];
          for (j = 0; t1 = $.get$Touch__nextFrame(), j < t1.length; ++j) {
            oldTouch = t1[j];
            t1 = newTouch.identifier;
            t2 = oldTouch.fingerId;
            if (t1 == null ? t2 == null : t1 === t2) {
              t1 = newTouch.screenX;
              t2 = newTouch.screenY;
              new P.Point(t1, t2).$builtinTypeInfo = [null];
              t2 = oldTouch.position.storage[0];
              if (typeof t1 !== "number")
                return t1.$sub();
              t3 = newTouch.screenX;
              t4 = newTouch.screenY;
              new P.Point(t3, t4).$builtinTypeInfo = [null];
              t3 = oldTouch.position.storage[1];
              if (typeof t4 !== "number")
                return t4.$sub();
              t5 = new Float32Array(3);
              t5[0] = t1 - t2;
              t5[1] = t4 - t3;
              t5[2] = 0;
              oldTouch.deltaPosition = new T.Vector3(t5);
              t5 = newTouch.screenX;
              t3 = newTouch.screenY;
              new P.Point(t5, t3).$builtinTypeInfo = [null];
              t1 = newTouch.screenX;
              t2 = newTouch.screenY;
              new P.Point(t1, t2).$builtinTypeInfo = [null];
              t1 = new Float32Array(3);
              t1[0] = t5;
              t1[1] = t2;
              t1[2] = 0;
              oldTouch.position = new T.Vector3(t1);
              oldTouch.deltaTime = $.Time_deltaTime;
              oldTouch.tapCount = 0;
              oldTouch.phase = $.TouchPhase_Ended;
            }
          }
        }
      }, "call$1", "Touch__TouchEnd$closure", 2, 0, 3], Touch__TouchMove: [function($event) {
        var changedTouches, i, newTouch, j, t1, oldTouch, t2, t3, t4, t5;
        changedTouches = J.get$changedTouches$x($event);
        for (i = 0; i < changedTouches.length; ++i) {
          newTouch = changedTouches[i];
          for (j = 0; t1 = $.get$Touch__nextFrame(), j < t1.length; ++j) {
            oldTouch = t1[j];
            t1 = newTouch.identifier;
            t2 = oldTouch.fingerId;
            if (t1 == null ? t2 == null : t1 === t2) {
              t1 = newTouch.screenX;
              t2 = newTouch.screenY;
              new P.Point(t1, t2).$builtinTypeInfo = [null];
              t2 = oldTouch.position.storage[0];
              if (typeof t1 !== "number")
                return t1.$sub();
              t3 = newTouch.screenX;
              t4 = newTouch.screenY;
              new P.Point(t3, t4).$builtinTypeInfo = [null];
              t3 = oldTouch.position.storage[1];
              if (typeof t4 !== "number")
                return t4.$sub();
              t5 = new Float32Array(3);
              t5[0] = t1 - t2;
              t5[1] = t4 - t3;
              t5[2] = 0;
              oldTouch.deltaPosition = new T.Vector3(t5);
              t5 = newTouch.screenX;
              t3 = newTouch.screenY;
              new P.Point(t5, t3).$builtinTypeInfo = [null];
              t1 = newTouch.screenX;
              t2 = newTouch.screenY;
              new P.Point(t1, t2).$builtinTypeInfo = [null];
              t1 = new Float32Array(3);
              t1[0] = t5;
              t1[1] = t2;
              t1[2] = 0;
              oldTouch.position = new T.Vector3(t1);
              oldTouch.deltaTime = $.Time_deltaTime;
              oldTouch.tapCount = 0;
              oldTouch.phase = $.TouchPhase_Moved;
            }
          }
        }
      }, "call$1", "Touch__TouchMove$closure", 2, 0, 3], Touch_Update: function() {
        $.Touch__previousFrame = P.List_List$from($.get$Touch__currentFrame(), true, null);
        $.Touch__currentFrame = P.List_List$from($.get$Touch__nextFrame(), true, null);
        var t1 = $.get$Touch__nextFrame();
        if (t1 != null) {
          t1.toString;
          H.IterableMixinWorkaround_removeWhereList(t1, new Q.Touch_Update_closure());
        }
      }}
  },
  Touch_Update_closure: {
    "": "Closure:15;",
    call$1: function(touch) {
      return touch.get$phase() === $.TouchPhase_Ended;
    }
  },
  TouchData: {
    "": "Object;fingerId,position>,deltaPosition,deltaTime,tapCount,phase<"
  },
  Transform0: {
    "": "Object;name,modelMatrix,rotation<,_eulerAngles,_scale,_scaleMatrix",
    get$position: function(_) {
      var t1, t2;
      t1 = this.modelMatrix.storage;
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(t1[12], t1[13], t1[14]);
      return t2;
    },
    set$position: function(_, val) {
      var t1, t2;
      t1 = this.modelMatrix;
      t2 = val.storage;
      t1 = t1.storage;
      t1[12] = t2[0];
      t1[13] = t2[1];
      t1[14] = t2[2];
    },
    set$eulerAngles: function(val) {
      var t1, t2, t3, t4, halfYaw, halfPitch, halfRoll, cosYaw, sinYaw, cosPitch, sinPitch, cosRoll, sinRoll, t5, x, y, z, w, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz;
      this._eulerAngles = val;
      t1 = this.rotation;
      t2 = val.storage;
      t3 = t2[0];
      t4 = t2[1];
      halfYaw = t3 * 0.5;
      halfPitch = t4 * 0.5;
      halfRoll = t2[2] * 0.5;
      cosYaw = Math.cos(halfYaw);
      sinYaw = Math.sin(halfYaw);
      cosPitch = Math.cos(halfPitch);
      sinPitch = Math.sin(halfPitch);
      cosRoll = Math.cos(halfRoll);
      sinRoll = Math.sin(halfRoll);
      t1 = t1.storage;
      t2 = cosRoll * sinPitch;
      t3 = sinRoll * cosPitch;
      t1[0] = t2 * cosYaw + t3 * sinYaw;
      t4 = cosRoll * cosPitch;
      t5 = sinRoll * sinPitch;
      t1[1] = t4 * sinYaw - t5 * cosYaw;
      t1[2] = t3 * cosYaw - t2 * sinYaw;
      t1[3] = t4 * cosYaw + t5 * sinYaw;
      t5 = this.modelMatrix;
      t4 = this.get$position(this);
      t1 = this.rotation.storage;
      x = t1[0];
      y = t1[1];
      z = t1[2];
      w = t1[3];
      x2 = x + x;
      y2 = y + y;
      z2 = z + z;
      xx = x * x2;
      xy = x * y2;
      xz = x * z2;
      yy = y * y2;
      yz = y * z2;
      zz = z * z2;
      wx = w * x2;
      wy = w * y2;
      wz = w * z2;
      t5 = t5.storage;
      t5[0] = 1 - (yy + zz);
      t5[1] = xy + wz;
      t5[2] = xz - wy;
      t5[3] = 0;
      t5[4] = xy - wz;
      t5[5] = 1 - (xx + zz);
      t5[6] = yz + wx;
      t5[7] = 0;
      t5[8] = xz + wy;
      t5[9] = yz - wx;
      t5[10] = 1 - (xx + yy);
      t5[11] = 0;
      t4 = t4.storage;
      t5[12] = t4[0];
      t5[13] = t4[1];
      t5[14] = t4[2];
      t5[15] = 1;
    },
    Transform$0: function() {
      var t1 = new T.Matrix4(new Float32Array(16));
      t1.setIdentity$0();
      this.modelMatrix = t1;
      t1 = new T.Quaternion(new Float32Array(4));
      t1.Quaternion$identity$0();
      this.rotation = t1;
      this._eulerAngles = new T.Vector3(new Float32Array(3));
      t1 = new T.Vector3(new Float32Array(3));
      t1.setValues$3(1, 1, 1);
      this._scale = t1;
      t1 = new T.Matrix4(new Float32Array(16));
      t1.setIdentity$0();
      this._scaleMatrix = t1;
    },
    static: {Transform$: function() {
        var t1 = new Q.Transform0("Transform", null, null, null, null, null);
        t1.Transform$0();
        return t1;
      }}
  },
  BoxCollider: {
    "": "Collider;vapor$BoxCollider$name,center,size,vapor$Collider$name,body,bodyType,isSensor,_fixtureDef,_bodyDef,name,enabled,gameObject,transform",
    Awake$0: function() {
      var shape, t1, t2, t3, t4;
      shape = V.PolygonShape$();
      t1 = this.size.storage;
      shape.setAsBoxWithCenterAndAngle$4(t1[0] / 2, t1[1] / 2, this.center, 0);
      t1 = V.FixtureDef$();
      this._fixtureDef = t1;
      t1.restitution = 0.5;
      t1.density = 0.05;
      t1.shape = shape;
      t1.isSensor = this.isSensor;
      t1 = V.BodyDef$();
      this._bodyDef = t1;
      t1.type = this.bodyType;
      t2 = this.transform;
      t2 = t2.get$position(t2).storage;
      t3 = t2[0];
      t2 = t2[1];
      t4 = new Float32Array(2);
      t4[0] = t3;
      t4[1] = t2;
      t1.position = new T.Vector2(t4);
    },
    Start$0: function() {
      var t1, t2, t3, t4;
      t1 = this.gameObject.scene.world.createBody$1(this._bodyDef);
      this.body = t1;
      t1.createFixture$1(this._fixtureDef);
      t1 = this.body;
      t2 = this.transform;
      t2 = t2.get$position(t2).storage;
      t3 = t2[0];
      t2 = t2[1];
      t4 = new Float32Array(2);
      t4[0] = t3;
      t4[1] = t2;
      t1.setTransform$2(t1, new T.Vector2(t4), this.transform._eulerAngles.storage[2]);
    },
    Update$0: function() {
      var t1, t2, t3;
      t1 = this.transform;
      t2 = this.body.originTransform.position.storage;
      t3 = new T.Vector3(new Float32Array(3));
      t3.setValues$3(t2[0], t2[1], t1.get$position(t1).storage[2]);
      t1.set$position(t1, t3);
      t3 = this.transform;
      t1 = t3._eulerAngles.storage;
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(t1[0], t1[1], this.body.sweep.angle);
      t3.set$eulerAngles(t2);
    }
  },
  CircleCollider: {
    "": "Collider;vapor$CircleCollider$name,radius,vapor$Collider$name,body,bodyType,isSensor,_fixtureDef,_bodyDef,name,enabled,gameObject,transform",
    Awake$0: function() {
      var shape, t1, t2, t3, t4;
      shape = new V.CircleShape(new T.Vector2(new Float32Array(2)), 0, 0);
      shape.radius = this.radius;
      t1 = V.FixtureDef$();
      this._fixtureDef = t1;
      t1.restitution = 0.5;
      t1.density = 0.05;
      t1.shape = shape;
      t1.isSensor = this.isSensor;
      t1 = V.BodyDef$();
      this._bodyDef = t1;
      t1.type = this.bodyType;
      t2 = this.transform;
      t2 = t2.get$position(t2).storage;
      t3 = t2[0];
      t2 = t2[1];
      t4 = new Float32Array(2);
      t4[0] = t3;
      t4[1] = t2;
      t1.position = new T.Vector2(t4);
    },
    Start$0: function() {
      var t1, t2, t3, t4;
      t1 = this.gameObject.scene.world.createBody$1(this._bodyDef);
      this.body = t1;
      t1.createFixture$1(this._fixtureDef);
      t1 = this.body;
      t2 = this.transform;
      t2 = t2.get$position(t2).storage;
      t3 = t2[0];
      t2 = t2[1];
      t4 = new Float32Array(2);
      t4[0] = t3;
      t4[1] = t2;
      t1.setTransform$2(t1, new T.Vector2(t4), this.transform._eulerAngles.storage[2]);
    },
    Update$0: function() {
      var t1, t2, t3;
      t1 = this.transform;
      t2 = this.body.originTransform.position.storage;
      t3 = new T.Vector3(new Float32Array(3));
      t3.setValues$3(t2[0], t2[1], t1.get$position(t1).storage[2]);
      t1.set$position(t1, t3);
      t3 = this.transform;
      t1 = t3._eulerAngles.storage;
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(t1[0], t1[1], this.body.sweep.angle);
      t3.set$eulerAngles(t2);
      t1 = this.body.contactList;
      if (t1 != null && t1.contact != null) {
        t1 = t1.contact;
        t2 = t1.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        if ((t2 & 2) === 2)
          this.gameObject.OnCollision$1(t1);
      }
    }
  },
  Collider: {
    "": "Component;body>,isSensor<",
    $isCollider: true
  }
}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
  "": "",
  makePerspectiveMatrix: function(fovYRadians, aspectRatio, zNear, zFar) {
    var height, width, left, bottom, view, two_near, right_minus_left, top_minus_bottom, far_minus_near, t1;
    height = Math.tan(fovYRadians * 0.5) * zNear;
    width = height * aspectRatio;
    left = -width;
    bottom = -height;
    view = new T.Matrix4(new Float32Array(16));
    two_near = 2 * zNear;
    right_minus_left = width - left;
    top_minus_bottom = height - bottom;
    far_minus_near = zFar - zNear;
    t1 = view.setZero$0().storage;
    t1[0] = two_near / right_minus_left;
    t1[5] = two_near / top_minus_bottom;
    t1[8] = (width + left) / right_minus_left;
    t1[9] = (height + bottom) / top_minus_bottom;
    t1[10] = -(zFar + zNear) / far_minus_near;
    t1[11] = -1;
    t1[14] = -(two_near * zFar) / far_minus_near;
    return view;
  },
  unproject: function(cameraMatrix, viewportX, viewportWidth, viewportY, viewportHeight, pickX, pickY, pickZ, pickWorld) {
    var invertedCameraMatrix, t1, v, t2, invW;
    viewportWidth.toString;
    viewportHeight.toString;
    if (typeof viewportWidth !== "number")
      return H.iae(viewportWidth);
    pickX = 2 * (pickX - viewportX) / viewportWidth - 1;
    if (typeof viewportHeight !== "number")
      return H.iae(viewportHeight);
    pickY = 2 * (pickY - viewportY) / viewportHeight - 1;
    pickZ = 2 * pickZ - 1;
    if (pickX < -1 || pickY < -1 || pickX > 1 || pickY > 1 || pickZ < -1 || pickZ > 1)
      return false;
    invertedCameraMatrix = new T.Matrix4(new Float32Array(16));
    invertedCameraMatrix.setFrom$1(cameraMatrix);
    invertedCameraMatrix.invert$0();
    t1 = new Float32Array(4);
    v = new T.Vector4(t1);
    v.setValues$4(pickX, pickY, pickZ, 1);
    invertedCameraMatrix.transform$1(invertedCameraMatrix, v);
    t2 = t1[3];
    if (t2 === 0)
      return false;
    invW = 1 / t2;
    t2 = pickWorld.storage;
    t2[0] = t1[0] * invW;
    t2[1] = t1[1] * invW;
    t2[2] = t1[2] * invW;
    return true;
  },
  Matrix2: {
    "": "Object;storage<",
    setValues$4: function(arg0, arg1, arg2, arg3) {
      var t1 = this.storage;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[3] = t2[3];
      t1[2] = t2[2];
      t1[1] = t2[1];
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n";
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(2);
      t2 = this.storage;
      t3 = 0 + row;
      if (t3 >= 4)
        return H.ioore(t2, t3);
      t1[0] = t2[t3];
      t3 = 2 + row;
      if (t3 >= 4)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      return new T.Vector2(t1);
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6;
      if (typeof arg === "number") {
        t1 = new Float32Array(4);
        t2 = this.storage;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix2(t1);
      }
      t1 = J.getInterceptor(arg);
      if (typeof arg === "object" && arg !== null && !!t1.$isVector2) {
        t1 = new Float32Array(2);
        t2 = this.storage;
        t3 = t2[1];
        t4 = arg.get$storage();
        t5 = t4.$index(t4, 0);
        t3 = C.JSNumber_methods.$mul(t3, t5);
        t6 = t2[3];
        t4 = t4.$index(t4, 1);
        t1[1] = t3 + C.JSNumber_methods.$mul(t6, t4);
        t1[0] = C.JSNumber_methods.$mul(t2[0], t5) + C.JSNumber_methods.$mul(t2[2], t4);
        return new T.Vector2(t1);
      }
      arg.get$dimension();
      throw H.wrapException(new P.ArgumentError(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 + t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t2 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t2 + t4[3];
      return new T.Matrix2(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 - t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 - t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 - t4[2];
      t2 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t2 - t4[3];
      return new T.Matrix2(t1);
    },
    transposed$0: function() {
      var t1, t2;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t1[0] = t2[0];
      t1[1] = t2[2];
      t1[2] = t2[1];
      t1[3] = t2[3];
      return new T.Matrix2(t1);
    },
    invert$0: function() {
      var t1, t2, t3, t4, t5, det, invDet;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[3];
      t4 = t1[1];
      t5 = t1[2];
      det = t2 * t3 - t4 * t5;
      if (det === 0)
        return 0;
      invDet = 1 / det;
      t1[0] = t3 * invDet;
      t1[1] = -t4 * invDet;
      t1[2] = -t5 * invDet;
      t1[3] = t2 * invDet;
      return det;
    },
    setRotation$1: function(radians) {
      var c, s, t1;
      c = Math.cos(radians);
      s = Math.sin(radians);
      t1 = this.storage;
      t1[0] = c;
      t1[1] = s;
      t1[2] = -s;
      t1[3] = c;
    },
    transform$1: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[2];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t3 = t3[1];
      t4 = t1[1];
      t1 = t1[3];
      t7 = J.getInterceptor$x(arg);
      t7.set$x(arg, t2 * t5 + t6 * t3);
      t7.set$y(arg, t4 * t5 + t1 * t3);
      return arg;
    },
    transformed$2: function(arg, out) {
      if (out == null) {
        out = new T.Vector2(new Float32Array(2));
        out.setFrom$1(arg);
      } else
        out.setFrom$1(arg);
      return this.transform$1(this, out);
    }
  },
  Matrix4: {
    "": "Object;storage<",
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage();
      if (15 >= t2.length)
        return H.ioore(t2, 15);
      t1[15] = t2[15];
      t1[14] = t2[14];
      t1[13] = t2[13];
      t1[12] = t2[12];
      t1[11] = t2[11];
      t1[10] = t2[10];
      t1[9] = t2[9];
      t1[8] = t2[8];
      t1[7] = t2[7];
      t1[6] = t2[6];
      t1[5] = t2[5];
      t1[4] = t2[4];
      t1[3] = t2[3];
      t1[2] = t2[2];
      t1[1] = t2[1];
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n[3] " + H.S(this.getRow$1(3)) + "\n";
    },
    get$dimension: function() {
      return 4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 16)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t3 = 0 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[0] = t2[t3];
      t3 = 4 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 8 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = 12 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      return new T.Vector4(t1);
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20;
      if (typeof arg === "number") {
        t1 = new Float32Array(16);
        t2 = this.storage;
        t1[15] = t2[15] * arg;
        t1[14] = t2[14] * arg;
        t1[13] = t2[13] * arg;
        t1[12] = t2[12] * arg;
        t1[11] = t2[11] * arg;
        t1[10] = t2[10] * arg;
        t1[9] = t2[9] * arg;
        t1[8] = t2[8] * arg;
        t1[7] = t2[7] * arg;
        t1[6] = t2[6] * arg;
        t1[5] = t2[5] * arg;
        t1[4] = t2[4] * arg;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix4(t1);
      }
      t1 = J.getInterceptor(arg);
      if (typeof arg === "object" && arg !== null && !!t1.$isVector3) {
        t1 = new Float32Array(3);
        t2 = this.storage;
        t3 = t2[0];
        t4 = arg.storage;
        t5 = t4[0];
        t6 = t2[4];
        t7 = t4[1];
        t8 = t2[8];
        t9 = t4[2];
        t1[0] = t3 * t5 + t6 * t7 + t8 * t9 + t2[12];
        t8 = t2[1];
        t6 = t4[0];
        t1[1] = t8 * t6 + t2[5] * t7 + t2[9] * t9 + t2[13];
        t1[2] = t2[2] * t6 + t2[6] * t4[1] + t2[10] * t9 + t2[14];
        return new T.Vector3(t1);
      }
      if (4 === arg.get$dimension()) {
        t1 = new Float32Array(16);
        t2 = this.storage;
        t3 = t2[0];
        t4 = arg.storage;
        t5 = t4[0];
        t6 = t2[4];
        t7 = t4[1];
        t8 = t2[8];
        t9 = t4[2];
        t10 = t2[12];
        t11 = t4[3];
        t1[0] = t3 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t5 = t2[0];
        t3 = t4[4];
        t12 = t4[5];
        t13 = t4[6];
        t14 = t4[7];
        t1[4] = t5 * t3 + t6 * t12 + t8 * t13 + t10 * t14;
        t6 = t4[8];
        t3 = t2[4];
        t15 = t4[9];
        t16 = t4[10];
        t17 = t4[11];
        t1[8] = t5 * t6 + t3 * t15 + t8 * t16 + t10 * t17;
        t8 = t4[12];
        t6 = t4[13];
        t18 = t2[8];
        t19 = t4[14];
        t20 = t4[15];
        t1[12] = t5 * t8 + t3 * t6 + t18 * t19 + t10 * t20;
        t10 = t2[1];
        t18 = t4[0];
        t3 = t2[5];
        t8 = t2[9];
        t5 = t2[13];
        t1[1] = t10 * t18 + t3 * t7 + t8 * t9 + t5 * t11;
        t7 = t2[1];
        t10 = t4[4];
        t1[5] = t7 * t10 + t3 * t12 + t8 * t13 + t5 * t14;
        t12 = t4[8];
        t3 = t2[5];
        t1[9] = t7 * t12 + t3 * t15 + t8 * t16 + t5 * t17;
        t8 = t4[12];
        t1[13] = t7 * t8 + t3 * t6 + t2[9] * t19 + t5 * t20;
        t5 = t2[2];
        t6 = t2[6];
        t3 = t4[1];
        t7 = t2[10];
        t15 = t2[14];
        t1[2] = t5 * t18 + t6 * t3 + t7 * t9 + t15 * t11;
        t9 = t2[2];
        t5 = t4[5];
        t1[6] = t9 * t10 + t6 * t5 + t7 * t13 + t15 * t14;
        t13 = t2[6];
        t6 = t4[9];
        t1[10] = t9 * t12 + t13 * t6 + t7 * t16 + t15 * t17;
        t16 = t4[13];
        t1[14] = t9 * t8 + t13 * t16 + t2[10] * t19 + t15 * t20;
        t15 = t2[3];
        t19 = t2[7];
        t13 = t2[11];
        t9 = t4[2];
        t7 = t2[15];
        t1[3] = t15 * t18 + t19 * t3 + t13 * t9 + t7 * t11;
        t11 = t2[3];
        t1[7] = t11 * t10 + t19 * t5 + t13 * t4[6] + t7 * t14;
        t14 = t2[7];
        t1[11] = t11 * t12 + t14 * t6 + t13 * t4[10] + t7 * t17;
        t1[15] = t11 * t8 + t14 * t16 + t2[11] * t4[14] + t7 * t20;
        return new T.Matrix4(t1);
      }
      throw H.wrapException(new P.ArgumentError(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(16);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 + t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t3 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t3 + t4[3];
      t3 = t2[4];
      if (4 >= t5)
        return H.ioore(t4, 4);
      t1[4] = t3 + t4[4];
      t3 = t2[5];
      if (5 >= t5)
        return H.ioore(t4, 5);
      t1[5] = t3 + t4[5];
      t3 = t2[6];
      if (6 >= t5)
        return H.ioore(t4, 6);
      t1[6] = t3 + t4[6];
      t3 = t2[7];
      if (7 >= t5)
        return H.ioore(t4, 7);
      t1[7] = t3 + t4[7];
      t3 = t2[8];
      if (8 >= t5)
        return H.ioore(t4, 8);
      t1[8] = t3 + t4[8];
      t3 = t2[9];
      if (9 >= t5)
        return H.ioore(t4, 9);
      t1[9] = t3 + t4[9];
      t3 = t2[10];
      if (10 >= t5)
        return H.ioore(t4, 10);
      t1[10] = t3 + t4[10];
      t3 = t2[11];
      if (11 >= t5)
        return H.ioore(t4, 11);
      t1[11] = t3 + t4[11];
      t3 = t2[12];
      if (12 >= t5)
        return H.ioore(t4, 12);
      t1[12] = t3 + t4[12];
      t3 = t2[13];
      if (13 >= t5)
        return H.ioore(t4, 13);
      t1[13] = t3 + t4[13];
      t3 = t2[14];
      if (14 >= t5)
        return H.ioore(t4, 14);
      t1[14] = t3 + t4[14];
      t2 = t2[15];
      if (15 >= t5)
        return H.ioore(t4, 15);
      t1[15] = t2 + t4[15];
      return new T.Matrix4(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(16);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 - t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 - t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 - t4[2];
      t3 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t3 - t4[3];
      t3 = t2[4];
      if (4 >= t5)
        return H.ioore(t4, 4);
      t1[4] = t3 - t4[4];
      t3 = t2[5];
      if (5 >= t5)
        return H.ioore(t4, 5);
      t1[5] = t3 - t4[5];
      t3 = t2[6];
      if (6 >= t5)
        return H.ioore(t4, 6);
      t1[6] = t3 - t4[6];
      t3 = t2[7];
      if (7 >= t5)
        return H.ioore(t4, 7);
      t1[7] = t3 - t4[7];
      t3 = t2[8];
      if (8 >= t5)
        return H.ioore(t4, 8);
      t1[8] = t3 - t4[8];
      t3 = t2[9];
      if (9 >= t5)
        return H.ioore(t4, 9);
      t1[9] = t3 - t4[9];
      t3 = t2[10];
      if (10 >= t5)
        return H.ioore(t4, 10);
      t1[10] = t3 - t4[10];
      t3 = t2[11];
      if (11 >= t5)
        return H.ioore(t4, 11);
      t1[11] = t3 - t4[11];
      t3 = t2[12];
      if (12 >= t5)
        return H.ioore(t4, 12);
      t1[12] = t3 - t4[12];
      t3 = t2[13];
      if (13 >= t5)
        return H.ioore(t4, 13);
      t1[13] = t3 - t4[13];
      t3 = t2[14];
      if (14 >= t5)
        return H.ioore(t4, 14);
      t1[14] = t3 - t4[14];
      t2 = t2[15];
      if (15 >= t5)
        return H.ioore(t4, 15);
      t1[15] = t2 - t4[15];
      return new T.Matrix4(t1);
    },
    setZero$0: function() {
      var t1 = this.storage;
      t1[0] = 0;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 0;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 0;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 0;
      return this;
    },
    setIdentity$0: function() {
      var t1 = this.storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
      return this;
    },
    invert$0: function() {
      var t1, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, t2, t3;
      t1 = this.storage;
      a00 = t1[0];
      a01 = t1[1];
      a02 = t1[2];
      a03 = t1[3];
      a10 = t1[4];
      a11 = t1[5];
      a12 = t1[6];
      a13 = t1[7];
      a20 = t1[8];
      a21 = t1[9];
      a22 = t1[10];
      a23 = t1[11];
      a30 = t1[12];
      a31 = t1[13];
      a32 = t1[14];
      a33 = t1[15];
      b00 = a00 * a11 - a01 * a10;
      b01 = a00 * a12 - a02 * a10;
      b02 = a00 * a13 - a03 * a10;
      b03 = a01 * a12 - a02 * a11;
      b04 = a01 * a13 - a03 * a11;
      b05 = a02 * a13 - a03 * a12;
      b06 = a20 * a31 - a21 * a30;
      b07 = a20 * a32 - a22 * a30;
      b08 = a20 * a33 - a23 * a30;
      b09 = a21 * a32 - a22 * a31;
      b10 = a21 * a33 - a23 * a31;
      b11 = a22 * a33 - a23 * a32;
      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0)
        return det;
      invDet = 1 / det;
      t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      t2 = -a10;
      t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
      t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      t3 = -a30;
      t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
      t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
      t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
      t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return det;
    },
    transform$1: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[4];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t8 = t1[8];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t9 = t3[2];
      t10 = t1[12];
      if (3 >= t4)
        return H.ioore(t3, 3);
      t3 = t3[3];
      t4 = t1[1];
      t11 = t1[5];
      t12 = t1[9];
      t13 = t1[13];
      t14 = t1[2];
      t15 = t1[6];
      t16 = t1[10];
      t17 = t1[14];
      t18 = t1[3];
      t19 = t1[7];
      t20 = t1[11];
      t1 = t1[15];
      t21 = J.getInterceptor$x(arg);
      t21.set$x(arg, t2 * t5 + t6 * t7 + t8 * t9 + t10 * t3);
      t21.set$y(arg, t4 * t5 + t11 * t7 + t12 * t9 + t13 * t3);
      t21.set$z(arg, t14 * t5 + t15 * t7 + t16 * t9 + t17 * t3);
      arg.set$w(t18 * t5 + t19 * t7 + t20 * t9 + t1 * t3);
      return arg;
    }
  },
  Quaternion: {
    "": "Object;storage<",
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    set$x: function(_, x) {
      this.storage[0] = x;
    },
    set$y: function(_, y) {
      this.storage[1] = y;
    },
    set$z: function(_, z) {
      this.storage[2] = z;
    },
    set$w: function(w) {
      this.storage[3] = w;
    },
    get$length: function(_) {
      var t1, _x, _y, _z, _w;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      _w = t1[3];
      return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
    },
    $mul: function(_, other) {
      var t1, _w, _z, _y, _x, ow, oz, oy, ox;
      t1 = this.storage;
      _w = t1[3];
      _z = t1[2];
      _y = t1[1];
      _x = t1[0];
      t1 = other.get$storage();
      ow = t1.$index(t1, 3);
      oz = t1.$index(t1, 2);
      oy = t1.$index(t1, 1);
      ox = t1.$index(t1, 0);
      return T.Quaternion$(C.JSNumber_methods.$mul(_w, ox) + C.JSNumber_methods.$mul(_x, ow) + C.JSNumber_methods.$mul(_y, oz) - C.JSNumber_methods.$mul(_z, oy), C.JSNumber_methods.$mul(_w, oy) + C.JSNumber_methods.$mul(_y, ow) + C.JSNumber_methods.$mul(_z, ox) - C.JSNumber_methods.$mul(_x, oz), C.JSNumber_methods.$mul(_w, oz) + C.JSNumber_methods.$mul(_z, ow) + C.JSNumber_methods.$mul(_x, oy) - C.JSNumber_methods.$mul(_y, ox), C.JSNumber_methods.$mul(_w, ow) - C.JSNumber_methods.$mul(_x, ox) - C.JSNumber_methods.$mul(_y, oy) - C.JSNumber_methods.$mul(_z, oz));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t8 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t9 = t3[2];
      t1 = t1[3];
      if (3 >= t4)
        return H.ioore(t3, 3);
      return T.Quaternion$(t2 + t5, t6 + t7, t8 + t9, t1 + t3[3]);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t8 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t9 = t3[2];
      t1 = t1[3];
      if (3 >= t4)
        return H.ioore(t3, 3);
      return T.Quaternion$(t2 - t5, t6 - t7, t8 - t9, t1 - t3[3]);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, arg) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      t1[i] = arg;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + ", " + H.S(t1[1]) + ", " + H.S(t1[2]) + " @ " + H.S(t1[3]);
    },
    Quaternion$4: function(x, y, z, w) {
      var t1 = this.storage;
      t1[0] = x;
      t1[1] = y;
      t1[2] = z;
      t1[3] = w;
    },
    Quaternion$identity$0: function() {
      this.storage[3] = 1;
    },
    static: {Quaternion$: function(x, y, z, w) {
        var t1 = new T.Quaternion(new Float32Array(4));
        t1.Quaternion$4(x, y, z, w);
        return t1;
      }}
  },
  Vector2: {
    "": "Object;storage<",
    setValues$2: function(x_, y_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      return this;
    },
    setZero$0: function() {
      var t1 = this.storage;
      t1[0] = 0;
      t1[1] = 0;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t1 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t3 = t3[1];
      t4 = new Float32Array(2);
      t4[0] = t2 - t5;
      t4[1] = t1 - t3;
      return new T.Vector2(t4);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t1 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t3 = t3[1];
      t4 = new Float32Array(2);
      t4[0] = t2 + t5;
      t4[1] = t1 + t3;
      return new T.Vector2(t4);
    },
    $mul: function(_, scale) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(2);
      t3[0] = t2 * scale;
      t3[1] = t1 * scale;
      return new T.Vector2(t3);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(t2 * t2 + t1 * t1);
    },
    get$length2: function() {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return this;
    },
    normalizeLength$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return 0;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return l;
    },
    dot$1: function(other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.storage;
      return t2 * t3[0] + t1[1] * t3[1];
    },
    cross$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.storage;
      return t1[0] * t2[1] - t1[1] * t2[0];
    },
    add$1: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t1[0] = t2 + t3[0];
      t2 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t1[1] = t2 + t3[1];
      return this;
    },
    sub$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      return this;
    },
    scale$1: function(_, arg) {
      var t1 = this.storage;
      t1[1] = t1[1] * arg;
      t1[0] = t1[0] * arg;
      return this;
    },
    negate$0: function() {
      var t1 = this.storage;
      t1[1] = -t1[1];
      t1[0] = -t1[0];
      return this;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    $isVector2: true
  },
  Vector3: {
    "": "Object;storage<",
    setValues$3: function(x_, y_, z_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      t1[2] = z_;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.storage;
      t1[0] = t2[0];
      t1[1] = t2[1];
      t1[2] = t2[2];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t1 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t4 = new T.Vector3(new Float32Array(3));
      t4.setValues$3(t2 - t5, t6 - t7, t1 - t3[2]);
      return t4;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t1 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t4 = new T.Vector3(new Float32Array(3));
      t4.setValues$3(t2 + t5, t6 + t7, t1 + t3[2]);
      return t4;
    },
    $mul: function(_, scale) {
      var t1, t2;
      t1 = this.storage;
      t2 = new T.Vector3(new Float32Array(3));
      t2.setValues$3(t1[0] * scale, t1[1] * scale, t1[2] * scale);
      return t2;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      t1[2] = t1[2] * l;
      return this;
    },
    cross$1: function(other) {
      var t1, _x, _y, _z, ox, oy, oz;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      t1 = other.storage;
      ox = t1[0];
      oy = t1[1];
      oz = t1[2];
      t1 = new T.Vector3(new Float32Array(3));
      t1.setValues$3(_y * oz - _z * oy, _z * ox - _x * oz, _x * oy - _y * ox);
      return t1;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    set$z: function(_, arg) {
      this.storage[2] = arg;
      return arg;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    $isVector3: true
  },
  Vector4: {
    "": "Object;storage<",
    setValues$4: function(x_, y_, z_, w_) {
      var t1 = this.storage;
      t1[3] = w_;
      t1[2] = z_;
      t1[1] = y_;
      t1[0] = x_;
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t8 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t9 = t3[2];
      t1 = t1[3];
      if (3 >= t4)
        return H.ioore(t3, 3);
      t4 = new T.Vector4(new Float32Array(4));
      t4.setValues$4(t2 - t5, t6 - t7, t8 - t9, t1 - t3[3]);
      return t4;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t8 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t9 = t3[2];
      t1 = t1[3];
      if (3 >= t4)
        return H.ioore(t3, 3);
      t4 = new T.Vector4(new Float32Array(4));
      t4.setValues$4(t2 + t5, t6 + t7, t8 + t9, t1 + t3[3]);
      return t4;
    },
    $mul: function(_, scale) {
      var t1, t2;
      t1 = this.storage;
      t2 = new T.Vector4(new Float32Array(4));
      t2.setValues$4(t1[0] * scale, t1[1] * scale, t1[2] * scale, t1[3] * scale);
      return t2;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    set$z: function(_, arg) {
      this.storage[2] = arg;
      return arg;
    },
    set$w: function(arg) {
      this.storage[3] = arg;
      return arg;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    }
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Touch0.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
P.Match.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
W.TouchEvent.$isTouchEvent = true;
W.TouchEvent.$isEvent = true;
W.TouchEvent.$isObject = true;
T.Vector2.$isVector2 = true;
T.Vector2.$isObject = true;
T.Vector3.$isVector3 = true;
T.Vector3.$isObject = true;
V.SimplexVertex.$isObject = true;
V.ClipVertex.$isObject = true;
J.JSArray.$isObject = true;
V.ContactRegister.$isObject = true;
V.Contact.$isObject = true;
V.Body.$isObject = true;
V.PolygonContact.$isObject = true;
V.ManifoldPoint.$isObject = true;
V.PolygonAndCircleContact.$isObject = true;
V.CircleContact.$isObject = true;
V.DynamicTreeNode.$isObject = true;
V.Pair.$isComparable = true;
V.Pair.$asComparable = [null];
V.Pair.$isObject = true;
V.ContactConstraint.$isObject = true;
V.ContactConstraintPoint.$isObject = true;
V.TimeOfImpactConstraint.$isObject = true;
P.UniformLocation.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isEvent = true;
W.KeyboardEvent.$isObject = true;
V.Joint.$isObject = true;
V.Velocity.$isObject = true;
V.Position.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
Q.Texture2D.$isTexture2D = true;
Q.Texture2D.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P.Object.$isObject = true;
T.Vector4.$isVector4 = true;
T.Vector4.$isObject = true;
V.Fixture.$isFixture = true;
V.Fixture.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.StreamTransformer.$isStreamTransformer = true;
P.StreamTransformer.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
T.Matrix4.$isMatrix4 = true;
T.Matrix4.$isObject = true;
T.Matrix2.$isMatrix2 = true;
T.Matrix2.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
V.TimeOfImpactOutput.$isTimeOfImpactOutput = true;
V.TimeOfImpactOutput.$isObject = true;
V.TimeOfImpactInput.$isTimeOfImpactInput = true;
V.TimeOfImpactInput.$isObject = true;
V.DistanceOutput.$isDistanceOutput = true;
V.DistanceOutput.$isObject = true;
V.SimplexCache.$isSimplexCache = true;
V.SimplexCache.$isObject = true;
V.DistanceInput.$isDistanceInput = true;
V.DistanceInput.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
$.$signature_args2 = {func: "args2", args: [null, null]};
$.$signature_args1 = {func: "args1", args: [null]};
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.activeTexture$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).activeTexture$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.attachShader$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bindTexture$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
J.bufferData$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferData$3(receiver, a0, a1, a2);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.compileShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.createProgram$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createProgram$0(receiver);
};
J.createShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
J.createTexture$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createTexture$0(receiver);
};
J.deleteBuffer$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).deleteBuffer$1(receiver, a0);
};
J.disableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disableVertexAttribArray$1(receiver, a0);
};
J.drawElements$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.enableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$body$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$body(receiver);
};
J.get$button$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$button(receiver);
};
J.get$changedTouches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changedTouches(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$status$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$status(receiver);
};
J.get$statusText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$statusText(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.getProgramParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
J.getShaderInfoLog$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
J.getShaderParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.linkProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
J.open$3$async$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).open$3$async(receiver, a0, a1, a2);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.send$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).send$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.set$x$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$x(receiver, value);
};
J.set$y$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$y(receiver, value);
};
J.shaderSource$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
J.texImage2D$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2D$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texParameteri$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameteri$3(receiver, a0, a1, a2);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.uniform1i$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1i$2(receiver, a0, a1);
};
J.uniform4fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
};
J.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.vertexAttribPointer$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.EventStreamProvider_touchend = new W.EventStreamProvider("touchend");
C.EventStreamProvider_touchmove = new W.EventStreamProvider("touchmove");
C.EventStreamProvider_touchstart = new W.EventStreamProvider("touchstart");
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.Type_6Vn = H.createRuntimeType('_NativeTypedArray');
C.Type_Hp8 = H.createRuntimeType('_NativeTypedArrayOfInt');
C.Type_Ucj = H.createRuntimeType('_NativeTypedArrayOfDouble');
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qxd = H.createRuntimeType('Int64List');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.scene = null;
$.whiteMaterial = null;
$.blueMaterial = null;
$.greenMaterial = null;
$.checkerboardMaterial = null;
$.currentLevel = 1;
$.maxLevel = 3;
$.checkerboard = null;
$.controlPort = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.ShaderType_VertexShader = "VERTEX_SHADER";
$.ShaderType_FragmentShader = "FRAGMENT_SHADER";
$.TouchPhase_Began = "TouchPhase.Began";
$.TouchPhase_Moved = "TouchPhase.Moved";
$.TouchPhase_Ended = "TouchPhase.Ended";
$.Time_deltaTime = 0;
$.gl = null;
Isolate.$lazy($, "planets", "planets", "get$planets", function() {
  return [];
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  var t1, t2;
  t1 = {func: "void_", void: true};
  t2 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
  t2.ListQueue$1(null, t1);
  return t2;
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "Green", "Color_Green", "get$Color_Green", function() {
  var t1 = new T.Vector4(new Float32Array(4));
  t1.setValues$4(0, 1, 0, 1);
  return t1;
});
Isolate.$lazy($, "Blue", "Color_Blue", "get$Color_Blue", function() {
  var t1 = new T.Vector4(new Float32Array(4));
  t1.setValues$4(0, 0, 1, 1);
  return t1;
});
Isolate.$lazy($, "UnityBlue", "Color_UnityBlue", "get$Color_UnityBlue", function() {
  var t1 = new T.Vector4(new Float32Array(4));
  t1.setValues$4(0.19215686274509805, 0.30196078431372547, 0.4745098039215686, 1);
  return t1;
});
Isolate.$lazy($, "SolidBlack", "Color_SolidBlack", "get$Color_SolidBlack", function() {
  var t1 = new T.Vector4(new Float32Array(4));
  t1.setValues$4(0, 0, 0, 1);
  return t1;
});
Isolate.$lazy($, "_previousFrame", "Keyboard__previousFrame", "get$Keyboard__previousFrame", function() {
  return P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
});
Isolate.$lazy($, "_currentFrame", "Keyboard__currentFrame", "get$Keyboard__currentFrame", function() {
  return P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
});
Isolate.$lazy($, "_nextFrame", "Keyboard__nextFrame", "get$Keyboard__nextFrame", function() {
  return P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
});
Isolate.$lazy($, "_previousFrame", "Mouse__previousFrame", "get$Mouse__previousFrame", function() {
  return P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
});
Isolate.$lazy($, "_currentFrame", "Mouse__currentFrame", "get$Mouse__currentFrame", function() {
  return P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
});
Isolate.$lazy($, "_nextFrame", "Mouse__nextFrame", "get$Mouse__nextFrame", function() {
  return P.HashMap_HashMap(null, null, null, J.JSInt, J.JSBool);
});
Isolate.$lazy($, "_nextMousePosition", "Mouse__nextMousePosition", "get$Mouse__nextMousePosition", function() {
  return new T.Vector3(new Float32Array(3));
});
Isolate.$lazy($, "mousePosition", "Mouse_mousePosition", "get$Mouse_mousePosition", function() {
  return new T.Vector3(new Float32Array(3));
});
Isolate.$lazy($, "deltaMousePosition", "Mouse_deltaMousePosition", "get$Mouse_deltaMousePosition", function() {
  return new T.Vector3(new Float32Array(3));
});
Isolate.$lazy($, "_previousFrame", "Touch__previousFrame", "get$Touch__previousFrame", function() {
  return [];
});
Isolate.$lazy($, "_currentFrame", "Touch__currentFrame", "get$Touch__currentFrame", function() {
  return [];
});
Isolate.$lazy($, "_nextFrame", "Touch__nextFrame", "get$Touch__nextFrame", function() {
  return [];
});
Isolate.$lazy($, "_stopwatch", "Time__stopwatch", "get$Time__stopwatch", function() {
  return new P.Stopwatch(null, null);
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "void_", void: true},
{func: "void__Texture2D", void: true, args: [Q.Texture2D]},
{func: "void__MouseEvent", void: true, args: [W.MouseEvent]},
{func: "void__TouchEvent", void: true, args: [W.TouchEvent]},
{func: "void__dynamic", void: true, args: [null]},
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
{func: "int__dynamic", ret: J.JSInt, args: [null]},
{func: "int__Comparable_Comparable", ret: J.JSInt, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
{func: "void__KeyboardEvent", void: true, args: [W.KeyboardEvent]},
{func: "args0"},
{func: "args2", args: [null, null]},
{func: "args1", args: [null]},
{func: "dynamic__dynamic_String", args: [null, J.JSString]},
{func: "dynamic__String", args: [J.JSString]},
{func: "void__Fixture_Fixture", void: true, args: [V.Fixture, V.Fixture]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: J.JSString, args: [J.JSInt]},
{func: "void__Object", void: true, args: [P.Object]},
{func: "void__double", void: true, args: [J.JSDouble]},
{func: "void__Event", void: true, args: [W.Event]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(V.main$closure()); });
  } else {
    H.startRootIsolate(V.main$closure());
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  CanvasElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  CanvasElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  CanvasElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function CanvasRenderingContext() {
  }
  CanvasRenderingContext.builtin$cls = "CanvasRenderingContext";
  if (!"name" in CanvasRenderingContext)
    CanvasRenderingContext.name = "CanvasRenderingContext";
  $desc = $collectedClasses.CanvasRenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  EmbedElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  EmbedElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  EmbedElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  HtmlDocument.prototype.get$body = function(receiver) {
    return receiver.body;
  };
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  HttpRequest.prototype.get$status = function(receiver) {
    return receiver.status;
  };
  HttpRequest.prototype.get$statusText = function(receiver) {
    return receiver.statusText;
  };
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  IFrameElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  IFrameElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  IFrameElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.set$crossOrigin = function(receiver, v) {
    return receiver.crossOrigin = v;
  };
  ImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ImageElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  InputElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  InputElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  InputElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  MouseEvent.prototype.get$button = function(receiver) {
    return receiver.button;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ObjectElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ObjectElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$position = function(receiver) {
    return receiver.position;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function Screen() {
  }
  Screen.builtin$cls = "Screen";
  if (!"name" in Screen)
    Screen.name = "Screen";
  $desc = $collectedClasses.Screen;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Screen.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.set$crossOrigin = function(receiver, v) {
    return receiver.crossOrigin = v;
  };
  ScriptElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function Touch0() {
  }
  Touch0.builtin$cls = "Touch0";
  if (!"name" in Touch0)
    Touch0.name = "Touch0";
  $desc = $collectedClasses.Touch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Touch0.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  TouchEvent.prototype.get$changedTouches = function(receiver) {
    return receiver.changedTouches;
  };
  function TouchList() {
  }
  TouchList.builtin$cls = "TouchList";
  if (!"name" in TouchList)
    TouchList.name = "TouchList";
  $desc = $collectedClasses.TouchList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchList.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  VideoElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  VideoElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  VideoElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$status = function(receiver) {
    return receiver.status;
  };
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedTransformList() {
  }
  AnimatedTransformList.builtin$cls = "AnimatedTransformList";
  if (!"name" in AnimatedTransformList)
    AnimatedTransformList.name = "AnimatedTransformList";
  $desc = $collectedClasses.AnimatedTransformList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedTransformList.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEBlendElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEColorMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEComponentTransferElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FECompositeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEConvolveMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDiffuseLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDisplacementMapElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEFloodElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEGaussianBlurElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMergeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMorphologyElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEOffsetElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FEPointLightElement.prototype.get$z = function(receiver) {
    return receiver.z;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FESpecularLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FESpotLightElement.prototype.get$z = function(receiver) {
    return receiver.z;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETileElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETurbulenceElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FilterElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ForeignObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement0.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  MaskElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  PatternElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PointList() {
  }
  PointList.builtin$cls = "PointList";
  if (!"name" in PointList)
    PointList.name = "PointList";
  $desc = $collectedClasses.PointList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PointList.prototype = $desc;
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function Rect() {
  }
  Rect.builtin$cls = "Rect";
  if (!"name" in Rect)
    Rect.name = "Rect";
  $desc = $collectedClasses.Rect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rect.prototype = $desc;
  Rect.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  Rect.prototype.set$x = function(receiver, v) {
    return receiver.x = v;
  };
  Rect.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  Rect.prototype.set$y = function(receiver, v) {
    return receiver.y = v;
  };
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  RectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  SvgSvgElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  UseElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function Buffer() {
  }
  Buffer.builtin$cls = "Buffer";
  if (!"name" in Buffer)
    Buffer.name = "Buffer";
  $desc = $collectedClasses.Buffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Buffer.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function Program() {
  }
  Program.builtin$cls = "Program";
  if (!"name" in Program)
    Program.name = "Program";
  $desc = $collectedClasses.Program;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Program.prototype = $desc;
  function RenderingContext() {
  }
  RenderingContext.builtin$cls = "RenderingContext";
  if (!"name" in RenderingContext)
    RenderingContext.name = "RenderingContext";
  $desc = $collectedClasses.RenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RenderingContext.prototype = $desc;
  function Shader0() {
  }
  Shader0.builtin$cls = "Shader0";
  if (!"name" in Shader0)
    Shader0.name = "Shader0";
  $desc = $collectedClasses.Shader0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shader0.prototype = $desc;
  function Texture() {
  }
  Texture.builtin$cls = "Texture";
  if (!"name" in Texture)
    Texture.name = "Texture";
  $desc = $collectedClasses.Texture;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Texture.prototype = $desc;
  function UniformLocation() {
  }
  UniformLocation.builtin$cls = "UniformLocation";
  if (!"name" in UniformLocation)
    UniformLocation.name = "UniformLocation";
  $desc = $collectedClasses.UniformLocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UniformLocation.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  function ByteBuffer() {
  }
  ByteBuffer.builtin$cls = "ByteBuffer";
  if (!"name" in ByteBuffer)
    ByteBuffer.name = "ByteBuffer";
  $desc = $collectedClasses.ByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteBuffer.prototype = $desc;
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function ByteData() {
  }
  ByteData.builtin$cls = "ByteData";
  if (!"name" in ByteData)
    ByteData.name = "ByteData";
  $desc = $collectedClasses.ByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteData.prototype = $desc;
  function Float32List() {
  }
  Float32List.builtin$cls = "Float32List";
  if (!"name" in Float32List)
    Float32List.name = "Float32List";
  $desc = $collectedClasses.Float32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float32List.prototype = $desc;
  function Float64List() {
  }
  Float64List.builtin$cls = "Float64List";
  if (!"name" in Float64List)
    Float64List.name = "Float64List";
  $desc = $collectedClasses.Float64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float64List.prototype = $desc;
  function Int16List() {
  }
  Int16List.builtin$cls = "Int16List";
  if (!"name" in Int16List)
    Int16List.name = "Int16List";
  $desc = $collectedClasses.Int16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int16List.prototype = $desc;
  function Int32List() {
  }
  Int32List.builtin$cls = "Int32List";
  if (!"name" in Int32List)
    Int32List.name = "Int32List";
  $desc = $collectedClasses.Int32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32List.prototype = $desc;
  function Int8List() {
  }
  Int8List.builtin$cls = "Int8List";
  if (!"name" in Int8List)
    Int8List.name = "Int8List";
  $desc = $collectedClasses.Int8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int8List.prototype = $desc;
  function Uint16List() {
  }
  Uint16List.builtin$cls = "Uint16List";
  if (!"name" in Uint16List)
    Uint16List.name = "Uint16List";
  $desc = $collectedClasses.Uint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint16List.prototype = $desc;
  function Uint32List() {
  }
  Uint32List.builtin$cls = "Uint32List";
  if (!"name" in Uint32List)
    Uint32List.name = "Uint32List";
  $desc = $collectedClasses.Uint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint32List.prototype = $desc;
  function Uint8ClampedList() {
  }
  Uint8ClampedList.builtin$cls = "Uint8ClampedList";
  if (!"name" in Uint8ClampedList)
    Uint8ClampedList.name = "Uint8ClampedList";
  $desc = $collectedClasses.Uint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8ClampedList.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function ApplyGravity(name, enabled, gameObject, transform) {
    this.name = name;
    this.enabled = enabled;
    this.gameObject = gameObject;
    this.transform = transform;
  }
  ApplyGravity.builtin$cls = "ApplyGravity";
  if (!"name" in ApplyGravity)
    ApplyGravity.name = "ApplyGravity";
  $desc = $collectedClasses.ApplyGravity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ApplyGravity.prototype = $desc;
  function Ball(hits, pixelSize, mouseDown, touched, _firstPoint, _lastPoint, forceLineRenderer, lineMaterial, _points, name, enabled, gameObject, transform) {
    this.hits = hits;
    this.pixelSize = pixelSize;
    this.mouseDown = mouseDown;
    this.touched = touched;
    this._firstPoint = _firstPoint;
    this._lastPoint = _lastPoint;
    this.forceLineRenderer = forceLineRenderer;
    this.lineMaterial = lineMaterial;
    this._points = _points;
    this.name = name;
    this.enabled = enabled;
    this.gameObject = gameObject;
    this.transform = transform;
  }
  Ball.builtin$cls = "Ball";
  if (!"name" in Ball)
    Ball.name = "Ball";
  $desc = $collectedClasses.Ball;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Ball.prototype = $desc;
  function Planet(surfaceGravity, name, enabled, gameObject, transform) {
    this.surfaceGravity = surfaceGravity;
    this.name = name;
    this.enabled = enabled;
    this.gameObject = gameObject;
    this.transform = transform;
  }
  Planet.builtin$cls = "Planet";
  if (!"name" in Planet)
    Planet.name = "Planet";
  $desc = $collectedClasses.Planet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Planet.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function startRootIsolate_closure(entry_0) {
    this.entry_0 = entry_0;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(entry_1) {
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, weakPorts, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.weakPorts = weakPorts;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, replyTo_4) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.replyTo_4 = replyTo_4;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(box_0, this_1, shouldSerialize_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.shouldSerialize_2 = shouldSerialize_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function RawReceivePortImpl(_id, _handler, _isClosed) {
    this._id = _id;
    this._handler = _handler;
    this._isClosed = _isClosed;
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  RawReceivePortImpl.prototype.get$_isClosed = function() {
    return this._isClosed;
  };
  function ReceivePortImpl(_rawPort, _controller) {
    this._rawPort = _rawPort;
    this._controller = _controller;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  TypeErrorDecoder.prototype.get$_receiver = function() {
    return this._receiver;
  };
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  JsNoSuchMethodError.prototype.get$_receiver = function() {
    return this._receiver;
  };
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function TearOffClosure() {
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TearOffClosure.prototype = $desc;
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  BoundClosure.prototype.get$_self = function() {
    return this._self;
  };
  BoundClosure.prototype.get$_receiver = function() {
    return this._receiver;
  };
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  function RuntimeType() {
  }
  RuntimeType.builtin$cls = "RuntimeType";
  if (!"name" in RuntimeType)
    RuntimeType.name = "RuntimeType";
  $desc = $collectedClasses.RuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeType.prototype = $desc;
  function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
    this.returnType = returnType;
    this.parameterTypes = parameterTypes;
    this.optionalParameterTypes = optionalParameterTypes;
    this.namedParameters = namedParameters;
  }
  RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
  if (!"name" in RuntimeFunctionType)
    RuntimeFunctionType.name = "RuntimeFunctionType";
  $desc = $collectedClasses.RuntimeFunctionType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeFunctionType.prototype = $desc;
  function DynamicRuntimeType() {
  }
  DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
  if (!"name" in DynamicRuntimeType)
    DynamicRuntimeType.name = "DynamicRuntimeType";
  $desc = $collectedClasses.DynamicRuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicRuntimeType.prototype = $desc;
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function JSSyntaxRegExp(_nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSSyntaxRegExp.prototype = $desc;
  function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MatchImplementation.prototype = $desc;
  function _AllMatchesIterator(_regExp, _string, __js_helper$_current) {
    this._regExp = _regExp;
    this._string = _string;
    this.__js_helper$_current = __js_helper$_current;
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterator.prototype = $desc;
  function ContactFilter() {
  }
  ContactFilter.builtin$cls = "ContactFilter";
  if (!"name" in ContactFilter)
    ContactFilter.name = "ContactFilter";
  $desc = $collectedClasses.ContactFilter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactFilter.prototype = $desc;
  function ContactImpulse(normalImpulses, tangentImpulses) {
    this.normalImpulses = normalImpulses;
    this.tangentImpulses = tangentImpulses;
  }
  ContactImpulse.builtin$cls = "ContactImpulse";
  if (!"name" in ContactImpulse)
    ContactImpulse.name = "ContactImpulse";
  $desc = $collectedClasses.ContactImpulse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactImpulse.prototype = $desc;
  function AxisAlignedBox(lowerBound, upperBound) {
    this.lowerBound = lowerBound;
    this.upperBound = upperBound;
  }
  AxisAlignedBox.builtin$cls = "AxisAlignedBox";
  if (!"name" in AxisAlignedBox)
    AxisAlignedBox.name = "AxisAlignedBox";
  $desc = $collectedClasses.AxisAlignedBox;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AxisAlignedBox.prototype = $desc;
  function BroadPhase(_tree, proxyCount, moveBuffer, _pairBuffer, _pairCapacity, _pairCount, queryProxy) {
    this._tree = _tree;
    this.proxyCount = proxyCount;
    this.moveBuffer = moveBuffer;
    this._pairBuffer = _pairBuffer;
    this._pairCapacity = _pairCapacity;
    this._pairCount = _pairCount;
    this.queryProxy = queryProxy;
  }
  BroadPhase.builtin$cls = "BroadPhase";
  if (!"name" in BroadPhase)
    BroadPhase.name = "BroadPhase";
  $desc = $collectedClasses.BroadPhase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BroadPhase.prototype = $desc;
  function BroadPhase_updatePairs_closure() {
  }
  BroadPhase_updatePairs_closure.builtin$cls = "BroadPhase_updatePairs_closure";
  if (!"name" in BroadPhase_updatePairs_closure)
    BroadPhase_updatePairs_closure.name = "BroadPhase_updatePairs_closure";
  $desc = $collectedClasses.BroadPhase_updatePairs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BroadPhase_updatePairs_closure.prototype = $desc;
  function DynamicTree(_root, _nodeCount, _lastLeaf, _insertionCount, _path, _nodeStack, _drawVectors, _nodeCounter, _tempVector, _tempBox, center, deltaOne, deltaTwo) {
    this._root = _root;
    this._nodeCount = _nodeCount;
    this._lastLeaf = _lastLeaf;
    this._insertionCount = _insertionCount;
    this._path = _path;
    this._nodeStack = _nodeStack;
    this._drawVectors = _drawVectors;
    this._nodeCounter = _nodeCounter;
    this._tempVector = _tempVector;
    this._tempBox = _tempBox;
    this.center = center;
    this.deltaOne = deltaOne;
    this.deltaTwo = deltaTwo;
  }
  DynamicTree.builtin$cls = "DynamicTree";
  if (!"name" in DynamicTree)
    DynamicTree.name = "DynamicTree";
  $desc = $collectedClasses.DynamicTree;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicTree.prototype = $desc;
  function DynamicTreeNode(box, parent, next, childOne, childTwo, userData, key) {
    this.box = box;
    this.parent = parent;
    this.next = next;
    this.childOne = childOne;
    this.childTwo = childTwo;
    this.userData = userData;
    this.key = key;
  }
  DynamicTreeNode.builtin$cls = "DynamicTreeNode";
  if (!"name" in DynamicTreeNode)
    DynamicTreeNode.name = "DynamicTreeNode";
  $desc = $collectedClasses.DynamicTreeNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicTreeNode.prototype = $desc;
  DynamicTreeNode.prototype.set$parent = function(receiver, v) {
    return this.parent = v;
  };
  DynamicTreeNode.prototype.get$userData = function() {
    return this.userData;
  };
  DynamicTreeNode.prototype.get$key = function(receiver) {
    return this.key;
  };
  function Pair(proxyA, proxyB) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
  }
  Pair.builtin$cls = "Pair";
  if (!"name" in Pair)
    Pair.name = "Pair";
  $desc = $collectedClasses.Pair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Pair.prototype = $desc;
  Pair.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  Pair.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  Pair.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  Pair.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  function Collision(_pool, cache, input, output, results1, results2, incidentEdge, localTangent, localNormal, planePoint, tangent, normal, normal1, v11, v12, clipPoints1, clipPoints2) {
    this._pool = _pool;
    this.cache = cache;
    this.input = input;
    this.output = output;
    this.results1 = results1;
    this.results2 = results2;
    this.incidentEdge = incidentEdge;
    this.localTangent = localTangent;
    this.localNormal = localNormal;
    this.planePoint = planePoint;
    this.tangent = tangent;
    this.normal = normal;
    this.normal1 = normal1;
    this.v11 = v11;
    this.v12 = v12;
    this.clipPoints1 = clipPoints1;
    this.clipPoints2 = clipPoints2;
  }
  Collision.builtin$cls = "Collision";
  if (!"name" in Collision)
    Collision.name = "Collision";
  $desc = $collectedClasses.Collision;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Collision.prototype = $desc;
  function ClipVertex(v, id) {
    this.v = v;
    this.id = id;
  }
  ClipVertex.builtin$cls = "ClipVertex";
  if (!"name" in ClipVertex)
    ClipVertex.name = "ClipVertex";
  $desc = $collectedClasses.ClipVertex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipVertex.prototype = $desc;
  function EdgeResults(separation, edgeIndex) {
    this.separation = separation;
    this.edgeIndex = edgeIndex;
  }
  EdgeResults.builtin$cls = "EdgeResults";
  if (!"name" in EdgeResults)
    EdgeResults.name = "EdgeResults";
  $desc = $collectedClasses.EdgeResults;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EdgeResults.prototype = $desc;
  function ContactID(features) {
    this.features = features;
  }
  ContactID.builtin$cls = "ContactID";
  if (!"name" in ContactID)
    ContactID.name = "ContactID";
  $desc = $collectedClasses.ContactID;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactID.prototype = $desc;
  ContactID.prototype.get$features = function() {
    return this.features;
  };
  function Distance(calls, iters, maxIters, simplex, saveA, saveB, closestPoint, searchDirection, temp, normal) {
    this.calls = calls;
    this.iters = iters;
    this.maxIters = maxIters;
    this.simplex = simplex;
    this.saveA = saveA;
    this.saveB = saveB;
    this.closestPoint = closestPoint;
    this.searchDirection = searchDirection;
    this.temp = temp;
    this.normal = normal;
  }
  Distance.builtin$cls = "Distance";
  if (!"name" in Distance)
    Distance.name = "Distance";
  $desc = $collectedClasses.Distance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Distance.prototype = $desc;
  function DistanceInput(proxyA, proxyB, transformA, transformB, useRadii) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.transformA = transformA;
    this.transformB = transformB;
    this.useRadii = useRadii;
  }
  DistanceInput.builtin$cls = "DistanceInput";
  if (!"name" in DistanceInput)
    DistanceInput.name = "DistanceInput";
  $desc = $collectedClasses.DistanceInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceInput.prototype = $desc;
  DistanceInput.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  DistanceInput.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  DistanceInput.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  DistanceInput.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  function DistanceOutput(pointA, pointB, distance, iterations) {
    this.pointA = pointA;
    this.pointB = pointB;
    this.distance = distance;
    this.iterations = iterations;
  }
  DistanceOutput.builtin$cls = "DistanceOutput";
  if (!"name" in DistanceOutput)
    DistanceOutput.name = "DistanceOutput";
  $desc = $collectedClasses.DistanceOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceOutput.prototype = $desc;
  function DistanceProxy(vertices, count, radius) {
    this.vertices = vertices;
    this.count = count;
    this.radius = radius;
  }
  DistanceProxy.builtin$cls = "DistanceProxy";
  if (!"name" in DistanceProxy)
    DistanceProxy.name = "DistanceProxy";
  $desc = $collectedClasses.DistanceProxy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceProxy.prototype = $desc;
  DistanceProxy.prototype.get$vertices = function() {
    return this.vertices;
  };
  DistanceProxy.prototype.get$radius = function() {
    return this.radius;
  };
  function Features(referenceEdge, incidentEdge, incidentVertex, flip) {
    this.referenceEdge = referenceEdge;
    this.incidentEdge = incidentEdge;
    this.incidentVertex = incidentVertex;
    this.flip = flip;
  }
  Features.builtin$cls = "Features";
  if (!"name" in Features)
    Features.name = "Features";
  $desc = $collectedClasses.Features;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Features.prototype = $desc;
  Features.prototype.get$referenceEdge = function() {
    return this.referenceEdge;
  };
  function Manifold(points, localNormal, localPoint, type, pointCount) {
    this.points = points;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.type = type;
    this.pointCount = pointCount;
  }
  Manifold.builtin$cls = "Manifold";
  if (!"name" in Manifold)
    Manifold.name = "Manifold";
  $desc = $collectedClasses.Manifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Manifold.prototype = $desc;
  Manifold.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  function ManifoldPoint(localPoint, normalImpulse, tangentImpulse, id) {
    this.localPoint = localPoint;
    this.normalImpulse = normalImpulse;
    this.tangentImpulse = tangentImpulse;
    this.id = id;
  }
  ManifoldPoint.builtin$cls = "ManifoldPoint";
  if (!"name" in ManifoldPoint)
    ManifoldPoint.name = "ManifoldPoint";
  $desc = $collectedClasses.ManifoldPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ManifoldPoint.prototype = $desc;
  ManifoldPoint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ManifoldPoint.prototype.get$normalImpulse = function() {
    return this.normalImpulse;
  };
  ManifoldPoint.prototype.set$normalImpulse = function(v) {
    return this.normalImpulse = v;
  };
  ManifoldPoint.prototype.get$tangentImpulse = function() {
    return this.tangentImpulse;
  };
  ManifoldPoint.prototype.set$tangentImpulse = function(v) {
    return this.tangentImpulse = v;
  };
  function CircleShape(position, type, radius) {
    this.position = position;
    this.type = type;
    this.radius = radius;
  }
  CircleShape.builtin$cls = "CircleShape";
  if (!"name" in CircleShape)
    CircleShape.name = "CircleShape";
  $desc = $collectedClasses.CircleShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleShape.prototype = $desc;
  CircleShape.prototype.get$position = function(receiver) {
    return this.position;
  };
  function MassData(mass, center, inertia) {
    this.mass = mass;
    this.center = center;
    this.inertia = inertia;
  }
  MassData.builtin$cls = "MassData";
  if (!"name" in MassData)
    MassData.name = "MassData";
  $desc = $collectedClasses.MassData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MassData.prototype = $desc;
  function PolygonShape(centroid, vertices, normals, vertexCount, type, radius) {
    this.centroid = centroid;
    this.vertices = vertices;
    this.normals = normals;
    this.vertexCount = vertexCount;
    this.type = type;
    this.radius = radius;
  }
  PolygonShape.builtin$cls = "PolygonShape";
  if (!"name" in PolygonShape)
    PolygonShape.name = "PolygonShape";
  $desc = $collectedClasses.PolygonShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonShape.prototype = $desc;
  PolygonShape.prototype.get$centroid = function() {
    return this.centroid;
  };
  PolygonShape.prototype.get$vertexCount = function() {
    return this.vertexCount;
  };
  function Shape() {
  }
  Shape.builtin$cls = "Shape";
  if (!"name" in Shape)
    Shape.name = "Shape";
  $desc = $collectedClasses.Shape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shape.prototype = $desc;
  function Simplex(v1, v2, v3, vertices, count, e13, e23, e12, case2, case22, case3, case33) {
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
    this.vertices = vertices;
    this.count = count;
    this.e13 = e13;
    this.e23 = e23;
    this.e12 = e12;
    this.case2 = case2;
    this.case22 = case22;
    this.case3 = case3;
    this.case33 = case33;
  }
  Simplex.builtin$cls = "Simplex";
  if (!"name" in Simplex)
    Simplex.name = "Simplex";
  $desc = $collectedClasses.Simplex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Simplex.prototype = $desc;
  function SimplexCache(metric, count, indexA, indexB) {
    this.metric = metric;
    this.count = count;
    this.indexA = indexA;
    this.indexB = indexB;
  }
  SimplexCache.builtin$cls = "SimplexCache";
  if (!"name" in SimplexCache)
    SimplexCache.name = "SimplexCache";
  $desc = $collectedClasses.SimplexCache;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache.prototype = $desc;
  function SimplexCache_closure() {
  }
  SimplexCache_closure.builtin$cls = "SimplexCache_closure";
  if (!"name" in SimplexCache_closure)
    SimplexCache_closure.name = "SimplexCache_closure";
  $desc = $collectedClasses.SimplexCache_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache_closure.prototype = $desc;
  function SimplexCache_closure0() {
  }
  SimplexCache_closure0.builtin$cls = "SimplexCache_closure0";
  if (!"name" in SimplexCache_closure0)
    SimplexCache_closure0.name = "SimplexCache_closure0";
  $desc = $collectedClasses.SimplexCache_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache_closure0.prototype = $desc;
  function SimplexVertex(wA, wB, w, a, indexA, indexB) {
    this.wA = wA;
    this.wB = wB;
    this.w = w;
    this.a = a;
    this.indexA = indexA;
    this.indexB = indexB;
  }
  SimplexVertex.builtin$cls = "SimplexVertex";
  if (!"name" in SimplexVertex)
    SimplexVertex.name = "SimplexVertex";
  $desc = $collectedClasses.SimplexVertex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexVertex.prototype = $desc;
  function TimeOfImpact(cache, distanceInput, xfA, xfB, distanceOutput, fcn, indexes, sweepA, sweepB, pool) {
    this.cache = cache;
    this.distanceInput = distanceInput;
    this.xfA = xfA;
    this.xfB = xfB;
    this.distanceOutput = distanceOutput;
    this.fcn = fcn;
    this.indexes = indexes;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.pool = pool;
  }
  TimeOfImpact.builtin$cls = "TimeOfImpact";
  if (!"name" in TimeOfImpact)
    TimeOfImpact.name = "TimeOfImpact";
  $desc = $collectedClasses.TimeOfImpact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpact.prototype = $desc;
  function SeparationFunction(proxyA, proxyB, type, localPoint, axis, sweepA, sweepB, localPointA, localPointB, pointA, pointB, localPointA1, localPointA2, normal, localPointB1, localPointB2, axisA, axisB, temp, xfa, xfb) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.type = type;
    this.localPoint = localPoint;
    this.axis = axis;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.localPointA = localPointA;
    this.localPointB = localPointB;
    this.pointA = pointA;
    this.pointB = pointB;
    this.localPointA1 = localPointA1;
    this.localPointA2 = localPointA2;
    this.normal = normal;
    this.localPointB1 = localPointB1;
    this.localPointB2 = localPointB2;
    this.axisA = axisA;
    this.axisB = axisB;
    this.temp = temp;
    this.xfa = xfa;
    this.xfb = xfb;
  }
  SeparationFunction.builtin$cls = "SeparationFunction";
  if (!"name" in SeparationFunction)
    SeparationFunction.name = "SeparationFunction";
  $desc = $collectedClasses.SeparationFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SeparationFunction.prototype = $desc;
  SeparationFunction.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  SeparationFunction.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  SeparationFunction.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  SeparationFunction.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  SeparationFunction.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  function TimeOfImpactInput(proxyA, proxyB, sweepA, sweepB, tMax) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.tMax = tMax;
  }
  TimeOfImpactInput.builtin$cls = "TimeOfImpactInput";
  if (!"name" in TimeOfImpactInput)
    TimeOfImpactInput.name = "TimeOfImpactInput";
  $desc = $collectedClasses.TimeOfImpactInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactInput.prototype = $desc;
  TimeOfImpactInput.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  TimeOfImpactInput.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  function TimeOfImpactOutput(state, t) {
    this.state = state;
    this.t = t;
  }
  TimeOfImpactOutput.builtin$cls = "TimeOfImpactOutput";
  if (!"name" in TimeOfImpactOutput)
    TimeOfImpactOutput.name = "TimeOfImpactOutput";
  $desc = $collectedClasses.TimeOfImpactOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactOutput.prototype = $desc;
  function WorldManifold(normal, points, pool3, pool4) {
    this.normal = normal;
    this.points = points;
    this.pool3 = pool3;
    this.pool4 = pool4;
  }
  WorldManifold.builtin$cls = "WorldManifold";
  if (!"name" in WorldManifold)
    WorldManifold.name = "WorldManifold";
  $desc = $collectedClasses.WorldManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldManifold.prototype = $desc;
  function WorldManifold_closure() {
  }
  WorldManifold_closure.builtin$cls = "WorldManifold_closure";
  if (!"name" in WorldManifold_closure)
    WorldManifold_closure.name = "WorldManifold_closure";
  $desc = $collectedClasses.WorldManifold_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldManifold_closure.prototype = $desc;
  function Sweep(localCenter, centerZero, center, angleZero, angle) {
    this.localCenter = localCenter;
    this.centerZero = centerZero;
    this.center = center;
    this.angleZero = angleZero;
    this.angle = angle;
  }
  Sweep.builtin$cls = "Sweep";
  if (!"name" in Sweep)
    Sweep.name = "Sweep";
  $desc = $collectedClasses.Sweep;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Sweep.prototype = $desc;
  Sweep.prototype.get$localCenter = function() {
    return this.localCenter;
  };
  Sweep.prototype.get$centerZero = function() {
    return this.centerZero;
  };
  function Transform(position, rotation) {
    this.position = position;
    this.rotation = rotation;
  }
  Transform.builtin$cls = "Transform";
  if (!"name" in Transform)
    Transform.name = "Transform";
  $desc = $collectedClasses.Transform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transform.prototype = $desc;
  Transform.prototype.get$position = function(receiver) {
    return this.position;
  };
  Transform.prototype.get$rotation = function() {
    return this.rotation;
  };
  function Body(world, flags, contactList, sleepTime, userData, _linearVelocity, _angularVelocity, mass, invMass, next, prev, fixtureList, fixtureCount, jointList, _force, _torque, _inertia, invInertia, linearDamping, angularDamping, _type, islandIndex, originTransform, sweep, _fixDef, _pmd, _pxf, oldCenter, tempCenter) {
    this.world = world;
    this.flags = flags;
    this.contactList = contactList;
    this.sleepTime = sleepTime;
    this.userData = userData;
    this._linearVelocity = _linearVelocity;
    this._angularVelocity = _angularVelocity;
    this.mass = mass;
    this.invMass = invMass;
    this.next = next;
    this.prev = prev;
    this.fixtureList = fixtureList;
    this.fixtureCount = fixtureCount;
    this.jointList = jointList;
    this._force = _force;
    this._torque = _torque;
    this._inertia = _inertia;
    this.invInertia = invInertia;
    this.linearDamping = linearDamping;
    this.angularDamping = angularDamping;
    this._type = _type;
    this.islandIndex = islandIndex;
    this.originTransform = originTransform;
    this.sweep = sweep;
    this._fixDef = _fixDef;
    this._pmd = _pmd;
    this._pxf = _pxf;
    this.oldCenter = oldCenter;
    this.tempCenter = tempCenter;
  }
  Body.builtin$cls = "Body";
  if (!"name" in Body)
    Body.name = "Body";
  $desc = $collectedClasses.Body;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Body.prototype = $desc;
  Body.prototype.get$flags = function() {
    return this.flags;
  };
  Body.prototype.get$contactList = function() {
    return this.contactList;
  };
  Body.prototype.get$_type = function() {
    return this._type;
  };
  Body.prototype.get$sweep = function() {
    return this.sweep;
  };
  function BodyDef(type, angle, userData, position, linearVelocity, angularVelocity, fixedRotation, isSleeping, bullet, allowSleep, linearDamping, angularDamping, awake, active) {
    this.type = type;
    this.angle = angle;
    this.userData = userData;
    this.position = position;
    this.linearVelocity = linearVelocity;
    this.angularVelocity = angularVelocity;
    this.fixedRotation = fixedRotation;
    this.isSleeping = isSleeping;
    this.bullet = bullet;
    this.allowSleep = allowSleep;
    this.linearDamping = linearDamping;
    this.angularDamping = angularDamping;
    this.awake = awake;
    this.active = active;
  }
  BodyDef.builtin$cls = "BodyDef";
  if (!"name" in BodyDef)
    BodyDef.name = "BodyDef";
  $desc = $collectedClasses.BodyDef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyDef.prototype = $desc;
  BodyDef.prototype.get$position = function(receiver) {
    return this.position;
  };
  function ContactManager(broadPhase, contactList, contactCount, contactFilter, contactListener, pool) {
    this.broadPhase = broadPhase;
    this.contactList = contactList;
    this.contactCount = contactCount;
    this.contactFilter = contactFilter;
    this.contactListener = contactListener;
    this.pool = pool;
  }
  ContactManager.builtin$cls = "ContactManager";
  if (!"name" in ContactManager)
    ContactManager.name = "ContactManager";
  $desc = $collectedClasses.ContactManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactManager.prototype = $desc;
  function CircleContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  CircleContact.builtin$cls = "CircleContact";
  if (!"name" in CircleContact)
    CircleContact.name = "CircleContact";
  $desc = $collectedClasses.CircleContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleContact.prototype = $desc;
  function Contact(manifold) {
    this.manifold = manifold;
  }
  Contact.builtin$cls = "Contact";
  if (!"name" in Contact)
    Contact.name = "Contact";
  $desc = $collectedClasses.Contact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Contact.prototype = $desc;
  Contact.prototype.get$manifold = function() {
    return this.manifold;
  };
  function ContactConstraint(points, localNormal, localPoint, normal, normalMass, K, bodyA, bodyB, type, radius, friction, restitution, pointCount, manifold) {
    this.points = points;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.normal = normal;
    this.normalMass = normalMass;
    this.K = K;
    this.bodyA = bodyA;
    this.bodyB = bodyB;
    this.type = type;
    this.radius = radius;
    this.friction = friction;
    this.restitution = restitution;
    this.pointCount = pointCount;
    this.manifold = manifold;
  }
  ContactConstraint.builtin$cls = "ContactConstraint";
  if (!"name" in ContactConstraint)
    ContactConstraint.name = "ContactConstraint";
  $desc = $collectedClasses.ContactConstraint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraint.prototype = $desc;
  ContactConstraint.prototype.get$points = function(receiver) {
    return this.points;
  };
  ContactConstraint.prototype.get$localNormal = function() {
    return this.localNormal;
  };
  ContactConstraint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ContactConstraint.prototype.get$normal = function() {
    return this.normal;
  };
  ContactConstraint.prototype.get$bodyA = function() {
    return this.bodyA;
  };
  ContactConstraint.prototype.set$bodyA = function(v) {
    return this.bodyA = v;
  };
  ContactConstraint.prototype.get$bodyB = function() {
    return this.bodyB;
  };
  ContactConstraint.prototype.set$bodyB = function(v) {
    return this.bodyB = v;
  };
  ContactConstraint.prototype.get$type = function(receiver) {
    return this.type;
  };
  ContactConstraint.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  ContactConstraint.prototype.set$radius = function(v) {
    return this.radius = v;
  };
  ContactConstraint.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  ContactConstraint.prototype.set$pointCount = function(v) {
    return this.pointCount = v;
  };
  ContactConstraint.prototype.get$manifold = function() {
    return this.manifold;
  };
  ContactConstraint.prototype.set$manifold = function(v) {
    return this.manifold = v;
  };
  function ContactConstraint_closure() {
  }
  ContactConstraint_closure.builtin$cls = "ContactConstraint_closure";
  if (!"name" in ContactConstraint_closure)
    ContactConstraint_closure.name = "ContactConstraint_closure";
  $desc = $collectedClasses.ContactConstraint_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraint_closure.prototype = $desc;
  function ContactConstraintPoint(localPoint, rA, rB, normalImpulse, tangentImpulse, normalMass, tangentMass, velocityBias) {
    this.localPoint = localPoint;
    this.rA = rA;
    this.rB = rB;
    this.normalImpulse = normalImpulse;
    this.tangentImpulse = tangentImpulse;
    this.normalMass = normalMass;
    this.tangentMass = tangentMass;
    this.velocityBias = velocityBias;
  }
  ContactConstraintPoint.builtin$cls = "ContactConstraintPoint";
  if (!"name" in ContactConstraintPoint)
    ContactConstraintPoint.name = "ContactConstraintPoint";
  $desc = $collectedClasses.ContactConstraintPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraintPoint.prototype = $desc;
  ContactConstraintPoint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ContactConstraintPoint.prototype.get$rA = function() {
    return this.rA;
  };
  ContactConstraintPoint.prototype.get$rB = function() {
    return this.rB;
  };
  ContactConstraintPoint.prototype.get$normalImpulse = function() {
    return this.normalImpulse;
  };
  ContactConstraintPoint.prototype.set$normalImpulse = function(v) {
    return this.normalImpulse = v;
  };
  ContactConstraintPoint.prototype.get$tangentImpulse = function() {
    return this.tangentImpulse;
  };
  ContactConstraintPoint.prototype.set$tangentImpulse = function(v) {
    return this.tangentImpulse = v;
  };
  ContactConstraintPoint.prototype.get$normalMass = function() {
    return this.normalMass;
  };
  ContactConstraintPoint.prototype.get$tangentMass = function() {
    return this.tangentMass;
  };
  function ContactEdge(other, contact, prev, next) {
    this.other = other;
    this.contact = contact;
    this.prev = prev;
    this.next = next;
  }
  ContactEdge.builtin$cls = "ContactEdge";
  if (!"name" in ContactEdge)
    ContactEdge.name = "ContactEdge";
  $desc = $collectedClasses.ContactEdge;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactEdge.prototype = $desc;
  function ContactRegister(creator, primary) {
    this.creator = creator;
    this.primary = primary;
  }
  ContactRegister.builtin$cls = "ContactRegister";
  if (!"name" in ContactRegister)
    ContactRegister.name = "ContactRegister";
  $desc = $collectedClasses.ContactRegister;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactRegister.prototype = $desc;
  function ContactSolver(constraints, constraintCount, worldManifold, tangent, temp1, temp2, P, dv, dv1, dv2, x, d, P1, P2, psolver, rA, rB) {
    this.constraints = constraints;
    this.constraintCount = constraintCount;
    this.worldManifold = worldManifold;
    this.tangent = tangent;
    this.temp1 = temp1;
    this.temp2 = temp2;
    this.P = P;
    this.dv = dv;
    this.dv1 = dv1;
    this.dv2 = dv2;
    this.x = x;
    this.d = d;
    this.P1 = P1;
    this.P2 = P2;
    this.psolver = psolver;
    this.rA = rA;
    this.rB = rB;
  }
  ContactSolver.builtin$cls = "ContactSolver";
  if (!"name" in ContactSolver)
    ContactSolver.name = "ContactSolver";
  $desc = $collectedClasses.ContactSolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactSolver.prototype = $desc;
  ContactSolver.prototype.get$x = function(receiver) {
    return this.x;
  };
  ContactSolver.prototype.get$rA = function() {
    return this.rA;
  };
  ContactSolver.prototype.get$rB = function() {
    return this.rB;
  };
  function ContactSolver_closure() {
  }
  ContactSolver_closure.builtin$cls = "ContactSolver_closure";
  if (!"name" in ContactSolver_closure)
    ContactSolver_closure.name = "ContactSolver_closure";
  $desc = $collectedClasses.ContactSolver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactSolver_closure.prototype = $desc;
  function PositionSolverManifold(normal, point, separation, pointA, pointB, temp, planePoint, clipPoint) {
    this.normal = normal;
    this.point = point;
    this.separation = separation;
    this.pointA = pointA;
    this.pointB = pointB;
    this.temp = temp;
    this.planePoint = planePoint;
    this.clipPoint = clipPoint;
  }
  PositionSolverManifold.builtin$cls = "PositionSolverManifold";
  if (!"name" in PositionSolverManifold)
    PositionSolverManifold.name = "PositionSolverManifold";
  $desc = $collectedClasses.PositionSolverManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionSolverManifold.prototype = $desc;
  function PolygonAndCircleContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  PolygonAndCircleContact.builtin$cls = "PolygonAndCircleContact";
  if (!"name" in PolygonAndCircleContact)
    PolygonAndCircleContact.name = "PolygonAndCircleContact";
  $desc = $collectedClasses.PolygonAndCircleContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonAndCircleContact.prototype = $desc;
  function PolygonContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  PolygonContact.builtin$cls = "PolygonContact";
  if (!"name" in PolygonContact)
    PolygonContact.name = "PolygonContact";
  $desc = $collectedClasses.PolygonContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonContact.prototype = $desc;
  function TimeOfImpactConstraint(localPoints, localNormal, localPoint, type, radius, pointCount, bodyA, bodyB) {
    this.localPoints = localPoints;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.type = type;
    this.radius = radius;
    this.pointCount = pointCount;
    this.bodyA = bodyA;
    this.bodyB = bodyB;
  }
  TimeOfImpactConstraint.builtin$cls = "TimeOfImpactConstraint";
  if (!"name" in TimeOfImpactConstraint)
    TimeOfImpactConstraint.name = "TimeOfImpactConstraint";
  $desc = $collectedClasses.TimeOfImpactConstraint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactConstraint.prototype = $desc;
  TimeOfImpactConstraint.prototype.get$localPoints = function() {
    return this.localPoints;
  };
  TimeOfImpactConstraint.prototype.get$localNormal = function() {
    return this.localNormal;
  };
  TimeOfImpactConstraint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  TimeOfImpactConstraint.prototype.get$type = function(receiver) {
    return this.type;
  };
  TimeOfImpactConstraint.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  TimeOfImpactConstraint.prototype.set$radius = function(v) {
    return this.radius = v;
  };
  TimeOfImpactConstraint.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  TimeOfImpactConstraint.prototype.set$pointCount = function(v) {
    return this.pointCount = v;
  };
  TimeOfImpactConstraint.prototype.get$bodyA = function() {
    return this.bodyA;
  };
  TimeOfImpactConstraint.prototype.set$bodyA = function(v) {
    return this.bodyA = v;
  };
  TimeOfImpactConstraint.prototype.get$bodyB = function() {
    return this.bodyB;
  };
  TimeOfImpactConstraint.prototype.set$bodyB = function(v) {
    return this.bodyB = v;
  };
  function TimeOfImpactConstraint_closure() {
  }
  TimeOfImpactConstraint_closure.builtin$cls = "TimeOfImpactConstraint_closure";
  if (!"name" in TimeOfImpactConstraint_closure)
    TimeOfImpactConstraint_closure.name = "TimeOfImpactConstraint_closure";
  $desc = $collectedClasses.TimeOfImpactConstraint_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactConstraint_closure.prototype = $desc;
  function TimeOfImpactSolver(constraints, count, toiBody, psm, rA, rB, P, temp) {
    this.constraints = constraints;
    this.count = count;
    this.toiBody = toiBody;
    this.psm = psm;
    this.rA = rA;
    this.rB = rB;
    this.P = P;
    this.temp = temp;
  }
  TimeOfImpactSolver.builtin$cls = "TimeOfImpactSolver";
  if (!"name" in TimeOfImpactSolver)
    TimeOfImpactSolver.name = "TimeOfImpactSolver";
  $desc = $collectedClasses.TimeOfImpactSolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolver.prototype = $desc;
  TimeOfImpactSolver.prototype.get$rA = function() {
    return this.rA;
  };
  TimeOfImpactSolver.prototype.get$rB = function() {
    return this.rB;
  };
  function TimeOfImpactSolver_closure() {
  }
  TimeOfImpactSolver_closure.builtin$cls = "TimeOfImpactSolver_closure";
  if (!"name" in TimeOfImpactSolver_closure)
    TimeOfImpactSolver_closure.name = "TimeOfImpactSolver_closure";
  $desc = $collectedClasses.TimeOfImpactSolver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolver_closure.prototype = $desc;
  function TimeOfImpactSolverManifold(normal, point, separation, pointA, pointB, temp, planePoint, clipPoint) {
    this.normal = normal;
    this.point = point;
    this.separation = separation;
    this.pointA = pointA;
    this.pointB = pointB;
    this.temp = temp;
    this.planePoint = planePoint;
    this.clipPoint = clipPoint;
  }
  TimeOfImpactSolverManifold.builtin$cls = "TimeOfImpactSolverManifold";
  if (!"name" in TimeOfImpactSolverManifold)
    TimeOfImpactSolverManifold.name = "TimeOfImpactSolverManifold";
  $desc = $collectedClasses.TimeOfImpactSolverManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolverManifold.prototype = $desc;
  function Filter(categoryBits, maskBits, groupIndex) {
    this.categoryBits = categoryBits;
    this.maskBits = maskBits;
    this.groupIndex = groupIndex;
  }
  Filter.builtin$cls = "Filter";
  if (!"name" in Filter)
    Filter.name = "Filter";
  $desc = $collectedClasses.Filter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Filter.prototype = $desc;
  function Fixture(box, density, next, body, shape, friction, restitution, proxy, filter, isSensor, userData, _poolOne, _poolTwo) {
    this.box = box;
    this.density = density;
    this.next = next;
    this.body = body;
    this.shape = shape;
    this.friction = friction;
    this.restitution = restitution;
    this.proxy = proxy;
    this.filter = filter;
    this.isSensor = isSensor;
    this.userData = userData;
    this._poolOne = _poolOne;
    this._poolTwo = _poolTwo;
  }
  Fixture.builtin$cls = "Fixture";
  if (!"name" in Fixture)
    Fixture.name = "Fixture";
  $desc = $collectedClasses.Fixture;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Fixture.prototype = $desc;
  Fixture.prototype.get$body = function(receiver) {
    return this.body;
  };
  Fixture.prototype.get$shape = function(receiver) {
    return this.shape;
  };
  Fixture.prototype.get$proxy = function() {
    return this.proxy;
  };
  Fixture.prototype.get$filter = function() {
    return this.filter;
  };
  Fixture.prototype.get$isSensor = function() {
    return this.isSensor;
  };
  function FixtureDef(shape, userData, friction, restitution, density, isSensor, filter) {
    this.shape = shape;
    this.userData = userData;
    this.friction = friction;
    this.restitution = restitution;
    this.density = density;
    this.isSensor = isSensor;
    this.filter = filter;
  }
  FixtureDef.builtin$cls = "FixtureDef";
  if (!"name" in FixtureDef)
    FixtureDef.name = "FixtureDef";
  $desc = $collectedClasses.FixtureDef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixtureDef.prototype = $desc;
  function Island(listener, bodies, contacts, joints, positions, velocities, bodyCount, jointCount, contactCount, bodyCapacity, contactCapacity, jointCapacity, positionIterationCount, _contactSolver, _translation, impulse) {
    this.listener = listener;
    this.bodies = bodies;
    this.contacts = contacts;
    this.joints = joints;
    this.positions = positions;
    this.velocities = velocities;
    this.bodyCount = bodyCount;
    this.jointCount = jointCount;
    this.contactCount = contactCount;
    this.bodyCapacity = bodyCapacity;
    this.contactCapacity = contactCapacity;
    this.jointCapacity = jointCapacity;
    this.positionIterationCount = positionIterationCount;
    this._contactSolver = _contactSolver;
    this._translation = _translation;
    this.impulse = impulse;
  }
  Island.builtin$cls = "Island";
  if (!"name" in Island)
    Island.name = "Island";
  $desc = $collectedClasses.Island;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Island.prototype = $desc;
  function Position(x, a) {
    this.x = x;
    this.a = a;
  }
  Position.builtin$cls = "Position";
  if (!"name" in Position)
    Position.name = "Position";
  $desc = $collectedClasses.Position;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Position.prototype = $desc;
  Position.prototype.get$x = function(receiver) {
    return this.x;
  };
  Position.prototype.set$x = function(receiver, v) {
    return this.x = v;
  };
  function Velocity(v, a) {
    this.v = v;
    this.a = a;
  }
  Velocity.builtin$cls = "Velocity";
  if (!"name" in Velocity)
    Velocity.name = "Velocity";
  $desc = $collectedClasses.Velocity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Velocity.prototype = $desc;
  function Joint() {
  }
  Joint.builtin$cls = "Joint";
  if (!"name" in Joint)
    Joint.name = "Joint";
  $desc = $collectedClasses.Joint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Joint.prototype = $desc;
  function TimeStep(dt, inv_dt, dtRatio, velocityIterations, positionIterations, warmStarting) {
    this.dt = dt;
    this.inv_dt = inv_dt;
    this.dtRatio = dtRatio;
    this.velocityIterations = velocityIterations;
    this.positionIterations = positionIterations;
    this.warmStarting = warmStarting;
  }
  TimeStep.builtin$cls = "TimeStep";
  if (!"name" in TimeStep)
    TimeStep.name = "TimeStep";
  $desc = $collectedClasses.TimeStep;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeStep.prototype = $desc;
  function World(_flags, _contactManager, _bodyList, _jointList, _bodyCount, _jointCount, _gravity, _allowSleep, _debugDraw, _fixtureDestructionListener, _jointDestructionListener, _pool, _inverseTimestep, _warmStarting, _continuousPhysics, _contactStacks, center, axis, timestep, cA, cB, wqwrapper, toiInput, toiOutput, backup, toiSolver, contacts, island, stack) {
    this._flags = _flags;
    this._contactManager = _contactManager;
    this._bodyList = _bodyList;
    this._jointList = _jointList;
    this._bodyCount = _bodyCount;
    this._jointCount = _jointCount;
    this._gravity = _gravity;
    this._allowSleep = _allowSleep;
    this._debugDraw = _debugDraw;
    this._fixtureDestructionListener = _fixtureDestructionListener;
    this._jointDestructionListener = _jointDestructionListener;
    this._pool = _pool;
    this._inverseTimestep = _inverseTimestep;
    this._warmStarting = _warmStarting;
    this._continuousPhysics = _continuousPhysics;
    this._contactStacks = _contactStacks;
    this.center = center;
    this.axis = axis;
    this.timestep = timestep;
    this.cA = cA;
    this.cB = cB;
    this.wqwrapper = wqwrapper;
    this.toiInput = toiInput;
    this.toiOutput = toiOutput;
    this.backup = backup;
    this.toiSolver = toiSolver;
    this.contacts = contacts;
    this.island = island;
    this.stack = stack;
  }
  World.builtin$cls = "World";
  if (!"name" in World)
    World.name = "World";
  $desc = $collectedClasses.World;
  if ($desc instanceof Array)
    $desc = $desc[1];
  World.prototype = $desc;
  function WorldQueryWrapper(broadPhase, callback) {
    this.broadPhase = broadPhase;
    this.callback = callback;
  }
  WorldQueryWrapper.builtin$cls = "WorldQueryWrapper";
  if (!"name" in WorldQueryWrapper)
    WorldQueryWrapper.name = "WorldQueryWrapper";
  $desc = $collectedClasses.WorldQueryWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldQueryWrapper.prototype = $desc;
  function DefaultWorldPool(collision, timeOfImpact, distance) {
    this.collision = collision;
    this.timeOfImpact = timeOfImpact;
    this.distance = distance;
  }
  DefaultWorldPool.builtin$cls = "DefaultWorldPool";
  if (!"name" in DefaultWorldPool)
    DefaultWorldPool.name = "DefaultWorldPool";
  $desc = $collectedClasses.DefaultWorldPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefaultWorldPool.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_2, box_1, hasError_4, listener_5) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function StreamTransformer() {
  }
  StreamTransformer.builtin$cls = "StreamTransformer";
  if (!"name" in StreamTransformer)
    StreamTransformer.name = "StreamTransformer";
  $desc = $collectedClasses.StreamTransformer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamTransformer.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _ControllerStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_controller = _async$_controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function _HashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_addAll_closure.builtin$cls = "_HashMap_addAll_closure";
  if (!"name" in _HashMap_addAll_closure)
    _HashMap_addAll_closure.name = "_HashMap_addAll_closure";
  $desc = $collectedClasses._HashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_addAll_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_element, _next, _previous) {
    this._element = _element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_element = function() {
    return this._element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._position = _position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime() {
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function Stopwatch(_core$_start, _stop) {
    this._core$_start = _core$_start;
    this._stop = _stop;
  }
  Stopwatch.builtin$cls = "Stopwatch";
  if (!"name" in Stopwatch)
    Stopwatch.name = "Stopwatch";
  $desc = $collectedClasses.Stopwatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stopwatch.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Console() {
  }
  Console.builtin$cls = "Console";
  if (!"name" in Console)
    Console.name = "Console";
  $desc = $collectedClasses.Console;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Console.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _html$_position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._html$_position = _html$_position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function() {
    return this.left;
  };
  function _NativeTypedArray() {
  }
  _NativeTypedArray.builtin$cls = "_NativeTypedArray";
  if (!"name" in _NativeTypedArray)
    _NativeTypedArray.name = "_NativeTypedArray";
  $desc = $collectedClasses._NativeTypedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeTypedArray.prototype = $desc;
  function _NativeTypedArrayOfDouble() {
  }
  _NativeTypedArrayOfDouble.builtin$cls = "_NativeTypedArrayOfDouble";
  if (!"name" in _NativeTypedArrayOfDouble)
    _NativeTypedArrayOfDouble.name = "_NativeTypedArrayOfDouble";
  $desc = $collectedClasses._NativeTypedArrayOfDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeTypedArrayOfDouble.prototype = $desc;
  function _NativeTypedArray_ListMixin() {
  }
  _NativeTypedArray_ListMixin.builtin$cls = "_NativeTypedArray_ListMixin";
  if (!"name" in _NativeTypedArray_ListMixin)
    _NativeTypedArray_ListMixin.name = "_NativeTypedArray_ListMixin";
  $desc = $collectedClasses._NativeTypedArray_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeTypedArray_ListMixin.prototype = $desc;
  function _NativeTypedArray_ListMixin_FixedLengthListMixin() {
  }
  _NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "_NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in _NativeTypedArray_ListMixin_FixedLengthListMixin)
    _NativeTypedArray_ListMixin_FixedLengthListMixin.name = "_NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses._NativeTypedArray_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  function _NativeTypedArrayOfInt() {
  }
  _NativeTypedArrayOfInt.builtin$cls = "_NativeTypedArrayOfInt";
  if (!"name" in _NativeTypedArrayOfInt)
    _NativeTypedArrayOfInt.name = "_NativeTypedArrayOfInt";
  $desc = $collectedClasses._NativeTypedArrayOfInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeTypedArrayOfInt.prototype = $desc;
  function _NativeTypedArray_ListMixin0() {
  }
  _NativeTypedArray_ListMixin0.builtin$cls = "_NativeTypedArray_ListMixin0";
  if (!"name" in _NativeTypedArray_ListMixin0)
    _NativeTypedArray_ListMixin0.name = "_NativeTypedArray_ListMixin0";
  $desc = $collectedClasses._NativeTypedArray_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeTypedArray_ListMixin0.prototype = $desc;
  function _NativeTypedArray_ListMixin_FixedLengthListMixin0() {
  }
  _NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "_NativeTypedArray_ListMixin_FixedLengthListMixin0";
  if (!"name" in _NativeTypedArray_ListMixin_FixedLengthListMixin0)
    _NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "_NativeTypedArray_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses._NativeTypedArray_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function Component() {
  }
  Component.builtin$cls = "Component";
  if (!"name" in Component)
    Component.name = "Component";
  $desc = $collectedClasses.Component;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Component.prototype = $desc;
  function GameObject(name, components, children, scene, transform, renderer, collider, rigidbody, camera) {
    this.name = name;
    this.components = components;
    this.children = children;
    this.scene = scene;
    this.transform = transform;
    this.renderer = renderer;
    this.collider = collider;
    this.rigidbody = rigidbody;
    this.camera = camera;
  }
  GameObject.builtin$cls = "GameObject";
  if (!"name" in GameObject)
    GameObject.name = "GameObject";
  $desc = $collectedClasses.GameObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameObject.prototype = $desc;
  function Scene(name, gameObjects, cameras, Paused, canvas, world) {
    this.name = name;
    this.gameObjects = gameObjects;
    this.cameras = cameras;
    this.Paused = Paused;
    this.canvas = canvas;
    this.world = world;
  }
  Scene.builtin$cls = "Scene";
  if (!"name" in Scene)
    Scene.name = "Scene";
  $desc = $collectedClasses.Scene;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Scene.prototype = $desc;
  function Camera(vapor$Camera$name, backgroundColor, fieldOfView, aspect, nearClipPlane, farClipPlane, projectionMatrix, name, enabled, gameObject, transform) {
    this.vapor$Camera$name = vapor$Camera$name;
    this.backgroundColor = backgroundColor;
    this.fieldOfView = fieldOfView;
    this.aspect = aspect;
    this.nearClipPlane = nearClipPlane;
    this.farClipPlane = farClipPlane;
    this.projectionMatrix = projectionMatrix;
    this.name = name;
    this.enabled = enabled;
    this.gameObject = gameObject;
    this.transform = transform;
  }
  Camera.builtin$cls = "Camera";
  if (!"name" in Camera)
    Camera.name = "Camera";
  $desc = $collectedClasses.Camera;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Camera.prototype = $desc;
  Camera.prototype.get$projectionMatrix = function() {
    return this.projectionMatrix;
  };
  function Canvas(element) {
    this.element = element;
  }
  Canvas.builtin$cls = "Canvas";
  if (!"name" in Canvas)
    Canvas.name = "Canvas";
  $desc = $collectedClasses.Canvas;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Canvas.prototype = $desc;
  function Material(shader, textureCount, _cache, _textureIndices) {
    this.shader = shader;
    this.textureCount = textureCount;
    this._cache = _cache;
    this._textureIndices = _textureIndices;
  }
  Material.builtin$cls = "Material";
  if (!"name" in Material)
    Material.name = "Material";
  $desc = $collectedClasses.Material;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Material.prototype = $desc;
  function Mesh(name, _vertices, vertexBuffer, vertexCount, _uv, uvBuffer, _normals, normalBuffer, _triangles, indexBuffer, indexCount) {
    this.name = name;
    this._vertices = _vertices;
    this.vertexBuffer = vertexBuffer;
    this.vertexCount = vertexCount;
    this._uv = _uv;
    this.uvBuffer = uvBuffer;
    this._normals = _normals;
    this.normalBuffer = normalBuffer;
    this._triangles = _triangles;
    this.indexBuffer = indexBuffer;
    this.indexCount = indexCount;
  }
  Mesh.builtin$cls = "Mesh";
  if (!"name" in Mesh)
    Mesh.name = "Mesh";
  $desc = $collectedClasses.Mesh;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mesh.prototype = $desc;
  function MeshRenderer(vapor$MeshRenderer$name, mesh, vapor$Renderer$name, material, name, enabled, gameObject, transform) {
    this.vapor$MeshRenderer$name = vapor$MeshRenderer$name;
    this.mesh = mesh;
    this.vapor$Renderer$name = vapor$Renderer$name;
    this.material = material;
    this.name = name;
    this.enabled = enabled;
    this.gameObject = gameObject;
    this.transform = transform;
  }
  MeshRenderer.builtin$cls = "MeshRenderer";
  if (!"name" in MeshRenderer)
    MeshRenderer.name = "MeshRenderer";
  $desc = $collectedClasses.MeshRenderer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeshRenderer.prototype = $desc;
  function Renderer() {
  }
  Renderer.builtin$cls = "Renderer";
  if (!"name" in Renderer)
    Renderer.name = "Renderer";
  $desc = $collectedClasses.Renderer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Renderer.prototype = $desc;
  function Shader(vertexShader, pixelShader, program, filepath, usesTexCoords, usesNormals, vertexPositionAttribute, textureCoordAttribute, vertexNormalAttribute) {
    this.vertexShader = vertexShader;
    this.pixelShader = pixelShader;
    this.program = program;
    this.filepath = filepath;
    this.usesTexCoords = usesTexCoords;
    this.usesNormals = usesNormals;
    this.vertexPositionAttribute = vertexPositionAttribute;
    this.textureCoordAttribute = textureCoordAttribute;
    this.vertexNormalAttribute = vertexNormalAttribute;
  }
  Shader.builtin$cls = "Shader";
  if (!"name" in Shader)
    Shader.name = "Shader";
  $desc = $collectedClasses.Shader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shader.prototype = $desc;
  function Texture2D(name, image, glTexture, LoadedCallback) {
    this.name = name;
    this.image = image;
    this.glTexture = glTexture;
    this.LoadedCallback = LoadedCallback;
  }
  Texture2D.builtin$cls = "Texture2D";
  if (!"name" in Texture2D)
    Texture2D.name = "Texture2D";
  $desc = $collectedClasses.Texture2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Texture2D.prototype = $desc;
  Texture2D.prototype.get$glTexture = function() {
    return this.glTexture;
  };
  function Keyboard() {
  }
  Keyboard.builtin$cls = "Keyboard";
  if (!"name" in Keyboard)
    Keyboard.name = "Keyboard";
  $desc = $collectedClasses.Keyboard;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Keyboard.prototype = $desc;
  function Mouse() {
  }
  Mouse.builtin$cls = "Mouse";
  if (!"name" in Mouse)
    Mouse.name = "Mouse";
  $desc = $collectedClasses.Mouse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mouse.prototype = $desc;
  function Touch() {
  }
  Touch.builtin$cls = "Touch";
  if (!"name" in Touch)
    Touch.name = "Touch";
  $desc = $collectedClasses.Touch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Touch.prototype = $desc;
  function Touch_Update_closure() {
  }
  Touch_Update_closure.builtin$cls = "Touch_Update_closure";
  if (!"name" in Touch_Update_closure)
    Touch_Update_closure.name = "Touch_Update_closure";
  $desc = $collectedClasses.Touch_Update_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Touch_Update_closure.prototype = $desc;
  function TouchData(fingerId, position, deltaPosition, deltaTime, tapCount, phase) {
    this.fingerId = fingerId;
    this.position = position;
    this.deltaPosition = deltaPosition;
    this.deltaTime = deltaTime;
    this.tapCount = tapCount;
    this.phase = phase;
  }
  TouchData.builtin$cls = "TouchData";
  if (!"name" in TouchData)
    TouchData.name = "TouchData";
  $desc = $collectedClasses.TouchData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchData.prototype = $desc;
  TouchData.prototype.get$position = function(receiver) {
    return this.position;
  };
  TouchData.prototype.get$phase = function() {
    return this.phase;
  };
  function Transform0(name, modelMatrix, rotation, _eulerAngles, _scale, _scaleMatrix) {
    this.name = name;
    this.modelMatrix = modelMatrix;
    this.rotation = rotation;
    this._eulerAngles = _eulerAngles;
    this._scale = _scale;
    this._scaleMatrix = _scaleMatrix;
  }
  Transform0.builtin$cls = "Transform0";
  if (!"name" in Transform0)
    Transform0.name = "Transform0";
  $desc = $collectedClasses.Transform0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transform0.prototype = $desc;
  Transform0.prototype.get$rotation = function() {
    return this.rotation;
  };
  function BoxCollider(vapor$BoxCollider$name, center, size, vapor$Collider$name, body, bodyType, isSensor, _fixtureDef, _bodyDef, name, enabled, gameObject, transform) {
    this.vapor$BoxCollider$name = vapor$BoxCollider$name;
    this.center = center;
    this.size = size;
    this.vapor$Collider$name = vapor$Collider$name;
    this.body = body;
    this.bodyType = bodyType;
    this.isSensor = isSensor;
    this._fixtureDef = _fixtureDef;
    this._bodyDef = _bodyDef;
    this.name = name;
    this.enabled = enabled;
    this.gameObject = gameObject;
    this.transform = transform;
  }
  BoxCollider.builtin$cls = "BoxCollider";
  if (!"name" in BoxCollider)
    BoxCollider.name = "BoxCollider";
  $desc = $collectedClasses.BoxCollider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoxCollider.prototype = $desc;
  function CircleCollider(vapor$CircleCollider$name, radius, vapor$Collider$name, body, bodyType, isSensor, _fixtureDef, _bodyDef, name, enabled, gameObject, transform) {
    this.vapor$CircleCollider$name = vapor$CircleCollider$name;
    this.radius = radius;
    this.vapor$Collider$name = vapor$Collider$name;
    this.body = body;
    this.bodyType = bodyType;
    this.isSensor = isSensor;
    this._fixtureDef = _fixtureDef;
    this._bodyDef = _bodyDef;
    this.name = name;
    this.enabled = enabled;
    this.gameObject = gameObject;
    this.transform = transform;
  }
  CircleCollider.builtin$cls = "CircleCollider";
  if (!"name" in CircleCollider)
    CircleCollider.name = "CircleCollider";
  $desc = $collectedClasses.CircleCollider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleCollider.prototype = $desc;
  function Collider(body, isSensor) {
    this.body = body;
    this.isSensor = isSensor;
  }
  Collider.builtin$cls = "Collider";
  if (!"name" in Collider)
    Collider.name = "Collider";
  $desc = $collectedClasses.Collider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Collider.prototype = $desc;
  Collider.prototype.get$body = function(receiver) {
    return this.body;
  };
  Collider.prototype.get$isSensor = function() {
    return this.isSensor;
  };
  function Matrix2(storage) {
    this.storage = storage;
  }
  Matrix2.builtin$cls = "Matrix2";
  if (!"name" in Matrix2)
    Matrix2.name = "Matrix2";
  $desc = $collectedClasses.Matrix2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix2.prototype = $desc;
  Matrix2.prototype.get$storage = function() {
    return this.storage;
  };
  function Matrix4(storage) {
    this.storage = storage;
  }
  Matrix4.builtin$cls = "Matrix4";
  if (!"name" in Matrix4)
    Matrix4.name = "Matrix4";
  $desc = $collectedClasses.Matrix4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix4.prototype = $desc;
  Matrix4.prototype.get$storage = function() {
    return this.storage;
  };
  function Quaternion(storage) {
    this.storage = storage;
  }
  Quaternion.builtin$cls = "Quaternion";
  if (!"name" in Quaternion)
    Quaternion.name = "Quaternion";
  $desc = $collectedClasses.Quaternion;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Quaternion.prototype = $desc;
  Quaternion.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector2(storage) {
    this.storage = storage;
  }
  Vector2.builtin$cls = "Vector2";
  if (!"name" in Vector2)
    Vector2.name = "Vector2";
  $desc = $collectedClasses.Vector2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector2.prototype = $desc;
  Vector2.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector3(storage) {
    this.storage = storage;
  }
  Vector3.builtin$cls = "Vector3";
  if (!"name" in Vector3)
    Vector3.name = "Vector3";
  $desc = $collectedClasses.Vector3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector3.prototype = $desc;
  Vector3.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector4(storage) {
    this.storage = storage;
  }
  Vector4.builtin$cls = "Vector4";
  if (!"name" in Vector4)
    Vector4.name = "Vector4";
  $desc = $collectedClasses.Vector4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector4.prototype = $desc;
  Vector4.prototype.get$storage = function() {
    return this.storage;
  };
  return [HtmlElement, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CanvasRenderingContext, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlDocument, HtmlHtmlElement, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiMessageEvent, ModElement, MouseEvent, Navigator, NavigatorUserMediaError, Node, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, Screen, ScriptElement, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, Touch0, TouchEvent, TouchList, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, _Attr, _Entity, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _Notation, _XMLHttpRequestProgressEvent, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedTransformList, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PointList, PolygonElement, PolylineElement, RadialGradientElement, Rect, RectElement, ScriptElement0, SetElement, StopElement, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, Buffer, ContextEvent, Program, RenderingContext, Shader0, Texture, UniformLocation, SqlError, ByteBuffer, TypedData, ByteData, Float32List, Float64List, Int16List, Int32List, Int8List, Uint16List, Uint32List, Uint8ClampedList, Uint8List, ApplyGravity, Ball, Planet, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSNumber, JSInt, JSDouble, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, ReceivePortImpl, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, ReflectionInfo, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, BoundClosure, CastErrorImplementation, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterator, ContactFilter, ContactImpulse, AxisAlignedBox, BroadPhase, BroadPhase_updatePairs_closure, DynamicTree, DynamicTreeNode, Pair, Collision, ClipVertex, EdgeResults, ContactID, Distance, DistanceInput, DistanceOutput, DistanceProxy, Features, Manifold, ManifoldPoint, CircleShape, MassData, PolygonShape, Shape, Simplex, SimplexCache, SimplexCache_closure, SimplexCache_closure0, SimplexVertex, TimeOfImpact, SeparationFunction, TimeOfImpactInput, TimeOfImpactOutput, WorldManifold, WorldManifold_closure, Sweep, Transform, Body, BodyDef, ContactManager, CircleContact, Contact, ContactConstraint, ContactConstraint_closure, ContactConstraintPoint, ContactEdge, ContactRegister, ContactSolver, ContactSolver_closure, PositionSolverManifold, PolygonAndCircleContact, PolygonContact, TimeOfImpactConstraint, TimeOfImpactConstraint_closure, TimeOfImpactSolver, TimeOfImpactSolver_closure, TimeOfImpactSolverManifold, Filter, Fixture, FixtureDef, Island, Position, Velocity, Joint, TimeStep, World, WorldQueryWrapper, DefaultWorldPool, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, FixedLengthListMixin, _AsyncError, Future, _Future, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, StreamSubscription, StreamTransformer, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, _HashMap_addAll_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, NoSuchMethodError_toString_closure, Comparable, DateTime, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, Expando, Iterator, Null, Object, Match, StackTrace, Stopwatch, StringBuffer, Symbol, Console, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, ImmutableListMixin, FixedSizeListIterator, Point, _RectangleBase, Rectangle, _NativeTypedArray, _NativeTypedArrayOfDouble, _NativeTypedArray_ListMixin, _NativeTypedArray_ListMixin_FixedLengthListMixin, _NativeTypedArrayOfInt, _NativeTypedArray_ListMixin0, _NativeTypedArray_ListMixin_FixedLengthListMixin0, Component, GameObject, Scene, Camera, Canvas, Material, Mesh, MeshRenderer, Renderer, Shader, Texture2D, Keyboard, Mouse, Touch, Touch_Update_closure, TouchData, Transform0, BoxCollider, CircleCollider, Collider, Matrix2, Matrix4, Quaternion, Vector2, Vector3, Vector4];
}
